Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
66207358;23940115;1775416;2;819b28a1-54be-42d2-987b-49f5ff694c48;2014-05-29 18:13:49.0;"Here is what I had to do: [Big props to this post][1]. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I had to create an extended class so that I could use the CAST function. &#xD;&#xA;&#xD;&#xA;    namespace YOUR\NAME\SPACE;&#xD;&#xA;&#xD;&#xA;    use Doctrine\ORM\Query\AST\Functions\FunctionNode;&#xD;&#xA;    use Doctrine\ORM\Query\Lexer;&#xD;&#xA;&#xD;&#xA;    class CastFunction extends FunctionNode&#xD;&#xA;    {&#xD;&#xA;    public $firstDateExpression = null;&#xD;&#xA;    public $unit = null;    &#xD;&#xA;&#xD;&#xA;    public function parse(\Doctrine\ORM\Query\Parser $parser)&#xD;&#xA;    {&#xD;&#xA;        $parser->match(Lexer::T_IDENTIFIER);&#xD;&#xA;        $parser->match(Lexer::T_OPEN_PARENTHESIS);&#xD;&#xA;        $this->firstDateExpression = $parser->StringPrimary();&#xD;&#xA;&#xD;&#xA;        $parser->match(Lexer::T_AS);&#xD;&#xA;&#xD;&#xA;        $parser->match(Lexer::T_IDENTIFIER);&#xD;&#xA;        $lexer = $parser->getLexer();&#xD;&#xA;        $this->unit = $lexer->token['value'];&#xD;&#xA;&#xD;&#xA;        $parser->match(Lexer::T_CLOSE_PARENTHESIS);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    public function getSql(\Doctrine\ORM\Query\SqlWalker $sqlWalker)&#xD;&#xA;    {&#xD;&#xA;        return sprintf('CAST(%s AS %s)',  $this->firstDateExpression->dispatch($sqlWalker),    &#xD;&#xA;    $this->unit);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Register it in the config.yml &#xD;&#xA;&#xD;&#xA;     doctrine:&#xD;&#xA;          orm:&#xD;&#xA;               dql:&#xD;&#xA;                    string_functions:&#xD;&#xA;                         CAST: Test\MyBundle\DQL\CastFunction&#xD;&#xA;&#xD;&#xA;Then use it in my query: &#xD;&#xA;&#xD;&#xA;	$query = $em->createQuery(""&#xD;&#xA;	SELECT fbaoh, CAST(fbaoh.datetimePlaced AS DATE) AS groupDateGrp, fbaoh.id as fbaohid, sum(fbaoh.qty) as sqty, p.id, p.name&#xD;&#xA;	FROM WIC\APIBundle\Entity\FBAOrderHistory fbaoh&#xD;&#xA;	LEFT JOIN WIC\ListingBundle\Entity\ListingAmazon la&#xD;&#xA;	WITH fbaoh.asin = la.standardProductIdValue&#xD;&#xA;	LEFT JOIN WIC\ListingBundle\Entity\Listing l&#xD;&#xA;	WITH fbaoh.sku = l.product_identifier&#xD;&#xA;	LEFT JOIN WIC\ProductBundle\Entity\Product p&#xD;&#xA;	WITH l.product = p.id&#xD;&#xA;	LEFT JOIN WIC\ListingBundle\Entity\ListingChannel lc&#xD;&#xA;	WITH l.listingChannel = lc.id&#xD;&#xA;	WHERE fbaoh.webServiceAccountAmazon = lc.webServiceAccount&#xD;&#xA;	AND fbaoh.sku = :sku&#xD;&#xA;	AND l.id = la.id&#xD;&#xA;	AND p.id != ''&#xD;&#xA;	GROUP BY groupDateGrp HAVING sqty > 1 ORDER BY fbaoh.datetimePlaced DESC&#xD;&#xA;	"");&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/19096429/error-when-use-custom-dql-function-with-doctrine-and-symfony2";;
147467004;23940115;-1;5;94c4c871-a2ef-4c1b-887b-c2e5073ef00d;2017-05-23 12:25:18.0;"Here is what I had to do: [Big props to this post][1]. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I had to create an extended class so that I could use the CAST function. &#xD;&#xA;&#xD;&#xA;    namespace YOUR\NAME\SPACE;&#xD;&#xA;&#xD;&#xA;    use Doctrine\ORM\Query\AST\Functions\FunctionNode;&#xD;&#xA;    use Doctrine\ORM\Query\Lexer;&#xD;&#xA;&#xD;&#xA;    class CastFunction extends FunctionNode&#xD;&#xA;    {&#xD;&#xA;    public $firstDateExpression = null;&#xD;&#xA;    public $unit = null;    &#xD;&#xA;&#xD;&#xA;    public function parse(\Doctrine\ORM\Query\Parser $parser)&#xD;&#xA;    {&#xD;&#xA;        $parser->match(Lexer::T_IDENTIFIER);&#xD;&#xA;        $parser->match(Lexer::T_OPEN_PARENTHESIS);&#xD;&#xA;        $this->firstDateExpression = $parser->StringPrimary();&#xD;&#xA;&#xD;&#xA;        $parser->match(Lexer::T_AS);&#xD;&#xA;&#xD;&#xA;        $parser->match(Lexer::T_IDENTIFIER);&#xD;&#xA;        $lexer = $parser->getLexer();&#xD;&#xA;        $this->unit = $lexer->token['value'];&#xD;&#xA;&#xD;&#xA;        $parser->match(Lexer::T_CLOSE_PARENTHESIS);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    public function getSql(\Doctrine\ORM\Query\SqlWalker $sqlWalker)&#xD;&#xA;    {&#xD;&#xA;        return sprintf('CAST(%s AS %s)',  $this->firstDateExpression->dispatch($sqlWalker),    &#xD;&#xA;    $this->unit);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Register it in the config.yml &#xD;&#xA;&#xD;&#xA;     doctrine:&#xD;&#xA;          orm:&#xD;&#xA;               dql:&#xD;&#xA;                    string_functions:&#xD;&#xA;                         CAST: Test\MyBundle\DQL\CastFunction&#xD;&#xA;&#xD;&#xA;Then use it in my query: &#xD;&#xA;&#xD;&#xA;	$query = $em->createQuery(""&#xD;&#xA;	SELECT fbaoh, CAST(fbaoh.datetimePlaced AS DATE) AS groupDateGrp, fbaoh.id as fbaohid, sum(fbaoh.qty) as sqty, p.id, p.name&#xD;&#xA;	FROM WIC\APIBundle\Entity\FBAOrderHistory fbaoh&#xD;&#xA;	LEFT JOIN WIC\ListingBundle\Entity\ListingAmazon la&#xD;&#xA;	WITH fbaoh.asin = la.standardProductIdValue&#xD;&#xA;	LEFT JOIN WIC\ListingBundle\Entity\Listing l&#xD;&#xA;	WITH fbaoh.sku = l.product_identifier&#xD;&#xA;	LEFT JOIN WIC\ProductBundle\Entity\Product p&#xD;&#xA;	WITH l.product = p.id&#xD;&#xA;	LEFT JOIN WIC\ListingBundle\Entity\ListingChannel lc&#xD;&#xA;	WITH l.listingChannel = lc.id&#xD;&#xA;	WHERE fbaoh.webServiceAccountAmazon = lc.webServiceAccount&#xD;&#xA;	AND fbaoh.sku = :sku&#xD;&#xA;	AND l.id = la.id&#xD;&#xA;	AND p.id != ''&#xD;&#xA;	GROUP BY groupDateGrp HAVING sqty > 1 ORDER BY fbaoh.datetimePlaced DESC&#xD;&#xA;	"");&#xD;&#xA;&#xD;&#xA;  [1]: https://stackoverflow.com/questions/19096429/error-when-use-custom-dql-function-with-doctrine-and-symfony2";;replaced http://stackoverflow.com/ with https://stackoverflow.com/
