Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
74278496;26044128;1342440;2;cc5ce67d-2a68-4ee8-b695-214fe619ee1f;2014-09-25 16:58:47.0;"You could convert each array within the array to a string and use indexOf instead to find `""0,1""`, otherwise you are strictly comparing objects and that won't work because no two objects are the same. &#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function myFunction() {&#xD;&#xA;      &#xD;&#xA;      var haystack = [[0,1],[1,1],[1,2]];&#xD;&#xA;      var needle = [0,1]  ;&#xD;&#xA;&#xD;&#xA;      var stringArray = haystack.map(function(array){       &#xD;&#xA;        return array.join();&#xD;&#xA;      });  &#xD;&#xA;      &#xD;&#xA;      // becomes [""0,1"",""1,1"",""1,2""]&#xD;&#xA;&#xD;&#xA;      var a = stringArray.indexOf( needle.join() ); // ""0,1""&#xD;&#xA;      &#xD;&#xA;      document.getElementById(""demo"").innerHTML = a;&#xD;&#xA;      &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <p>Click the button to display the position of the element ""[0,1]"":</p>&#xD;&#xA;    <button onclick=""myFunction()"">Try it</button>&#xD;&#xA;    <p id=""demo""></p>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->";;
74278806;26044128;1342440;5;5cd3e12a-7813-4b08-b129-49ce11dc84fa;2014-09-25 17:03:52.0;"**Convert and compare strings**&#xD;&#xA;&#xD;&#xA;You could convert each array within the array to a string using [`map()`][1] and [`join()`][2]. Then use indexOf instead to find `""0,1""`, you are strictly comparing objects except no two objects are the same. &#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function myFunction() {&#xD;&#xA;      &#xD;&#xA;      var haystack = [[0,1],[1,1],[1,2]];&#xD;&#xA;      var needle = [0,1];&#xD;&#xA;&#xD;&#xA;      var stringArray = haystack.map(function(array){       &#xD;&#xA;        return array.join();&#xD;&#xA;      });  &#xD;&#xA;      &#xD;&#xA;      // becomes [""0,1"",""1,1"",""1,2""]&#xD;&#xA;&#xD;&#xA;      var a = stringArray.indexOf( needle.join() ); // ""0,1""&#xD;&#xA;      &#xD;&#xA;      document.getElementById(""demo"").innerHTML = a;&#xD;&#xA;      &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <button onclick=""myFunction()"">Try it</button>&#xD;&#xA;    <p id=""demo""></p>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&#xD;&#xA;  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join";;deleted 2 characters in body
74279099;26044128;1342440;5;4d7c4ce6-4f85-44d0-b21d-d559c05e3e48;2014-09-25 17:09:04.0;"**Convert and compare strings**&#xD;&#xA;&#xD;&#xA;Strictly comparing objects is false because no two objects are the same. You could convert each array within the array to a string using [`map()`][1] and [`join()`][2]. Then use [`indexOf`][3] instead to find `""0,1""`.&#xD;&#xA;&#xD;&#xA;    [0,1] === [0,1] // false&#xD;&#xA;    ""0,1"" === ""0,1"" // true&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function myFunction() {&#xD;&#xA;      &#xD;&#xA;      var haystack = [ [0,1],[1,1],[1,2] ];&#xD;&#xA;      var needle = [0,1];&#xD;&#xA;&#xD;&#xA;      var stringArray = haystack.map(function(array){       &#xD;&#xA;        return array.join();&#xD;&#xA;      });  &#xD;&#xA;      &#xD;&#xA;      // becomes [""0,1"",""1,1"",""1,2""]&#xD;&#xA;&#xD;&#xA;      var a = stringArray.indexOf( needle.join() ); // ""0,1""&#xD;&#xA;      &#xD;&#xA;      document.getElementById(""demo"").innerHTML = a;&#xD;&#xA;      &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <button onclick=""myFunction()"">Try it</button>&#xD;&#xA;    <p id=""demo""></p>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&#xD;&#xA;  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf";;added 110 characters in body
74279497;26044128;1342440;5;f7d08cc9-f562-4a6f-8f33-a8ffe7e744bf;2014-09-25 17:14:52.0;"**Convert and compare strings**&#xD;&#xA;&#xD;&#xA;Strictly comparing objects is false because no two objects are the same. You could convert each array within the array to a string using [`map()`][1] and [`join()`][2]. Then use [`indexOf`][3] instead to find `""0,1""`.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    [0,1] === [0,1] // false&#xD;&#xA;&#xD;&#xA;    ""0,1"" === ""0,1"" // true&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;**The outcome:** `[""0,1"",""1,1"",""1,2""].indexOf(""0,1"")` which is the intended use of `indexOf()`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function myFunction() {&#xD;&#xA;      &#xD;&#xA;      var haystack = [ [0,1],[1,1],[1,2] ];&#xD;&#xA;      var needle = [0,1].join();&#xD;&#xA;&#xD;&#xA;      var stringArray = haystack.map(function(array){       &#xD;&#xA;        return array.join();&#xD;&#xA;      });        &#xD;&#xA;&#xD;&#xA;      var a = stringArray.indexOf(needle);&#xD;&#xA;      &#xD;&#xA;      document.getElementById(""demo"").innerHTML = a;&#xD;&#xA;      &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <button onclick=""myFunction()"">Try it</button>&#xD;&#xA;    <p id=""demo""></p>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&#xD;&#xA;  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf";;added 2 characters in body
74279997;26044128;1342440;5;8326bedc-cfb0-4868-a825-da59c7a33afe;2014-09-25 17:22:44.0;"**Convert and compare strings**&#xD;&#xA;&#xD;&#xA;Strictly comparing objects is false because no two objects are the same. You could convert each array within the array to a string using [`map()`][1] and [`join()`][2]. Then use [`indexOf`][3] to instead  find `""0,1""`.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    [0,1] === [0,1] // false&#xD;&#xA;&#xD;&#xA;    ""0,1"" === ""0,1"" // true&#xD;&#xA;&#xD;&#xA;<hr>    &#xD;&#xA;&#xD;&#xA;**The outcome:** `[""0,1"",""1,1"",""1,2""].indexOf(""0,1"")` which is the intended use of `indexOf()`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function myFunction() {&#xD;&#xA;      &#xD;&#xA;      var myArray = [ [0,1],[1,1],[1,2] ];&#xD;&#xA;      var needle = [0,1].join(); // or ""0,1""&#xD;&#xA;&#xD;&#xA;      var haystack = myArray.map(function(array){       &#xD;&#xA;        return array.join();&#xD;&#xA;      });        &#xD;&#xA;&#xD;&#xA;      var index = haystack.indexOf(needle);&#xD;&#xA;      &#xD;&#xA;      document.getElementById(""demo"").innerHTML = index ;&#xD;&#xA;      &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <button onclick=""myFunction()"">Try it</button>&#xD;&#xA;    <p id=""demo""></p>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&#xD;&#xA;  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf";;added 1 character in body
74281251;26044128;1342440;5;37f0a3c1-d5c9-4f30-8e48-e6b57748d8a0;2014-09-25 17:42:43.0;"**Convert and compare strings**&#xD;&#xA;&#xD;&#xA;Strictly comparing objects is false because no two objects are the same. You could convert each array within the array to a string using [`join()`][1] and [`split()`][2]. Then use [`indexOf`][3] to instead  find `""0,1""`.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    [0,1] === [0,1] // false&#xD;&#xA;&#xD;&#xA;    ""0,1"" === ""0,1"" // true&#xD;&#xA;&#xD;&#xA;<hr>    &#xD;&#xA;&#xD;&#xA;**The outcome:** `[""0,1"",""1,1"",""1,2""].indexOf(""0,1"")` which is the intended use of `indexOf()`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function myFunction() {&#xD;&#xA;      &#xD;&#xA;      var myArray = [ [0,1],[1,1],[1,2] ];&#xD;&#xA;      var needle = [0,1].join(); // or ""0,1""&#xD;&#xA;      var haystack = myArray.join('-').split('-');        &#xD;&#xA;      var index = haystack.indexOf(needle);      &#xD;&#xA;      document.getElementById(""demo"").innerHTML = index ;&#xD;&#xA;      &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <button onclick=""myFunction()"">Try it</button>&#xD;&#xA;    <p id=""demo""></p>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; - `.join('-')` produces `""0,1-1,1-1,2""`&#xD;&#xA;&#xD;&#xA; - `.split('-')` produces `[""0,1"", ""1,1"", ""1,2""]`&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join&#xD;&#xA;  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf";;deleted 53 characters in body
74281657;26044128;1342440;5;7e426bb6-566c-452e-bad6-1afad1679430;2014-09-25 17:49:19.0;"**Convert and compare strings**&#xD;&#xA;&#xD;&#xA;Strictly comparing objects is false because no two objects are the same. You could convert each array within the array to a string using [`join()`][1] and [`split()`][2]. Then use [`indexOf`][3] to instead  find `""0,1""`.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    [0,1] === [0,1] // false&#xD;&#xA;&#xD;&#xA;    ""0,1"" === ""0,1"" // true&#xD;&#xA;&#xD;&#xA;<hr>    &#xD;&#xA;&#xD;&#xA;**The outcome:** `[""0,1"",""1,1"",""1,2""].indexOf(""0,1"")` which is the intended use of `indexOf()`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function myFunction() {      &#xD;&#xA;        var needle = [0,1].join(); // or ""0,1""&#xD;&#xA;        var haystack = [ [0,1],[1,1],[1,2] ];&#xD;&#xA;        var index = haystack.join('-').split('-').indexOf(needle);      &#xD;&#xA;        document.getElementById(""demo"").innerHTML = index ;      &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <button onclick=""myFunction()"">Try it</button>&#xD;&#xA;    <p id=""demo""></p>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; - `.join('-')` produces `""0,1-1,1-1,2""`&#xD;&#xA;&#xD;&#xA; - `.split('-')` produces `[""0,1"", ""1,1"", ""1,2""]`&#xD;&#xA;&#xD;&#xA; - `.indexOf(""0,1"")` produces `0`&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join&#xD;&#xA;  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf";;deleted 30 characters in body
74281952;26044128;1342440;5;2732ed5b-b113-4362-ad35-7790d106920f;2014-09-25 17:54:42.0;"<h2>Convert and compare strings</h2>&#xD;&#xA;&#xD;&#xA;Strictly comparing objects is false because no two objects are the same. You could convert each array within the array to a string using [`join()`][1] and [`split()`][2]. Then use [`indexOf`][3] to instead  find `""0,1""`.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    [0,1] === [0,1] // false&#xD;&#xA;&#xD;&#xA;    ""0,1"" === ""0,1"" // true&#xD;&#xA;&#xD;&#xA;<hr>    &#xD;&#xA;&#xD;&#xA;**The goal:** `[""0,1"",""1,1"",""1,2""].indexOf(""0,1"")` which is the intended use of `indexOf()`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function myFunction() {      &#xD;&#xA;        var needle = [0,1].join(); // or ""0,1""&#xD;&#xA;        var haystack = [ [0,1],[1,1],[1,2] ];&#xD;&#xA;        var index = haystack.join('-').split('-').indexOf(needle);      &#xD;&#xA;        document.getElementById(""demo"").innerHTML = index ;      &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <button onclick=""myFunction()"">Try it</button>&#xD;&#xA;    <p id=""demo""></p>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; - `.join('-')` produces `""0,1-1,1-1,2""`&#xD;&#xA;&#xD;&#xA; - `.split('-')` produces `[""0,1"", ""1,1"", ""1,2""]`&#xD;&#xA;&#xD;&#xA; - `.indexOf(""0,1"")` produces `0`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;&#xD;&#xA;<h2>Abstract version</h2>&#xD;&#xA;&#xD;&#xA;    function arrayInArray(needle, haystack) {      &#xD;&#xA;        return haystack.join('-').split('-').indexOf( needle.join() );          &#xD;&#xA;    } &#xD;&#xA;&#xD;&#xA;    arrayInArray([0,1], [[""0,1""],[""1,1""],[""1,2""]]) // returns 0&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join&#xD;&#xA;  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf";;deleted 30 characters in body
74282430;26044128;1342440;5;138de355-d172-4dd6-9600-20e499b3501a;2014-09-25 18:02:33.0;"<h2>Convert and compare strings</h2>&#xD;&#xA;&#xD;&#xA;Strictly comparing objects is false because no two objects are the same. You could convert each array within the array to a string using [`join()`][1] and [`split()`][2]. Then use [`indexOf`][3] to instead  find `""0,1""`.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    [0,1] === [0,1] // false&#xD;&#xA;&#xD;&#xA;    ""0,1"" === ""0,1"" // true&#xD;&#xA;&#xD;&#xA;<hr>    &#xD;&#xA;&#xD;&#xA;**The goal:** `[""0,1"",""1,1"",""1,2""].indexOf(""0,1"")` which is the intended use of `indexOf()`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function myFunction() { &#xD;&#xA;     &#xD;&#xA;        var needle = [0,1].join(); // or ""0,1""&#xD;&#xA;&#xD;&#xA;        var haystack = [ [0,1],[1,1],[1,2] ];&#xD;&#xA;&#xD;&#xA;        var index = haystack.join('-').split('-').indexOf(needle); &#xD;&#xA;     &#xD;&#xA;        document.getElementById(""demo"").innerHTML = index ;  &#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <button onclick=""myFunction()"">Try it</button>&#xD;&#xA;    <p id=""demo""></p>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; - `.join('-')` produces `""0,1-1,1-1,2""`&#xD;&#xA;&#xD;&#xA; - `.split('-')` produces `[""0,1"", ""1,1"", ""1,2""]`&#xD;&#xA;&#xD;&#xA; - `.indexOf(""0,1"")` produces `0`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;&#xD;&#xA;<h2>Abstract version</h2>&#xD;&#xA;&#xD;&#xA;    function arrayInArray(needle, haystack) {      &#xD;&#xA;        return haystack.join('-').split('-').indexOf( needle.join() );          &#xD;&#xA;    } &#xD;&#xA;&#xD;&#xA;    arrayInArray([0,1], [[""0,1""],[""1,1""],[""1,2""]]) // returns 0&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join&#xD;&#xA;  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf";;added 10 characters in body
74284779;26044128;1342440;5;4dd56a85-c4ef-4632-a7e1-3724f299c267;2014-09-25 18:40:21.0;"<h2>Convert and compare strings</h2>&#xD;&#xA;&#xD;&#xA;Strictly comparing objects is false because no two objects are the same. You could convert each array within the array to a string using [`join()`][1] and [`split()`][2]. Then use [`indexOf`][3] to instead  find `""0,1""`.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    [0,1] === [0,1] // false&#xD;&#xA;&#xD;&#xA;    ""0,1"" === ""0,1"" // true&#xD;&#xA;&#xD;&#xA;<hr>    &#xD;&#xA;&#xD;&#xA;**The goal:** `[""0,1"",""1,1"",""1,2""].indexOf(""0,1"")` which is the intended use of `indexOf()`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function myFunction() { &#xD;&#xA;     &#xD;&#xA;        var needle = [0,1].join(); // or ""0,1""&#xD;&#xA;&#xD;&#xA;        var haystack = [ [0,1],[1,1],[1,2] ];&#xD;&#xA;&#xD;&#xA;        var index = haystack.join('-').split('-').indexOf(needle); &#xD;&#xA;     &#xD;&#xA;        document.getElementById(""demo"").innerHTML = index ;  &#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <button onclick=""myFunction()"">Try it</button>&#xD;&#xA;    <p id=""demo""></p>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; - `.join('-')` produces `""0,1-1,1-1,2""`&#xD;&#xA;&#xD;&#xA; - `.split('-')` produces `[""0,1"", ""1,1"", ""1,2""]`&#xD;&#xA;&#xD;&#xA; - `.indexOf(""0,1"")` produces `0`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;&#xD;&#xA;<h2>Abstract version</h2>&#xD;&#xA;&#xD;&#xA;    var needle = [0,1];&#xD;&#xA;    var haystack = [[""0,1""],[""1,1""],[""1,2""]];&#xD;&#xA;    var index = getIndex(needle, haystack) // returns 0&#xD;&#xA;&#xD;&#xA;    function getIndex(needle, haystack) {      &#xD;&#xA;        return haystack.join('-').split('-').indexOf( needle.join() );          &#xD;&#xA;    } &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join&#xD;&#xA;  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf";;added 80 characters in body
74292227;26044128;1342440;5;2d6f5f33-ff56-4b06-ab53-3f19efdbe17f;2014-09-25 20:44:13.0;"<h2>Convert and compare strings</h2>&#xD;&#xA;&#xD;&#xA;Strictly comparing objects is false because no two objects are the same. You could convert each array within the array to a string using [`join()`][1] and [`split()`][2]. Then use [`indexOf`][3] to instead  find `""0,1""`.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    [0,1] === [0,1] // false&#xD;&#xA;&#xD;&#xA;    ""0,1"" === ""0,1"" // true&#xD;&#xA;&#xD;&#xA;<hr>    &#xD;&#xA;&#xD;&#xA;**The goal:** `[""0,1"",""1,1"",""1,2""].indexOf(""0,1"")` which is the intended use of `indexOf()`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function myFunction() { &#xD;&#xA;     &#xD;&#xA;        var needle = [0,1].join(); // or ""0,1""&#xD;&#xA;&#xD;&#xA;        var haystack = [ [0,1],[1,1],[1,2] ];&#xD;&#xA;&#xD;&#xA;        var index = haystack.join('-').split('-').indexOf(needle); &#xD;&#xA;     &#xD;&#xA;        document.getElementById(""demo"").innerHTML = index ;  &#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <button onclick=""myFunction()"">Try it</button>&#xD;&#xA;    <p id=""demo""></p>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; - `.join('-')` produces `""0,1-1,1-1,2""`&#xD;&#xA;&#xD;&#xA; - `.split('-')` produces `[""0,1"", ""1,1"", ""1,2""]`&#xD;&#xA;&#xD;&#xA; - `.indexOf(""0,1"")` produces `0`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;&#xD;&#xA;<h2>Standalone Function</h2>&#xD;&#xA;&#xD;&#xA;    var needle = [0,1];&#xD;&#xA;    var haystack = [[""0,1""],[""1,1""],[""1,2""]];&#xD;&#xA;    var index = getIndex(needle, haystack) // returns 0&#xD;&#xA;&#xD;&#xA;    function getIndex(needle, haystack) {      &#xD;&#xA;        return haystack.join('-').split('-').indexOf( needle.join() );          &#xD;&#xA;    } &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join&#xD;&#xA;  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf";;added 3 characters in body
74302960;26044128;1342440;5;b9ac3e47-5ce3-4efb-bd9e-1125e113e28a;2014-09-26 01:29:31.0;"<h2>Convert and compare strings</h2>&#xD;&#xA;&#xD;&#xA;Strictly comparing objects is false because no two objects are the same. You could convert each array within the array to a string using [`join()`][1] and [`split()`][2]. Then use [`indexOf`][3] to instead  find `""0,1""`.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    [0,1] === [0,1] // false&#xD;&#xA;&#xD;&#xA;    ""0,1"" === ""0,1"" // true&#xD;&#xA;&#xD;&#xA;<hr>    &#xD;&#xA;&#xD;&#xA;**The goal:** `[""0,1"",""1,1"",""1,2""].indexOf(""0,1"")` which is the intended use of `indexOf()`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;<!-- language: lang-js -->  &#xD;&#xA;var needle = [0,1].join(); // or ""0,1""&#xD;&#xA;var haystack = [ [0,1],[1,1],[1,2] ];&#xD;&#xA;var index = haystack.join('-').split('-').indexOf(needle); &#xD;&#xA;     &#xD;&#xA;document.getElementById(""demo"").innerHTML = index ;  &#xD;&#xA;    &#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;    <p id=""demo""></p>&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; - `.join('-')` produces `""0,1-1,1-1,2""`&#xD;&#xA;&#xD;&#xA; - `.split('-')` produces `[""0,1"", ""1,1"", ""1,2""]`&#xD;&#xA;&#xD;&#xA; - `.indexOf(""0,1"")` produces `0`&#xD;&#xA;&#xD;&#xA;<hr>&#xD;&#xA;&#xD;&#xA;<h2>Standalone Function</h2>&#xD;&#xA;&#xD;&#xA;    var needle = [0,1];&#xD;&#xA;    var haystack = [[""0,1""],[""1,1""],[""1,2""]];&#xD;&#xA;    var index = getIndex(needle, haystack) // returns 0&#xD;&#xA;&#xD;&#xA;    function getIndex(needle, haystack) {      &#xD;&#xA;        return haystack.join('-').split('-').indexOf( needle.join() );          &#xD;&#xA;    } &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join&#xD;&#xA;  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf";;deleted 138 characters in body
