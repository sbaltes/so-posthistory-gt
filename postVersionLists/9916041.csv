Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
22683154;9916041;787832;2;9eb0c39b-b847-448e-9b25-f71977a798bb;2012-03-28 21:37:42.0;"I'm learning Spring 3.1 by slowly converting a legacy Servlet application to Spring.   I made a small test Spring 3.1 webapp to learn the Spring 3.1 LDAP features.   After a lot of pain, I finally got everything running to the point where I can run webabb and get to the login page.  After submitting my userid and password, the webapp just HANGS, indefinitely ( I'm running it on Tomcat 6.X, JDK/JRE 1.5, on my computer ).&#xD;&#xA;&#xD;&#xA;No errors to be found in the logs Tomcat generates.&#xD;&#xA;&#xD;&#xA;I don't think it is Firewall or networking related issue.&#xD;&#xA;&#xD;&#xA;The legacy Servlet app that uses straight Java for LDAP gets in just fine.   I also wrote a small, standalone Java program based on the legacy Java code to test basic connectivity.  No problem connecting to LDAP from my computer with that program either.   It has to be something I'm doing or not doing.   In addition to being new to Spring I am also new to LDAP, so I am a bit stumped of what to look at next.&#xD;&#xA;&#xD;&#xA;I read this good intro to LDAP, so I have a better idea of the basic concepts and what some of those ""o,ou,dc,dn"" things mean :) ( http://www.zytrax.com/books/ldap/ch2/ )&#xD;&#xA;&#xD;&#xA;Here is a copy of the standalone Java program to test LDAP connectivity.  It is basically how the legacy system does the job:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;&#xD;&#xA;    import javax.naming.directory.*;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import java.sql.*;&#xD;&#xA;    &#xD;&#xA;    public class LDAPDemo {&#xD;&#xA;    &#xD;&#xA;        public static void main(String args[]) {&#xD;&#xA;    &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";&#xD;&#xA;            String ldapurl            = ""ldap://ldap-abc.sam.acme.com:636/o=acme.com"";&#xD;&#xA;            String loginid            = ""Joe.A.Blow"";&#xD;&#xA;            String password           = ""LetMeIn"";&#xD;&#xA;            DirContext ctx            = null;&#xD;&#xA;            Hashtable env             = new Hashtable();&#xD;&#xA;            Attributes attr           = null;&#xD;&#xA;            Attributes resultsAttrs   = null;&#xD;&#xA;            SearchResult result       = null;&#xD;&#xA;            NamingEnumeration results = null;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);&#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);&#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");&#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");&#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");&#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);&#xD;&#xA;            try {&#xD;&#xA;    &#xD;&#xA;                ctx     = new InitialDirContext(env);&#xD;&#xA;                attr    = new BasicAttributes(true);&#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));&#xD;&#xA;                results = ctx.search(""ou=People"",attr);&#xD;&#xA;    &#xD;&#xA;                while (results.hasMore()) {&#xD;&#xA;                    result       = (SearchResult)results.next();&#xD;&#xA;                    resultsAttrs = result.getAttributes();&#xD;&#xA;    &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {&#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();&#xD;&#xA;                        System.out.println(""a.getID() == "" + a.getID() + "" a.get() == "" + a.get().toString());&#xD;&#xA;                        //if(a.getID().equals(""mail""))&#xD;&#xA;                        //    System.out.println(a.get().toString()); &#xD;&#xA;    &#xD;&#xA;                    }// end for loop&#xD;&#xA;                }// end while loop&#xD;&#xA;    &#xD;&#xA;            }// end try&#xD;&#xA;            catch (Exception e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;        }// end function main()&#xD;&#xA;    }// end class LDAPDemo&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is a copy of my *-security.xml&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""&#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans&#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&#xD;&#xA;        http://www.springframework.org/schema/security&#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <s:http auto-config=""true"">&#xD;&#xA;        <s:intercept-url pattern=""/welcome*"" access=""ROLE_USER"" />&#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""&#xD;&#xA;          authentication-failure-url=""/loginfailed"" />&#xD;&#xA;        <s:logout logout-success-url=""/logout"" />&#xD;&#xA;      </s:http>&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-abc.sam.acme.com:636/dc=acme,dc=com"" />&#xD;&#xA;    &#xD;&#xA;        <s:authentication-manager>&#xD;&#xA;          <s:ldap-authentication-provider &#xD;&#xA;            user-search-filter=""(uid={0})""&#xD;&#xA;            group-search-filter=""member={0}"">&#xD;&#xA;            <s:password-compare/>&#xD;&#xA;          </s:ldap-authentication-provider>&#xD;&#xA;        </s:authentication-manager>&#xD;&#xA;    &#xD;&#xA;    </beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is a copy of my *-servlet.xml&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;      xmlns:context=""http://www.springframework.org/schema/context""&#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;      xmlns:mvc=""http://www.springframework.org/schema/mvc""&#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/mvc&#xD;&#xA;            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd&#xD;&#xA;            http://www.springframework.org/schema/beans     &#xD;&#xA;            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&#xD;&#xA;            http://www.springframework.org/schema/context &#xD;&#xA;            http://www.springframework.org/schema/context/spring-context-3.0.xsd"">&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <context:component-scan base-package=""com.controllers"" />&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <mvc:resources mapping = ""/**"" location = ""/""/>&#xD;&#xA;      <mvc:annotation-driven/>&#xD;&#xA;    &#xD;&#xA;      <bean&#xD;&#xA;        class=""org.springframework.web.servlet.view.InternalResourceViewResolver"">&#xD;&#xA;        <property name = ""prefix"" value = ""/jsp/""/>&#xD;&#xA;        <property name = ""suffix"" value = "".jsp""/>&#xD;&#xA;      </bean>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    </beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is a copy of my web.xml&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;    <web-app  id=""WebApp_ID"" version=""3.0""&#xD;&#xA;       xmlns=""http://java.sun.com/xml/ns/javaee"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;        xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"">&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <display-name>Spring Web MVC Application</display-name>&#xD;&#xA;    &#xD;&#xA;      <servlet>&#xD;&#xA;        <servlet-name>spring3mvcdemo</servlet-name>&#xD;&#xA;        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>&#xD;&#xA;        <load-on-startup>1</load-on-startup>&#xD;&#xA;      </servlet>&#xD;&#xA;    &#xD;&#xA;      <servlet-mapping>&#xD;&#xA;        <servlet-name>spring3mvcdemo</servlet-name>&#xD;&#xA;        <url-pattern>/</url-pattern>&#xD;&#xA;      </servlet-mapping>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <!-- Help Find The Spring Config Files -->&#xD;&#xA;      <listener>&#xD;&#xA;        <listener-class>&#xD;&#xA;                      org.springframework.web.context.ContextLoaderListener&#xD;&#xA;        </listener-class>&#xD;&#xA;      </listener>&#xD;&#xA;    &#xD;&#xA;      <context-param>&#xD;&#xA;        <param-name>contextConfigLocation</param-name>&#xD;&#xA;        <param-value>&#xD;&#xA;    			/WEB-INF/spring3mvcdemo-servlet.xml,&#xD;&#xA;    			/WEB-INF/spring3mvcdemo-security.xml&#xD;&#xA;        </param-value>&#xD;&#xA;      </context-param>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <!-- Spring Security -->&#xD;&#xA;      <filter>&#xD;&#xA;        <filter-name>springSecurityFilterChain</filter-name>&#xD;&#xA;        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>&#xD;&#xA;      </filter>&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;      <filter-mapping>&#xD;&#xA;        <filter-name>springSecurityFilterChain</filter-name>&#xD;&#xA;        <url-pattern>/*</url-pattern>&#xD;&#xA;      </filter-mapping>&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;      <!-- Integrate A Legacy Screen Done With A Servlet -->&#xD;&#xA;    &#xD;&#xA;      <servlet>&#xD;&#xA;        <servlet-name>HelloWorldServlet</servlet-name>&#xD;&#xA;        <servlet-class>&#xD;&#xA;    			com.legacy.HelloWorldServlet&#xD;&#xA;        </servlet-class>&#xD;&#xA;      </servlet>&#xD;&#xA;      <servlet-mapping>&#xD;&#xA;        <servlet-name>HelloWorldServlet</servlet-name>&#xD;&#xA;        <url-pattern>/helloworldservlet</url-pattern>&#xD;&#xA;      </servlet-mapping>&#xD;&#xA;    &#xD;&#xA;    </web-app>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I am new to all of these technologies, so I don't know even where to look for a cause of the hanging.  Again, no messages in the tomcat error logs.&#xD;&#xA;&#xD;&#xA;Thanks much in advance for any ideas.";;
22684540;9916041;787832;5;6fb63ddb-1924-40ac-a066-2005923fc2be;2012-03-28 22:29:19.0;"I'm learning Spring 3.1 by slowly converting a legacy Servlet application to Spring.   I made a small test Spring 3.1 webapp to learn the Spring 3.1 LDAP features.   After a lot of pain, I finally got everything running to the point where I can run webabb and get to the login page.  After submitting my userid and password, the webapp just HANGS, indefinitely ( I'm running it on Tomcat 6.X, JDK/JRE 1.5, on my computer ).&#xD;&#xA;&#xD;&#xA;No errors to be found in the logs Tomcat generates.&#xD;&#xA;&#xD;&#xA;I don't think it is Firewall or networking related issue.&#xD;&#xA;&#xD;&#xA;The legacy Servlet app that uses straight Java for LDAP gets in just fine.   I also wrote a small, standalone Java program based on the legacy Java code to test basic connectivity.  No problem connecting to LDAP from my computer with that program either.   It has to be something I'm doing or not doing.   In addition to being new to Spring I am also new to LDAP, so I am a bit stumped of what to look at next.&#xD;&#xA;&#xD;&#xA;I read this good intro to LDAP, so I have a better idea of the basic concepts and what some of those ""o,ou,dc,dn"" things mean :) ( http://www.zytrax.com/books/ldap/ch2/ )&#xD;&#xA;&#xD;&#xA;Here is a copy of the standalone Java program to test LDAP connectivity.  It is basically how the legacy system does the job:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;&#xD;&#xA;    import javax.naming.directory.*;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import java.sql.*;&#xD;&#xA;    &#xD;&#xA;    public class LDAPDemo {&#xD;&#xA;    &#xD;&#xA;        public static void main(String args[]) {&#xD;&#xA;    &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";&#xD;&#xA;            String ldapurl            = ""ldap://ldap-abc.sam.acme.com:636/o=acme.com"";&#xD;&#xA;            String loginid            = ""Joe.A.Blow"";&#xD;&#xA;            String password           = ""LetMeIn"";&#xD;&#xA;            DirContext ctx            = null;&#xD;&#xA;            Hashtable env             = new Hashtable();&#xD;&#xA;            Attributes attr           = null;&#xD;&#xA;            Attributes resultsAttrs   = null;&#xD;&#xA;            SearchResult result       = null;&#xD;&#xA;            NamingEnumeration results = null;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);&#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);&#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");&#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");&#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");&#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);&#xD;&#xA;            try {&#xD;&#xA;    &#xD;&#xA;                ctx     = new InitialDirContext(env);&#xD;&#xA;                attr    = new BasicAttributes(true);&#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));&#xD;&#xA;                results = ctx.search(""ou=People"",attr);&#xD;&#xA;    &#xD;&#xA;                while (results.hasMore()) {&#xD;&#xA;                    result       = (SearchResult)results.next();&#xD;&#xA;                    resultsAttrs = result.getAttributes();&#xD;&#xA;    &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {&#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();&#xD;&#xA;                        System.out.println(""a.getID() == "" + a.getID() + "" a.get() == "" + a.get().toString());&#xD;&#xA;                        //if(a.getID().equals(""mail""))&#xD;&#xA;                        //    System.out.println(a.get().toString()); &#xD;&#xA;    &#xD;&#xA;                    }// end for loop&#xD;&#xA;                }// end while loop&#xD;&#xA;    &#xD;&#xA;            }// end try&#xD;&#xA;            catch (Exception e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;        }// end function main()&#xD;&#xA;    }// end class LDAPDemo&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is a copy of my *-security.xml&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""&#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans&#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&#xD;&#xA;        http://www.springframework.org/schema/security&#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <s:http auto-config=""true"">&#xD;&#xA;        <s:intercept-url pattern=""/welcome*"" access=""ROLE_USER"" />&#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""&#xD;&#xA;          authentication-failure-url=""/loginfailed"" />&#xD;&#xA;        <s:logout logout-success-url=""/logout"" />&#xD;&#xA;      </s:http>&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-abc.sam.acme.com:636/o=acme.com"" />&#xD;&#xA;    &#xD;&#xA;        <s:authentication-manager>&#xD;&#xA;          <s:ldap-authentication-provider &#xD;&#xA;            user-search-filter=""(uid={0})""&#xD;&#xA;            group-search-filter=""member={0}"">&#xD;&#xA;            <s:password-compare/>&#xD;&#xA;          </s:ldap-authentication-provider>&#xD;&#xA;        </s:authentication-manager>&#xD;&#xA;    &#xD;&#xA;    </beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is a copy of my *-servlet.xml&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;      xmlns:context=""http://www.springframework.org/schema/context""&#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;      xmlns:mvc=""http://www.springframework.org/schema/mvc""&#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/mvc&#xD;&#xA;            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd&#xD;&#xA;            http://www.springframework.org/schema/beans     &#xD;&#xA;            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&#xD;&#xA;            http://www.springframework.org/schema/context &#xD;&#xA;            http://www.springframework.org/schema/context/spring-context-3.0.xsd"">&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <context:component-scan base-package=""com.controllers"" />&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <mvc:resources mapping = ""/**"" location = ""/""/>&#xD;&#xA;      <mvc:annotation-driven/>&#xD;&#xA;    &#xD;&#xA;      <bean&#xD;&#xA;        class=""org.springframework.web.servlet.view.InternalResourceViewResolver"">&#xD;&#xA;        <property name = ""prefix"" value = ""/jsp/""/>&#xD;&#xA;        <property name = ""suffix"" value = "".jsp""/>&#xD;&#xA;      </bean>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    </beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is a copy of my web.xml&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;    <web-app  id=""WebApp_ID"" version=""3.0""&#xD;&#xA;       xmlns=""http://java.sun.com/xml/ns/javaee"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;        xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"">&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <display-name>Spring Web MVC Application</display-name>&#xD;&#xA;    &#xD;&#xA;      <servlet>&#xD;&#xA;        <servlet-name>spring3mvcdemo</servlet-name>&#xD;&#xA;        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>&#xD;&#xA;        <load-on-startup>1</load-on-startup>&#xD;&#xA;      </servlet>&#xD;&#xA;    &#xD;&#xA;      <servlet-mapping>&#xD;&#xA;        <servlet-name>spring3mvcdemo</servlet-name>&#xD;&#xA;        <url-pattern>/</url-pattern>&#xD;&#xA;      </servlet-mapping>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <!-- Help Find The Spring Config Files -->&#xD;&#xA;      <listener>&#xD;&#xA;        <listener-class>&#xD;&#xA;                      org.springframework.web.context.ContextLoaderListener&#xD;&#xA;        </listener-class>&#xD;&#xA;      </listener>&#xD;&#xA;    &#xD;&#xA;      <context-param>&#xD;&#xA;        <param-name>contextConfigLocation</param-name>&#xD;&#xA;        <param-value>&#xD;&#xA;    			/WEB-INF/spring3mvcdemo-servlet.xml,&#xD;&#xA;    			/WEB-INF/spring3mvcdemo-security.xml&#xD;&#xA;        </param-value>&#xD;&#xA;      </context-param>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <!-- Spring Security -->&#xD;&#xA;      <filter>&#xD;&#xA;        <filter-name>springSecurityFilterChain</filter-name>&#xD;&#xA;        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>&#xD;&#xA;      </filter>&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;      <filter-mapping>&#xD;&#xA;        <filter-name>springSecurityFilterChain</filter-name>&#xD;&#xA;        <url-pattern>/*</url-pattern>&#xD;&#xA;      </filter-mapping>&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;      <!-- Integrate A Legacy Screen Done With A Servlet -->&#xD;&#xA;    &#xD;&#xA;      <servlet>&#xD;&#xA;        <servlet-name>HelloWorldServlet</servlet-name>&#xD;&#xA;        <servlet-class>&#xD;&#xA;    			com.legacy.HelloWorldServlet&#xD;&#xA;        </servlet-class>&#xD;&#xA;      </servlet>&#xD;&#xA;      <servlet-mapping>&#xD;&#xA;        <servlet-name>HelloWorldServlet</servlet-name>&#xD;&#xA;        <url-pattern>/helloworldservlet</url-pattern>&#xD;&#xA;      </servlet-mapping>&#xD;&#xA;    &#xD;&#xA;    </web-app>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I am new to all of these technologies, so I don't know even where to look for a cause of the hanging.  Again, no messages in the tomcat error logs.&#xD;&#xA;&#xD;&#xA;Thanks much in advance for any ideas.";;deleted 4 characters in body
22712549;9916041;787832;5;142e152f-f4e4-4310-bebc-5e983d9bce17;2012-03-29 14:55:08.0;"I'm learning Spring 3.1 by slowly converting a legacy Servlet application to Spring.   I made a small test Spring 3.1 webapp to learn the Spring 3.1 LDAP features.   After a lot of pain, I finally got everything running to the point where I can run webabb and get to the login page.  After submitting my userid and password, the webapp just HANGS, indefinitely ( I'm running it on Tomcat 6.X, JDK/JRE 1.5, on my computer ).&#xD;&#xA;&#xD;&#xA;No errors to be found in the logs Tomcat generates.&#xD;&#xA;&#xD;&#xA;I don't think it is Firewall or networking related issue.&#xD;&#xA;&#xD;&#xA;The legacy Servlet app that uses straight Java for LDAP gets in just fine.   I also wrote a small, standalone Java program based on the legacy Java code to test basic connectivity.  No problem connecting to LDAP from my computer with that program either.   It has to be something I'm doing or not doing.   In addition to being new to Spring I am also new to LDAP, so I am a bit stumped of what to look at next.&#xD;&#xA;&#xD;&#xA;I read this good intro to LDAP, so I have a better idea of the basic concepts and what some of those ""o,ou,dc,dn"" things mean :) ( http://www.zytrax.com/books/ldap/ch2/ )&#xD;&#xA;&#xD;&#xA;Here is a copy of the standalone Java program to test LDAP connectivity.  It is basically how the legacy system does the job:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;&#xD;&#xA;    import javax.naming.directory.*;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import java.sql.*;&#xD;&#xA;    &#xD;&#xA;    public class LDAPDemo {&#xD;&#xA;    &#xD;&#xA;        public static void main(String args[]) {&#xD;&#xA;    &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";&#xD;&#xA;            String ldapurl            = ""ldap://ldap-abc.sam.acme.com:636/o=acme.com"";&#xD;&#xA;            String loginid            = ""Joe.A.Blow"";&#xD;&#xA;            String password           = ""LetMeIn"";&#xD;&#xA;            DirContext ctx            = null;&#xD;&#xA;            Hashtable env             = new Hashtable();&#xD;&#xA;            Attributes attr           = null;&#xD;&#xA;            Attributes resultsAttrs   = null;&#xD;&#xA;            SearchResult result       = null;&#xD;&#xA;            NamingEnumeration results = null;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);&#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);&#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");&#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");&#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");&#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);&#xD;&#xA;            try {&#xD;&#xA;    &#xD;&#xA;                ctx     = new InitialDirContext(env);&#xD;&#xA;                attr    = new BasicAttributes(true);&#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));&#xD;&#xA;                results = ctx.search(""ou=People"",attr);&#xD;&#xA;    &#xD;&#xA;                while (results.hasMore()) {&#xD;&#xA;                    result       = (SearchResult)results.next();&#xD;&#xA;                    resultsAttrs = result.getAttributes();&#xD;&#xA;    &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {&#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();&#xD;&#xA;                        System.out.println(""a.getID() == "" + a.getID() + "" a.get() == "" + a.get().toString());&#xD;&#xA;                        //if(a.getID().equals(""mail""))&#xD;&#xA;                        //    System.out.println(a.get().toString()); &#xD;&#xA;    &#xD;&#xA;                    }// end for loop&#xD;&#xA;                }// end while loop&#xD;&#xA;    &#xD;&#xA;            }// end try&#xD;&#xA;            catch (Exception e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;        }// end function main()&#xD;&#xA;    }// end class LDAPDemo&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is a copy of my *-security.xml&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""&#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans&#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&#xD;&#xA;        http://www.springframework.org/schema/security&#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <s:http auto-config=""true"">&#xD;&#xA;        <s:intercept-url pattern=""/welcome*"" access=""ROLE_USER"" />&#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""&#xD;&#xA;          authentication-failure-url=""/loginfailed"" />&#xD;&#xA;        <s:logout logout-success-url=""/logout"" />&#xD;&#xA;      </s:http>&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-abc.sam.acme.com:636/o=acme.com"" />&#xD;&#xA;    &#xD;&#xA;      <s:authentication-manager>&#xD;&#xA;        <s:ldap-authentication-provider &#xD;&#xA;            group-search-filter=""member={0}""&#xD;&#xA;            group-search-base=""ou=groups""&#xD;&#xA;            user-search-base=""ou=people""&#xD;&#xA;            user-search-filter=""uid={0}"" >&#xD;&#xA;        <s:password-compare/>&#xD;&#xA;       </s:ldap-authentication-provider>&#xD;&#xA;     </s:authentication-manager>&#xD;&#xA;    &#xD;&#xA;    </beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is a copy of my *-servlet.xml&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;      xmlns:context=""http://www.springframework.org/schema/context""&#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;      xmlns:mvc=""http://www.springframework.org/schema/mvc""&#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/mvc&#xD;&#xA;            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd&#xD;&#xA;            http://www.springframework.org/schema/beans     &#xD;&#xA;            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&#xD;&#xA;            http://www.springframework.org/schema/context &#xD;&#xA;            http://www.springframework.org/schema/context/spring-context-3.0.xsd"">&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <context:component-scan base-package=""com.controllers"" />&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <mvc:resources mapping = ""/**"" location = ""/""/>&#xD;&#xA;      <mvc:annotation-driven/>&#xD;&#xA;    &#xD;&#xA;      <bean&#xD;&#xA;        class=""org.springframework.web.servlet.view.InternalResourceViewResolver"">&#xD;&#xA;        <property name = ""prefix"" value = ""/jsp/""/>&#xD;&#xA;        <property name = ""suffix"" value = "".jsp""/>&#xD;&#xA;      </bean>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    </beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is a copy of my web.xml&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;    <web-app  id=""WebApp_ID"" version=""3.0""&#xD;&#xA;       xmlns=""http://java.sun.com/xml/ns/javaee"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;        xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"">&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <display-name>Spring Web MVC Application</display-name>&#xD;&#xA;    &#xD;&#xA;      <servlet>&#xD;&#xA;        <servlet-name>spring3mvcdemo</servlet-name>&#xD;&#xA;        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>&#xD;&#xA;        <load-on-startup>1</load-on-startup>&#xD;&#xA;      </servlet>&#xD;&#xA;    &#xD;&#xA;      <servlet-mapping>&#xD;&#xA;        <servlet-name>spring3mvcdemo</servlet-name>&#xD;&#xA;        <url-pattern>/</url-pattern>&#xD;&#xA;      </servlet-mapping>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <!-- Help Find The Spring Config Files -->&#xD;&#xA;      <listener>&#xD;&#xA;        <listener-class>&#xD;&#xA;                      org.springframework.web.context.ContextLoaderListener&#xD;&#xA;        </listener-class>&#xD;&#xA;      </listener>&#xD;&#xA;    &#xD;&#xA;      <context-param>&#xD;&#xA;        <param-name>contextConfigLocation</param-name>&#xD;&#xA;        <param-value>&#xD;&#xA;    			/WEB-INF/spring3mvcdemo-servlet.xml,&#xD;&#xA;    			/WEB-INF/spring3mvcdemo-security.xml&#xD;&#xA;        </param-value>&#xD;&#xA;      </context-param>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <!-- Spring Security -->&#xD;&#xA;      <filter>&#xD;&#xA;        <filter-name>springSecurityFilterChain</filter-name>&#xD;&#xA;        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>&#xD;&#xA;      </filter>&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;      <filter-mapping>&#xD;&#xA;        <filter-name>springSecurityFilterChain</filter-name>&#xD;&#xA;        <url-pattern>/*</url-pattern>&#xD;&#xA;      </filter-mapping>&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;      <!-- Integrate A Legacy Screen Done With A Servlet -->&#xD;&#xA;    &#xD;&#xA;      <servlet>&#xD;&#xA;        <servlet-name>HelloWorldServlet</servlet-name>&#xD;&#xA;        <servlet-class>&#xD;&#xA;    			com.legacy.HelloWorldServlet&#xD;&#xA;        </servlet-class>&#xD;&#xA;      </servlet>&#xD;&#xA;      <servlet-mapping>&#xD;&#xA;        <servlet-name>HelloWorldServlet</servlet-name>&#xD;&#xA;        <url-pattern>/helloworldservlet</url-pattern>&#xD;&#xA;      </servlet-mapping>&#xD;&#xA;    &#xD;&#xA;    </web-app>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I am new to all of these technologies, so I don't know even where to look for a cause of the hanging.  Again, no messages in the tomcat error logs.&#xD;&#xA;&#xD;&#xA;Thanks much in advance for any ideas.";;added 70 characters in body
22757312;9916041;787832;5;eb1fc1c4-ec07-4a6c-8d8c-656ec1cc855f;2012-03-30 15:45:53.0;"I'm working on making a Spring 3.1 webapp, authenticating with LDAP.   When I hit submit on my login page, it just hangs.  No error messages of any kind.  I'm on Tomcat 6.*.&#xD;&#xA;&#xD;&#xA;I get the problem whether I use my custom login JSP or the default one that comes with Spring 3.1&#xD;&#xA;&#xD;&#xA;I was **able to connect** to my organizations LDAP server by using Softerra's LDAP browser using a real user's password and plugging in the ""principal"" ( with the username swapped out for ""uid={0}"" ):&#xD;&#xA;&#xD;&#xA;**uid={0},ou=People,o=acme.com** &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was also able to connect with a JNDI styled Java program I wrote (quoted below ).  That program dumped all of the users attributes, including the password, which seems to be encrypted on the LDAP server.  Do I need to tell Spring 3.1 this or encrypt the password that is collected on the login screen?&#xD;&#xA;&#xD;&#xA;This is all new to me and I am not getting any error messages so any ideas of where to look for the issue would be appreciated.&#xD;&#xA;&#xD;&#xA;**My *-security.xml file:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""  &#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""  &#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  &#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans  &#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  &#xD;&#xA;        http://www.springframework.org/schema/security  &#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">  &#xD;&#xA;       &#xD;&#xA;         &#xD;&#xA;      &#xD;&#xA;      <s:http auto-config=""true"">  &#xD;&#xA;        <s:intercept-url pattern=""/welcome*"" access=""ROLE_USER"" />  &#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""  &#xD;&#xA;          authentication-failure-url=""/loginfailed"" />  &#xD;&#xA;        <s:logout logout-success-url=""/logout"" />  &#xD;&#xA;      </s:http>  &#xD;&#xA;       &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>  &#xD;&#xA;      &#xD;&#xA;      <s:authentication-manager>  &#xD;&#xA;        <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=acme.com"" />  &#xD;&#xA;      </s:authentication-manager>  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;    </beans>  &#xD;&#xA;&#xD;&#xA;**Here is the JNDI style LDAP Java program that WORKS with the same credentials:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;  &#xD;&#xA;    import javax.naming.directory.*;  &#xD;&#xA;    import java.util.*;  &#xD;&#xA;    import java.sql.*;  &#xD;&#xA;      &#xD;&#xA;    public class LDAPDEMO {  &#xD;&#xA;      &#xD;&#xA;        public static void main(String args[]) {  &#xD;&#xA;      &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";  &#xD;&#xA;            String ldapurl            = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com"";  &#xD;&#xA;            String loginid            = ""John.A.Smith"";  &#xD;&#xA;            String password           = ""passowordforjohn"";  &#xD;&#xA;            DirContext ctx            = null;  &#xD;&#xA;            Hashtable env             = new Hashtable();  &#xD;&#xA;            Attributes attr           = null;  &#xD;&#xA;            Attributes resultsAttrs   = null;  &#xD;&#xA;            SearchResult result       = null;  &#xD;&#xA;            NamingEnumeration results = null;  &#xD;&#xA;            int iResults              = 0;  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);  &#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);  &#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");  &#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");  &#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");  &#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);  &#xD;&#xA;            try {  &#xD;&#xA;      &#xD;&#xA;                ctx     = new InitialDirContext(env);  &#xD;&#xA;                attr    = new BasicAttributes(true);  &#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));  &#xD;&#xA;                results = ctx.search(""ou=People"",attr);  &#xD;&#xA;      &#xD;&#xA;                while (results.hasMore()) {  &#xD;&#xA;                    result       = (SearchResult)results.next();  &#xD;&#xA;                    resultsAttrs = result.getAttributes();  &#xD;&#xA;      &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {  &#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();  &#xD;&#xA;                        System.out.println(""attribute: "" + a.getID() + "" : "" + a.get().toString());  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;                    }// end for loop  &#xD;&#xA;      &#xD;&#xA;                    iResults++;  &#xD;&#xA;                }// end while loop  &#xD;&#xA;      &#xD;&#xA;                System.out.println(""iResults == "" + iResults);  &#xD;&#xA;      &#xD;&#xA;            }// end try  &#xD;&#xA;            catch (Exception e) {  &#xD;&#xA;                e.printStackTrace();  &#xD;&#xA;            }  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        }// end function main()  &#xD;&#xA;    }// end class LDAPDEMO  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Again, I'm not getting any error messages and I am new to this so I would like some ideas of where to look for the problem.  Thanks.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;deleted 3621 characters in body
22757535;9916041;787832;5;15ae7836-a38c-4b5f-a157-83c4aed75322;2012-03-30 15:51:46.0;"I'm working on making a Spring 3.1 webapp, authenticating with LDAP.   When I hit submit on my login page, it just hangs.  I'm on Tomcat 6.*..  The ONLY error message I got was on the prefabbed login screen from Spring 3.1:&#xD;&#xA;&#xD;&#xA;    Reason: ldap-itc.sam.acme.com:636/o=acme.com&#xD;&#xA;    socket closed; &#xD;&#xA;    nested exception is javax.naming.ServiceUnavailableException: &#xD;&#xA;    ldap-itc.sam.acme.com:636/o=acme.com; socket closed&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I get the problem with hanging whether I use my custom login JSP or the default one that comes with Spring 3.1&#xD;&#xA;&#xD;&#xA;I was **able to connect** to my organizations LDAP server by using Softerra's LDAP browser using a real user's password and plugging in the ""principal"" ( with the username swapped out for ""uid={0}"" ):&#xD;&#xA;&#xD;&#xA;**uid={0},ou=People,o=acme.com** &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was also able to connect with a JNDI styled Java program I wrote (quoted below ).  That program dumped all of the users attributes, including the password, which seems to be encrypted on the LDAP server.  Do I need to tell Spring 3.1 this or encrypt the password that is collected on the login screen?&#xD;&#xA;&#xD;&#xA;This is all new to me and I am not getting any error messages so any ideas of where to look for the issue would be appreciated.&#xD;&#xA;&#xD;&#xA;**My *-security.xml file:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""  &#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""  &#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  &#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans  &#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  &#xD;&#xA;        http://www.springframework.org/schema/security  &#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">  &#xD;&#xA;       &#xD;&#xA;         &#xD;&#xA;      &#xD;&#xA;      <s:http auto-config=""true"">  &#xD;&#xA;        <s:intercept-url pattern=""/welcome*"" access=""ROLE_USER"" />  &#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""  &#xD;&#xA;          authentication-failure-url=""/loginfailed"" />  &#xD;&#xA;        <s:logout logout-success-url=""/logout"" />  &#xD;&#xA;      </s:http>  &#xD;&#xA;       &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>  &#xD;&#xA;      &#xD;&#xA;      <s:authentication-manager>  &#xD;&#xA;        <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=acme.com"" />  &#xD;&#xA;      </s:authentication-manager>  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;    </beans>  &#xD;&#xA;&#xD;&#xA;**Here is the JNDI style LDAP Java program that WORKS with the same credentials:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;  &#xD;&#xA;    import javax.naming.directory.*;  &#xD;&#xA;    import java.util.*;  &#xD;&#xA;    import java.sql.*;  &#xD;&#xA;      &#xD;&#xA;    public class LDAPDEMO {  &#xD;&#xA;      &#xD;&#xA;        public static void main(String args[]) {  &#xD;&#xA;      &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";  &#xD;&#xA;            String ldapurl            = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com"";  &#xD;&#xA;            String loginid            = ""John.A.Smith"";  &#xD;&#xA;            String password           = ""passowordforjohn"";  &#xD;&#xA;            DirContext ctx            = null;  &#xD;&#xA;            Hashtable env             = new Hashtable();  &#xD;&#xA;            Attributes attr           = null;  &#xD;&#xA;            Attributes resultsAttrs   = null;  &#xD;&#xA;            SearchResult result       = null;  &#xD;&#xA;            NamingEnumeration results = null;  &#xD;&#xA;            int iResults              = 0;  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);  &#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);  &#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");  &#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");  &#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");  &#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);  &#xD;&#xA;            try {  &#xD;&#xA;      &#xD;&#xA;                ctx     = new InitialDirContext(env);  &#xD;&#xA;                attr    = new BasicAttributes(true);  &#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));  &#xD;&#xA;                results = ctx.search(""ou=People"",attr);  &#xD;&#xA;      &#xD;&#xA;                while (results.hasMore()) {  &#xD;&#xA;                    result       = (SearchResult)results.next();  &#xD;&#xA;                    resultsAttrs = result.getAttributes();  &#xD;&#xA;      &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {  &#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();  &#xD;&#xA;                        System.out.println(""attribute: "" + a.getID() + "" : "" + a.get().toString());  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;                    }// end for loop  &#xD;&#xA;      &#xD;&#xA;                    iResults++;  &#xD;&#xA;                }// end while loop  &#xD;&#xA;      &#xD;&#xA;                System.out.println(""iResults == "" + iResults);  &#xD;&#xA;      &#xD;&#xA;            }// end try  &#xD;&#xA;            catch (Exception e) {  &#xD;&#xA;                e.printStackTrace();  &#xD;&#xA;            }  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        }// end function main()  &#xD;&#xA;    }// end class LDAPDEMO  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Again, I'm not getting any error messages save that one and I am new to this so I would like some ideas of where to look for the problem.  Thanks.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;deleted 3621 characters in body
22763691;9916041;787832;5;1a8102d7-5fa5-4cc9-bed6-72422898e7ba;2012-03-30 18:55:22.0;"Spring 3.1&#xD;&#xA;Tomcat 6.*&#xD;&#xA;&#xD;&#xA;I'm working on making a Spring 3.1 webapp, authenticating with LDAP.   When I hit submit on my login page, it just hangs and after a very, very long time returns with this error message:&#xD;&#xA;&#xD;&#xA;    Reason: ldap-itc.sam.acme.com:636/o=acme.com&#xD;&#xA;    socket closed; &#xD;&#xA;    nested exception is javax.naming.ServiceUnavailableException: &#xD;&#xA;    ldap-itc.sam.acme.com:636/o=acme.com; socket closed&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was **able to connect** to my organizations LDAP server by using Softerra's LDAP browser using a real user's password and plugging in the ""principal"" ( with the username swapped out for ""uid={0}"" ), which I use in my *-security.xml file:&#xD;&#xA;&#xD;&#xA;    uid={0},ou=People,o=acme.com&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was also able to connect with a JNDI styled Java program I wrote (quoted below ).  That program dumped all of the users attributes, including the password, which seems to be encrypted on the LDAP server.  Do I need to tell Spring 3.1 this or encrypt the password that is collected on the login screen?&#xD;&#xA;&#xD;&#xA;I noticed that Java program I wrote/copied/adapted specified ""ssl"" in the context.  When I commented that out, the client program also hanged for a long time and returned with the same error message as Spring 3.1.   I uncommented that out, changed ""ldap://"" to ""ldap[B]s[/B]://"" in the client program and that worked fine.&#xD;&#xA;&#xD;&#xA;I tried the same thing in my *-security.xml.   I changed ""ldap://"" to ""ldap[B]s[/B]://"" in the ldap url.   This time the webapp did not hang, but returned very quickly with a message of&#xD;&#xA;&#xD;&#xA;    ""Bad Credentials""&#xD;&#xA;&#xD;&#xA;I tested my username and password out.   They are legitimate.&#xD;&#xA;&#xD;&#xA;I also tried typing in the encrypted version of my password, but that didn't make a difference.&#xD;&#xA;&#xD;&#xA;I'm guessing something with SSL and/or password encryption is now my problem.&#xD;&#xA;&#xD;&#xA;Any ideas of things I could check out?&#xD;&#xA;&#xD;&#xA;My *-security.xml and the java LDAP demo I wrote are quoted below&#xD;&#xA;&#xD;&#xA;Thanks.&#xD;&#xA;&#xD;&#xA;**My *-security.xml file:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""  &#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""  &#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  &#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans  &#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  &#xD;&#xA;        http://www.springframework.org/schema/security  &#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">  &#xD;&#xA;       &#xD;&#xA;         &#xD;&#xA;      &#xD;&#xA;      <s:http auto-config=""true"">  &#xD;&#xA;        <s:intercept-url pattern=""/welcome*"" access=""ROLE_USER"" />  &#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""  &#xD;&#xA;          authentication-failure-url=""/loginfailed"" />  &#xD;&#xA;        <s:logout logout-success-url=""/logout"" />  &#xD;&#xA;      </s:http>  &#xD;&#xA;       &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>  &#xD;&#xA;      &#xD;&#xA;      <s:authentication-manager>  &#xD;&#xA;        <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=acme.com"" />  &#xD;&#xA;      </s:authentication-manager>  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;    </beans>  &#xD;&#xA;&#xD;&#xA;**Here is the JNDI style LDAP Java program that WORKS with the same credentials:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;  &#xD;&#xA;    import javax.naming.directory.*;  &#xD;&#xA;    import java.util.*;  &#xD;&#xA;    import java.sql.*;  &#xD;&#xA;      &#xD;&#xA;    public class LDAPDEMO {  &#xD;&#xA;      &#xD;&#xA;        public static void main(String args[]) {  &#xD;&#xA;      &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";  &#xD;&#xA;            String ldapurl            = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com"";  &#xD;&#xA;            String loginid            = ""John.A.Smith"";  &#xD;&#xA;            String password           = ""passowordforjohn"";  &#xD;&#xA;            DirContext ctx            = null;  &#xD;&#xA;            Hashtable env             = new Hashtable();  &#xD;&#xA;            Attributes attr           = null;  &#xD;&#xA;            Attributes resultsAttrs   = null;  &#xD;&#xA;            SearchResult result       = null;  &#xD;&#xA;            NamingEnumeration results = null;  &#xD;&#xA;            int iResults              = 0;  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);  &#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);  &#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");  &#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");  &#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");  &#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);  &#xD;&#xA;            try {  &#xD;&#xA;      &#xD;&#xA;                ctx     = new InitialDirContext(env);  &#xD;&#xA;                attr    = new BasicAttributes(true);  &#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));  &#xD;&#xA;                results = ctx.search(""ou=People"",attr);  &#xD;&#xA;      &#xD;&#xA;                while (results.hasMore()) {  &#xD;&#xA;                    result       = (SearchResult)results.next();  &#xD;&#xA;                    resultsAttrs = result.getAttributes();  &#xD;&#xA;      &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {  &#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();  &#xD;&#xA;                        System.out.println(""attribute: "" + a.getID() + "" : "" + a.get().toString());  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;                    }// end for loop  &#xD;&#xA;      &#xD;&#xA;                    iResults++;  &#xD;&#xA;                }// end while loop  &#xD;&#xA;      &#xD;&#xA;                System.out.println(""iResults == "" + iResults);  &#xD;&#xA;      &#xD;&#xA;            }// end try  &#xD;&#xA;            catch (Exception e) {  &#xD;&#xA;                e.printStackTrace();  &#xD;&#xA;            }  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        }// end function main()  &#xD;&#xA;    }// end class LDAPDEMO  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Again, I'm not getting any error messages save that one and I am new to this so I would like some ideas of where to look for the problem.  Thanks.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 689 characters in body
22766371;9916041;787832;5;9ede2299-cdf4-46df-8744-485e27f1e502;2012-03-30 20:28:17.0;"Spring 3.1&#xD;&#xA;Tomcat 6.*&#xD;&#xA;&#xD;&#xA;I'm working on making a Spring 3.1 webapp, authenticating with LDAP.   When I hit submit on my login page, it just hangs and after a very, very long time returns with this error message:&#xD;&#xA;&#xD;&#xA;    Reason: ldap-itc.sam.acme.com:636/o=acme.com&#xD;&#xA;    socket closed; &#xD;&#xA;    nested exception is javax.naming.ServiceUnavailableException: &#xD;&#xA;    ldap-itc.sam.acme.com:636/o=acme.com; socket closed&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was **able to connect** to my organizations LDAP server by using Softerra's LDAP browser using a real user's password and plugging in the ""principal"" ( with the username swapped out for ""uid={0}"" ), which I use in my *-security.xml file:&#xD;&#xA;&#xD;&#xA;    uid={0},ou=People,o=acme.com&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was also able to connect with a JNDI styled Java program I wrote (quoted below ).  That program dumped all of the users attributes, including the password, which seems to be encrypted on the LDAP server.  Do I need to tell Spring 3.1 this or encrypt the password that is collected on the login screen?&#xD;&#xA;&#xD;&#xA;I noticed that Java program I wrote/copied/adapted specified ""ssl"" in the context.  When I commented that out, the client program also hanged for a long time and returned with the same error message as Spring 3.1.   I uncommented that out, changed ""ldap://"" to ""ldap[B]s[/B]://"" in the client program and that worked fine.&#xD;&#xA;&#xD;&#xA;I tried the same thing in my *-security.xml.   I changed ""ldap://"" to ""ldap[B]s[/B]://"" in the ldap url.   This time the webapp did not hang, but returned very quickly with a message of&#xD;&#xA;&#xD;&#xA;    ""Bad Credentials""&#xD;&#xA;&#xD;&#xA;I tested my username and password out.   They are legitimate.&#xD;&#xA;&#xD;&#xA;I also tried typing in the encrypted version of my password, but that didn't make a difference.&#xD;&#xA;&#xD;&#xA;I'm guessing something with SSL and/or password encryption is now my problem.&#xD;&#xA;&#xD;&#xA;Any ideas of things I could check out?&#xD;&#xA;&#xD;&#xA;My *-security.xml and the java LDAP demo I wrote are quoted below&#xD;&#xA;&#xD;&#xA;Thanks.&#xD;&#xA;&#xD;&#xA;**My *-security.xml file:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""  &#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""  &#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  &#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans  &#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  &#xD;&#xA;        http://www.springframework.org/schema/security  &#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">  &#xD;&#xA;       &#xD;&#xA;         &#xD;&#xA;      &#xD;&#xA;      <s:http auto-config=""true"">  &#xD;&#xA;        <s:intercept-url pattern=""/welcome*"" access=""ROLE_USER"" />  &#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""  &#xD;&#xA;          authentication-failure-url=""/loginfailed"" />  &#xD;&#xA;        <s:logout logout-success-url=""/logout"" />  &#xD;&#xA;      </s:http>  &#xD;&#xA;       &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>  &#xD;&#xA;      &#xD;&#xA;      <s:authentication-manager>&#xD;&#xA;        <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=noaa.gov"" >&#xD;&#xA;          <s:password-compare hash=""md5"">&#xD;&#xA;            <s:password-encoder hash=""md5""/>&#xD;&#xA;          </s:password-compare>&#xD;&#xA;        </s:ldap-authentication-provider>&#xD;&#xA;      </s:authentication-manager>&#xD;&#xA;      &#xD;&#xA;    </beans>  &#xD;&#xA;&#xD;&#xA;**Here is the JNDI style LDAP Java program that WORKS with the same credentials:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;  &#xD;&#xA;    import javax.naming.directory.*;  &#xD;&#xA;    import java.util.*;  &#xD;&#xA;    import java.sql.*;  &#xD;&#xA;      &#xD;&#xA;    public class LDAPDEMO {  &#xD;&#xA;      &#xD;&#xA;        public static void main(String args[]) {  &#xD;&#xA;      &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";  &#xD;&#xA;            String ldapurl            = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com"";  &#xD;&#xA;            String loginid            = ""John.A.Smith"";  &#xD;&#xA;            String password           = ""passowordforjohn"";  &#xD;&#xA;            DirContext ctx            = null;  &#xD;&#xA;            Hashtable env             = new Hashtable();  &#xD;&#xA;            Attributes attr           = null;  &#xD;&#xA;            Attributes resultsAttrs   = null;  &#xD;&#xA;            SearchResult result       = null;  &#xD;&#xA;            NamingEnumeration results = null;  &#xD;&#xA;            int iResults              = 0;  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);  &#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);  &#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");  &#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");  &#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");  &#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);  &#xD;&#xA;            try {  &#xD;&#xA;      &#xD;&#xA;                ctx     = new InitialDirContext(env);  &#xD;&#xA;                attr    = new BasicAttributes(true);  &#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));  &#xD;&#xA;                results = ctx.search(""ou=People"",attr);  &#xD;&#xA;      &#xD;&#xA;                while (results.hasMore()) {  &#xD;&#xA;                    result       = (SearchResult)results.next();  &#xD;&#xA;                    resultsAttrs = result.getAttributes();  &#xD;&#xA;      &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {  &#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();  &#xD;&#xA;                        System.out.println(""attribute: "" + a.getID() + "" : "" + a.get().toString());  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;                    }// end for loop  &#xD;&#xA;      &#xD;&#xA;                    iResults++;  &#xD;&#xA;                }// end while loop  &#xD;&#xA;      &#xD;&#xA;                System.out.println(""iResults == "" + iResults);  &#xD;&#xA;      &#xD;&#xA;            }// end try  &#xD;&#xA;            catch (Exception e) {  &#xD;&#xA;                e.printStackTrace();  &#xD;&#xA;            }  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        }// end function main()  &#xD;&#xA;    }// end class LDAPDEMO  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Again, I'm not getting any error messages save that one and I am new to this so I would like some ideas of where to look for the problem.  Thanks.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 150 characters in body
22847068;9916041;787832;5;cc1f28be-16b1-4f9b-9085-6d7558e279e8;2012-04-02 18:28:35.0;"Spring 3.1&#xD;&#xA;Tomcat 6.*&#xD;&#xA;&#xD;&#xA;I'm working on making a Spring 3.1 webapp, authenticating with LDAP.   When I hit submit on my login page, it just hangs and after a very, very long time returns with this error message:&#xD;&#xA;&#xD;&#xA;    Reason: ldap-itc.sam.acme.com:636/o=acme.com&#xD;&#xA;    socket closed; &#xD;&#xA;    nested exception is javax.naming.ServiceUnavailableException: &#xD;&#xA;    ldap-itc.sam.acme.com:636/o=acme.com; socket closed&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was **able to connect** to my organizations LDAP server by using Softerra's LDAP browser using a real user's password and plugging in the ""principal"" ( with the username swapped out for ""uid={0}"" ), which I use in my *-security.xml file:&#xD;&#xA;&#xD;&#xA;    uid={0},ou=People,o=acme.com&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was also able to connect with a JNDI styled Java program I wrote (quoted below ).  That program dumped all of the users attributes, including the password, which seems to be encrypted on the LDAP server.  Do I need to tell Spring 3.1 this or encrypt the password that is collected on the login screen?&#xD;&#xA;&#xD;&#xA;I noticed that Java program I wrote/copied/adapted specified ""ssl"" in the context.  When I commented that out, the client program also hanged for a long time and returned with the same error message as Spring 3.1.   I uncommented that out, changed ""ldap://"" to ""ldap[B]s[/B]://"" in the client program and that worked fine.&#xD;&#xA;&#xD;&#xA;I tried the same thing in my *-security.xml.   I changed ""ldap://"" to ""ldap[B]s[/B]://"" in the ldap url.   This time the webapp did not hang, but returned very quickly with a message of&#xD;&#xA;&#xD;&#xA;    ""Bad Credentials""&#xD;&#xA;&#xD;&#xA;I tested my username and password out.   They are legitimate.&#xD;&#xA;&#xD;&#xA;I also tried typing in the encrypted version of my password, but that didn't make a difference.&#xD;&#xA;&#xD;&#xA;I'm guessing something with SSL and/or password encryption is now my problem.&#xD;&#xA;&#xD;&#xA;Any ideas of things I could check out?&#xD;&#xA;&#xD;&#xA;My *-security.xml and the java LDAP demo I wrote are quoted below&#xD;&#xA;&#xD;&#xA;Thanks.&#xD;&#xA;&#xD;&#xA;**My *-security.xml file:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""  &#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""  &#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  &#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans  &#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  &#xD;&#xA;        http://www.springframework.org/schema/security  &#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">  &#xD;&#xA;       &#xD;&#xA;         &#xD;&#xA;      &#xD;&#xA;      <s:http auto-config=""true"">  &#xD;&#xA;        **<s:intercept-url pattern=""/welcome*"" access=""isAuthenticated()"" />** &#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""  &#xD;&#xA;          authentication-failure-url=""/loginfailed"" />  &#xD;&#xA;        <s:logout logout-success-url=""/logout"" />  &#xD;&#xA;      </s:http>  &#xD;&#xA;       &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>  &#xD;&#xA;      &#xD;&#xA;      <s:authentication-manager>&#xD;&#xA;        <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=noaa.gov"" >&#xD;&#xA;          <s:password-compare hash=""md5"">&#xD;&#xA;            <s:password-encoder hash=""md5""/>&#xD;&#xA;          </s:password-compare>&#xD;&#xA;        </s:ldap-authentication-provider>&#xD;&#xA;      </s:authentication-manager>&#xD;&#xA;      &#xD;&#xA;    </beans>  &#xD;&#xA;&#xD;&#xA;**Here is the JNDI style LDAP Java program that WORKS with the same credentials:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;  &#xD;&#xA;    import javax.naming.directory.*;  &#xD;&#xA;    import java.util.*;  &#xD;&#xA;    import java.sql.*;  &#xD;&#xA;      &#xD;&#xA;    public class LDAPDEMO {  &#xD;&#xA;      &#xD;&#xA;        public static void main(String args[]) {  &#xD;&#xA;      &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";  &#xD;&#xA;            String ldapurl            = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com"";  &#xD;&#xA;            String loginid            = ""John.A.Smith"";  &#xD;&#xA;            String password           = ""passowordforjohn"";  &#xD;&#xA;            DirContext ctx            = null;  &#xD;&#xA;            Hashtable env             = new Hashtable();  &#xD;&#xA;            Attributes attr           = null;  &#xD;&#xA;            Attributes resultsAttrs   = null;  &#xD;&#xA;            SearchResult result       = null;  &#xD;&#xA;            NamingEnumeration results = null;  &#xD;&#xA;            int iResults              = 0;  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);  &#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);  &#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");  &#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");  &#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");  &#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);  &#xD;&#xA;            try {  &#xD;&#xA;      &#xD;&#xA;                ctx     = new InitialDirContext(env);  &#xD;&#xA;                attr    = new BasicAttributes(true);  &#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));  &#xD;&#xA;                results = ctx.search(""ou=People"",attr);  &#xD;&#xA;      &#xD;&#xA;                while (results.hasMore()) {  &#xD;&#xA;                    result       = (SearchResult)results.next();  &#xD;&#xA;                    resultsAttrs = result.getAttributes();  &#xD;&#xA;      &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {  &#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();  &#xD;&#xA;                        System.out.println(""attribute: "" + a.getID() + "" : "" + a.get().toString());  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;                    }// end for loop  &#xD;&#xA;      &#xD;&#xA;                    iResults++;  &#xD;&#xA;                }// end while loop  &#xD;&#xA;      &#xD;&#xA;                System.out.println(""iResults == "" + iResults);  &#xD;&#xA;      &#xD;&#xA;            }// end try  &#xD;&#xA;            catch (Exception e) {  &#xD;&#xA;                e.printStackTrace();  &#xD;&#xA;            }  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        }// end function main()  &#xD;&#xA;    }// end class LDAPDEMO  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;**Update:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;I updated my *-security.xml as instructed in the first answer.&#xD;&#xA;&#xD;&#xA;**I deployed this log4j.properties file to get a lot more debugging (all?):**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    # Root Logger Setup:  Includes the level of reporting and appenders -> where&#xD;&#xA;    #                     log messages get sent                                              &#xD;&#xA;    log4j.rootLogger                            = DEBUG,ca,fa&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    #ca - Console Appender - Send messages to the console&#xD;&#xA;    log4j.appender.ca                          = org.apache.log4j.ConsoleAppender&#xD;&#xA;    log4j.appender.ca.layout                   = org.apache.log4j.PatternLayout&#xD;&#xA;    log4j.appender.ca.layout.ConversionPattern = [%-5p] - %d{yyyy-MMM-dd HH:mm:ss} -  %c{1}:%M(): %m%n&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    #fa - File Appender - Send messages to a log file&#xD;&#xA;    log4j.appender.fa                            = org.apache.log4j.RollingFileAppender&#xD;&#xA;    log4j.appender.fa.File                       = ${catalina.home}/logs/spring3mvcdemo.log&#xD;&#xA;    log4j.appender.fa.MaxFileSize                = 1000KB&#xD;&#xA;    log4j.appender.fa.MaxBackupIndex             = 10&#xD;&#xA;    log4j.appender.fa.Threshold                  = DEBUG&#xD;&#xA;    log4j.appender.fa.layout                     = org.apache.log4j.PatternLayout&#xD;&#xA;    log4j.appender.fa.layout.ConversionPattern   = [%-5p] - %d{yyyy-MMM-dd HH:mm:ss} -  %c{2}:%M(): %m%n &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;This is an excerpt of the DEBUG logging that occured once I submitted my username and password:&#xD;&#xA;&#xD;&#xA;    [DEBUG]   context.HttpSessionSecurityContextRepository:saveContext(): SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.&#xD;&#xA;     [DEBUG]   context.SecurityContextPersistenceFilter:doFilter(): SecurityContextHolder now cleared, as request processing completed&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /j_spring_security_check at position 1 of 10 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter'&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:readSecurityContextFromSession(): HttpSession returned null object for SPRING_SECURITY_CONTEXT&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:loadContext(): No SecurityContext was available from the HttpSession: org.apache.catalina.session.StandardSessionFacade@1555185. A new one will be created.&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /j_spring_security_check at position 2 of 10 in additional filter chain; firing Filter: 'LogoutFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /j_spring_security_check at position 3 of 10 in additional filter chain; firing Filter: 'UsernamePasswordAuthenticationFilter'&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;     **[DEBUG]   authentication.UsernamePasswordAuthenticationFilter:doFilter(): Request is to process authentication&#xD;&#xA;     [DEBUG]   authentication.ProviderManager:authenticate(): Authentication attempt using org.springframework.security.ldap.authentication.LdapAuthenticationProvider&#xD;&#xA;     [DEBUG]   authentication.LdapAuthenticationProvider:authenticate(): Processing authentication request for user: Robert.A.Smith&#xD;&#xA;     [DEBUG]   support.AbstractContextSource:createContext(): Got Ldap context on server 'ldaps://ldap-itc.sam.acme.com:636/o=acme.com'&#xD;&#xA;     [DEBUG]   authentication.UsernamePasswordAuthenticationFilter:unsuccessfulAuthentication(): Authentication request failed: org.springframework.security.authentication.BadCredentialsException: Bad credentials**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;     [DEBUG]   authentication.UsernamePasswordAuthenticationFilter:unsuccessfulAuthentication(): Updated SecurityContextHolder to contain null Authentication&#xD;&#xA;     [DEBUG]   authentication.UsernamePasswordAuthenticationFilter:unsuccessfulAuthentication(): Delegating to authentication failure handlerorg.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler@b87d31&#xD;&#xA;     [DEBUG]   authentication.SimpleUrlAuthenticationFailureHandler:onAuthenticationFailure(): Redirecting to /loginfailed&#xD;&#xA;     [DEBUG]   web.DefaultRedirectStrategy:sendRedirect(): Redirecting to '/spring3mvcdemo/loginfailed'&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:saveContext(): SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.&#xD;&#xA;     [DEBUG]   context.SecurityContextPersistenceFilter:doFilter(): SecurityContextHolder now cleared, as request processing completed&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 1 of 10 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter'&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:readSecurityContextFromSession(): HttpSession returned null object for SPRING_SECURITY_CONTEXT&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:loadContext(): No SecurityContext was available from the HttpSession: org.apache.catalina.session.StandardSessionFacade@1555185. A new one will be created.&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 2 of 10 in additional filter chain; firing Filter: 'LogoutFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 3 of 10 in additional filter chain; firing Filter: 'UsernamePasswordAuthenticationFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 4 of 10 in additional filter chain; firing Filter: 'BasicAuthenticationFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 5 of 10 in additional filter chain; firing Filter: 'RequestCacheAwareFilter'&#xD;&#xA;     [DEBUG]   savedrequest.DefaultSavedRequest:propertyEquals(): pathInfo: both null (property equals)&#xD;&#xA;     [DEBUG]   savedrequest.DefaultSavedRequest:propertyEquals(): queryString: both null (property equals)&#xD;&#xA;     [DEBUG]   savedrequest.DefaultSavedRequest:propertyEquals(): requestURI: arg1=/spring3mvcdemo/welcome; arg2=/spring3mvcdemo/loginfailed (property not equals)&#xD;&#xA;     [DEBUG]   savedrequest.HttpSessionRequestCache:getMatchingRequest(): saved request doesn't match&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 6 of 10 in additional filter chain; firing Filter: 'SecurityContextHolderAwareRequestFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 7 of 10 in additional filter chain; firing Filter: 'AnonymousAuthenticationFilter'&#xD;&#xA;     [DEBUG]   authentication.AnonymousAuthenticationFilter:doFilter(): Populated SecurityContextHolder with anonymous token: 'org.springframework.security.authentication.AnonymousAuthenticationToken@6fa90ed4: Principal: anonymousUser; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@fffc7f0c: RemoteIpAddress: 127.0.0.1; SessionId: 8CB1345178014A5558EC0E1A893679AF; Granted Authorities: ROLE_ANONYMOUS'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 8 of 10 in additional filter chain; firing Filter: 'SessionManagementFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 9 of 10 in additional filter chain; firing Filter: 'ExceptionTranslationFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 10 of 10 in additional filter chain; firing Filter: 'FilterSecurityInterceptor'&#xD;&#xA;     [DEBUG]   util.AntPathRequestMatcher:matches(): Checking match of request : '/loginfailed'; against '/welcome*'&#xD;&#xA;     [DEBUG]   intercept.FilterSecurityInterceptor:beforeInvocation(): Public object - authentication not attempted&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed reached end of additional filter chain; proceeding with original chain&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:doService(): DispatcherServlet with name 'spring3mvcdemo' processing GET request for [/spring3mvcdemo/loginfailed]&#xD;&#xA;     [DEBUG]   annotation.RequestMappingHandlerMapping:getHandlerInternal(): Looking up handler method for path /loginfailed&#xD;&#xA;     [DEBUG]   annotation.RequestMappingHandlerMapping:getHandlerInternal(): Returning handler method [public java.lang.String com.controllers.LoginController.loginerror(org.springframework.ui.ModelMap)]&#xD;&#xA;     [DEBUG]   support.DefaultListableBeanFactory:doGetBean(): Returning cached instance of singleton bean 'loginController'&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:doDispatch(): Last-Modified value for [/spring3mvcdemo/loginfailed] is: -1&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:render(): Rendering view [org.springframework.web.servlet.view.JstlView: name 'login'; URL [/jsp/login.jsp]] in DispatcherServlet with name 'spring3mvcdemo'&#xD;&#xA;     [DEBUG]   view.JstlView:exposeModelAsRequestAttributes(): Added model object 'error' of type [java.lang.String] to request in view with name 'login'&#xD;&#xA;     [DEBUG]   view.JstlView:renderMergedOutputModel(): Forwarding to resource [/jsp/login.jsp] in InternalResourceView 'login'&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:processRequest(): Successfully completed request&#xD;&#xA;     [DEBUG]   access.ExceptionTranslationFilter:doFilter(): Chain processed normally&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:saveContext(): SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.&#xD;&#xA;     [DEBUG]   context.SecurityContextPersistenceFilter:doFilter(): SecurityContextHolder now cleared, as request processing completed&#xD;&#xA;     [INFO ]   support.XmlWebApplicationContext:doClose(): Closing WebApplicationContext for namespace 'spring3mvcdemo-servlet': startup date [Mon Apr 02 14:03:53 EDT 2012]; parent: Root WebApplicationContext&#xD;&#xA;     [DEBUG]   support&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I looked up ""BadCredentialsException"" and got this:&#xD;&#xA;&#xD;&#xA;    Thrown if an authentication request is rejected because the credentials are invalid. For this exception to be thrown, it means the account is neither locked nor disabled. &#xD;&#xA;&#xD;&#xA;Which doesn't tell me anything more than the simple ""Bad Credentials"" msg I got on my login page.&#xD;&#xA;&#xD;&#xA;Can I get more information about the problem?  How?&#xD;&#xA;&#xD;&#xA;Will I need to put my own debugging statements in and recompile the Spring sourcecode?&#xD;&#xA;Any easy guides for that or using a debugger to step through the Spring security?&#xD;&#xA;&#xD;&#xA;Anything else I can try short of that?&#xD;&#xA;&#xD;&#xA;Thanks in advance for any clues&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 10080 characters in body
22847974;9916041;787832;5;2f120f63-dd49-4a52-950a-e3ee1aba23e0;2012-04-02 18:53:36.0;"Spring 3.1&#xD;&#xA;Tomcat 6.*&#xD;&#xA;&#xD;&#xA;I'm working on making a Spring 3.1 webapp, authenticating with LDAP.   When I hit submit on my login page, it just hangs and after a very, very long time returns with this error message:&#xD;&#xA;&#xD;&#xA;    Reason: ldap-itc.sam.acme.com:636/o=acme.com&#xD;&#xA;    socket closed; &#xD;&#xA;    nested exception is javax.naming.ServiceUnavailableException: &#xD;&#xA;    ldap-itc.sam.acme.com:636/o=acme.com; socket closed&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was **able to connect** to my organizations LDAP server by using Softerra's LDAP browser using a real user's password and plugging in the ""principal"" ( with the username swapped out for ""uid={0}"" ), which I use in my *-security.xml file:&#xD;&#xA;&#xD;&#xA;    uid={0},ou=People,o=acme.com&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was also able to connect with a JNDI styled Java program I wrote (quoted below ).  That program dumped all of the users attributes, including the password, which seems to be encrypted on the LDAP server.  Do I need to tell Spring 3.1 this or encrypt the password that is collected on the login screen?&#xD;&#xA;&#xD;&#xA;I noticed that Java program I wrote/copied/adapted specified ""ssl"" in the context.  When I commented that out, the client program also hanged for a long time and returned with the same error message as Spring 3.1.   I uncommented that out, changed ""ldap://"" to ""ldap[B]s[/B]://"" in the client program and that worked fine.&#xD;&#xA;&#xD;&#xA;I tried the same thing in my *-security.xml.   I changed ""ldap://"" to ""ldap[B]s[/B]://"" in the ldap url.   This time the webapp did not hang, but returned very quickly with a message of&#xD;&#xA;&#xD;&#xA;    ""Bad Credentials""&#xD;&#xA;&#xD;&#xA;I tested my username and password out.   They are legitimate.&#xD;&#xA;&#xD;&#xA;I also tried typing in the encrypted version of my password, but that didn't make a difference.&#xD;&#xA;&#xD;&#xA;I'm guessing something with SSL and/or password encryption is now my problem.&#xD;&#xA;&#xD;&#xA;Any ideas of things I could check out?&#xD;&#xA;&#xD;&#xA;My *-security.xml and the java LDAP demo I wrote are quoted below&#xD;&#xA;&#xD;&#xA;Thanks.&#xD;&#xA;&#xD;&#xA;**My *-security.xml file:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""  &#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""  &#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  &#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans  &#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  &#xD;&#xA;        http://www.springframework.org/schema/security  &#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">  &#xD;&#xA;       &#xD;&#xA;         &#xD;&#xA;      &#xD;&#xA;      <s:http auto-config=""true"">  &#xD;&#xA;        **<s:intercept-url pattern=""/welcome*"" access=""isAuthenticated()"" />** &#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""  &#xD;&#xA;          authentication-failure-url=""/loginfailed"" />  &#xD;&#xA;        <s:logout logout-success-url=""/logout"" />  &#xD;&#xA;      </s:http>  &#xD;&#xA;       &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>  &#xD;&#xA;      &#xD;&#xA;      <s:authentication-manager>&#xD;&#xA;        <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=noaa.gov"" >&#xD;&#xA;          <s:password-compare hash=""md5"">&#xD;&#xA;            <s:password-encoder hash=""md5""/>&#xD;&#xA;          </s:password-compare>&#xD;&#xA;        </s:ldap-authentication-provider>&#xD;&#xA;      </s:authentication-manager>&#xD;&#xA;      &#xD;&#xA;    </beans>  &#xD;&#xA;&#xD;&#xA;**Here is the JNDI style LDAP Java program that WORKS with the same credentials:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;  &#xD;&#xA;    import javax.naming.directory.*;  &#xD;&#xA;    import java.util.*;  &#xD;&#xA;    import java.sql.*;  &#xD;&#xA;      &#xD;&#xA;    public class LDAPDEMO {  &#xD;&#xA;      &#xD;&#xA;        public static void main(String args[]) {  &#xD;&#xA;      &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";  &#xD;&#xA;            String ldapurl            = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com"";  &#xD;&#xA;            String loginid            = ""John.A.Smith"";  &#xD;&#xA;            String password           = ""passowordforjohn"";  &#xD;&#xA;            DirContext ctx            = null;  &#xD;&#xA;            Hashtable env             = new Hashtable();  &#xD;&#xA;            Attributes attr           = null;  &#xD;&#xA;            Attributes resultsAttrs   = null;  &#xD;&#xA;            SearchResult result       = null;  &#xD;&#xA;            NamingEnumeration results = null;  &#xD;&#xA;            int iResults              = 0;  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);  &#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);  &#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");  &#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");  &#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");  &#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);  &#xD;&#xA;            try {  &#xD;&#xA;      &#xD;&#xA;                ctx     = new InitialDirContext(env);  &#xD;&#xA;                attr    = new BasicAttributes(true);  &#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));  &#xD;&#xA;                results = ctx.search(""ou=People"",attr);  &#xD;&#xA;      &#xD;&#xA;                while (results.hasMore()) {  &#xD;&#xA;                    result       = (SearchResult)results.next();  &#xD;&#xA;                    resultsAttrs = result.getAttributes();  &#xD;&#xA;      &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {  &#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();  &#xD;&#xA;                        System.out.println(""attribute: "" + a.getID() + "" : "" + a.get().toString());  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;                    }// end for loop  &#xD;&#xA;      &#xD;&#xA;                    iResults++;  &#xD;&#xA;                }// end while loop  &#xD;&#xA;      &#xD;&#xA;                System.out.println(""iResults == "" + iResults);  &#xD;&#xA;      &#xD;&#xA;            }// end try  &#xD;&#xA;            catch (Exception e) {  &#xD;&#xA;                e.printStackTrace();  &#xD;&#xA;            }  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        }// end function main()  &#xD;&#xA;    }// end class LDAPDEMO  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;**Update:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;I updated my *-security.xml as instructed in the first answer.&#xD;&#xA;&#xD;&#xA;**I deployed this log4j.properties file to get a lot more debugging (all?):**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    # Root Logger Setup:  Includes the level of reporting and appenders -> where&#xD;&#xA;    #                     log messages get sent                                              &#xD;&#xA;    log4j.rootLogger                            = DEBUG,ca,fa&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    #ca - Console Appender - Send messages to the console&#xD;&#xA;    log4j.appender.ca                          = org.apache.log4j.ConsoleAppender&#xD;&#xA;    log4j.appender.ca.layout                   = org.apache.log4j.PatternLayout&#xD;&#xA;    log4j.appender.ca.layout.ConversionPattern = [%-5p] - %d{yyyy-MMM-dd HH:mm:ss} -  %c{1}:%M(): %m%n&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    #fa - File Appender - Send messages to a log file&#xD;&#xA;    log4j.appender.fa                            = org.apache.log4j.RollingFileAppender&#xD;&#xA;    log4j.appender.fa.File                       = ${catalina.home}/logs/spring3mvcdemo.log&#xD;&#xA;    log4j.appender.fa.MaxFileSize                = 1000KB&#xD;&#xA;    log4j.appender.fa.MaxBackupIndex             = 10&#xD;&#xA;    log4j.appender.fa.Threshold                  = DEBUG&#xD;&#xA;    log4j.appender.fa.layout                     = org.apache.log4j.PatternLayout&#xD;&#xA;    log4j.appender.fa.layout.ConversionPattern   = [%-5p] - %d{yyyy-MMM-dd HH:mm:ss} -  %c{2}:%M(): %m%n &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;This is an excerpt of the DEBUG logging that occured once I submitted my username and password:&#xD;&#xA;&#xD;&#xA;    [DEBUG]   context.HttpSessionSecurityContextRepository:saveContext(): SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.&#xD;&#xA;     [DEBUG]   context.SecurityContextPersistenceFilter:doFilter(): SecurityContextHolder now cleared, as request processing completed&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /j_spring_security_check at position 1 of 10 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter'&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:readSecurityContextFromSession(): HttpSession returned null object for SPRING_SECURITY_CONTEXT&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:loadContext(): No SecurityContext was available from the HttpSession: org.apache.catalina.session.StandardSessionFacade@1555185. A new one will be created.&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /j_spring_security_check at position 2 of 10 in additional filter chain; firing Filter: 'LogoutFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /j_spring_security_check at position 3 of 10 in additional filter chain; firing Filter: 'UsernamePasswordAuthenticationFilter'&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;     **[DEBUG]   authentication.UsernamePasswordAuthenticationFilter:doFilter(): Request is to process authentication&#xD;&#xA;     [DEBUG]   authentication.ProviderManager:authenticate(): Authentication attempt using org.springframework.security.ldap.authentication.LdapAuthenticationProvider&#xD;&#xA;     [DEBUG]   authentication.LdapAuthenticationProvider:authenticate(): Processing authentication request for user: John.A.Smith&#xD;&#xA;     [DEBUG]   support.AbstractContextSource:createContext(): Got Ldap context on server 'ldaps://ldap-itc.sam.acme.com:636/o=acme.com'&#xD;&#xA;     [DEBUG]   authentication.UsernamePasswordAuthenticationFilter:unsuccessfulAuthentication(): Authentication request failed: org.springframework.security.authentication.BadCredentialsException: Bad credentials**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;     [DEBUG]   authentication.UsernamePasswordAuthenticationFilter:unsuccessfulAuthentication(): Updated SecurityContextHolder to contain null Authentication&#xD;&#xA;     [DEBUG]   authentication.UsernamePasswordAuthenticationFilter:unsuccessfulAuthentication(): Delegating to authentication failure handlerorg.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler@b87d31&#xD;&#xA;     [DEBUG]   authentication.SimpleUrlAuthenticationFailureHandler:onAuthenticationFailure(): Redirecting to /loginfailed&#xD;&#xA;     [DEBUG]   web.DefaultRedirectStrategy:sendRedirect(): Redirecting to '/spring3mvcdemo/loginfailed'&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:saveContext(): SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.&#xD;&#xA;     [DEBUG]   context.SecurityContextPersistenceFilter:doFilter(): SecurityContextHolder now cleared, as request processing completed&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 1 of 10 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter'&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:readSecurityContextFromSession(): HttpSession returned null object for SPRING_SECURITY_CONTEXT&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:loadContext(): No SecurityContext was available from the HttpSession: org.apache.catalina.session.StandardSessionFacade@1555185. A new one will be created.&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 2 of 10 in additional filter chain; firing Filter: 'LogoutFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 3 of 10 in additional filter chain; firing Filter: 'UsernamePasswordAuthenticationFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 4 of 10 in additional filter chain; firing Filter: 'BasicAuthenticationFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 5 of 10 in additional filter chain; firing Filter: 'RequestCacheAwareFilter'&#xD;&#xA;     [DEBUG]   savedrequest.DefaultSavedRequest:propertyEquals(): pathInfo: both null (property equals)&#xD;&#xA;     [DEBUG]   savedrequest.DefaultSavedRequest:propertyEquals(): queryString: both null (property equals)&#xD;&#xA;     [DEBUG]   savedrequest.DefaultSavedRequest:propertyEquals(): requestURI: arg1=/spring3mvcdemo/welcome; arg2=/spring3mvcdemo/loginfailed (property not equals)&#xD;&#xA;     [DEBUG]   savedrequest.HttpSessionRequestCache:getMatchingRequest(): saved request doesn't match&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 6 of 10 in additional filter chain; firing Filter: 'SecurityContextHolderAwareRequestFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 7 of 10 in additional filter chain; firing Filter: 'AnonymousAuthenticationFilter'&#xD;&#xA;     [DEBUG]   authentication.AnonymousAuthenticationFilter:doFilter(): Populated SecurityContextHolder with anonymous token: 'org.springframework.security.authentication.AnonymousAuthenticationToken@6fa90ed4: Principal: anonymousUser; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@fffc7f0c: RemoteIpAddress: 127.0.0.1; SessionId: 8CB1345178014A5558EC0E1A893679AF; Granted Authorities: ROLE_ANONYMOUS'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 8 of 10 in additional filter chain; firing Filter: 'SessionManagementFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 9 of 10 in additional filter chain; firing Filter: 'ExceptionTranslationFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 10 of 10 in additional filter chain; firing Filter: 'FilterSecurityInterceptor'&#xD;&#xA;     [DEBUG]   util.AntPathRequestMatcher:matches(): Checking match of request : '/loginfailed'; against '/welcome*'&#xD;&#xA;     [DEBUG]   intercept.FilterSecurityInterceptor:beforeInvocation(): Public object - authentication not attempted&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed reached end of additional filter chain; proceeding with original chain&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:doService(): DispatcherServlet with name 'spring3mvcdemo' processing GET request for [/spring3mvcdemo/loginfailed]&#xD;&#xA;     [DEBUG]   annotation.RequestMappingHandlerMapping:getHandlerInternal(): Looking up handler method for path /loginfailed&#xD;&#xA;     [DEBUG]   annotation.RequestMappingHandlerMapping:getHandlerInternal(): Returning handler method [public java.lang.String com.controllers.LoginController.loginerror(org.springframework.ui.ModelMap)]&#xD;&#xA;     [DEBUG]   support.DefaultListableBeanFactory:doGetBean(): Returning cached instance of singleton bean 'loginController'&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:doDispatch(): Last-Modified value for [/spring3mvcdemo/loginfailed] is: -1&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:render(): Rendering view [org.springframework.web.servlet.view.JstlView: name 'login'; URL [/jsp/login.jsp]] in DispatcherServlet with name 'spring3mvcdemo'&#xD;&#xA;     [DEBUG]   view.JstlView:exposeModelAsRequestAttributes(): Added model object 'error' of type [java.lang.String] to request in view with name 'login'&#xD;&#xA;     [DEBUG]   view.JstlView:renderMergedOutputModel(): Forwarding to resource [/jsp/login.jsp] in InternalResourceView 'login'&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:processRequest(): Successfully completed request&#xD;&#xA;     [DEBUG]   access.ExceptionTranslationFilter:doFilter(): Chain processed normally&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:saveContext(): SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.&#xD;&#xA;     [DEBUG]   context.SecurityContextPersistenceFilter:doFilter(): SecurityContextHolder now cleared, as request processing completed&#xD;&#xA;     [INFO ]   support.XmlWebApplicationContext:doClose(): Closing WebApplicationContext for namespace 'spring3mvcdemo-servlet': startup date [Mon Apr 02 14:03:53 EDT 2012]; parent: Root WebApplicationContext&#xD;&#xA;     [DEBUG]   support&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I looked up ""BadCredentialsException"" and got this:&#xD;&#xA;&#xD;&#xA;    Thrown if an authentication request is rejected because the credentials are invalid. For this exception to be thrown, it means the account is neither locked nor disabled. &#xD;&#xA;&#xD;&#xA;Which doesn't tell me anything more than the simple ""Bad Credentials"" msg I got on my login page.&#xD;&#xA;&#xD;&#xA;Can I get more information about the problem?  How?&#xD;&#xA;&#xD;&#xA;Will I need to put my own debugging statements in and recompile the Spring sourcecode?&#xD;&#xA;Any easy guides for that or using a debugger to step through the Spring security?&#xD;&#xA;&#xD;&#xA;Anything else I can try short of that?&#xD;&#xA;&#xD;&#xA;Thanks in advance for any clues&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;deleted 2 characters in body
22848949;9916041;787832;5;814f0e84-a5cc-410f-976b-dd2a487a9749;2012-04-02 19:23:47.0;"Spring 3.1&#xD;&#xA;Tomcat 6.*&#xD;&#xA;&#xD;&#xA;I'm working on making a Spring 3.1 webapp, authenticating with LDAP.   When I hit submit on my login page, it just hangs and after a very, very long time returns with this error message:&#xD;&#xA;&#xD;&#xA;    Reason: ldap-itc.sam.acme.com:636/o=acme.com&#xD;&#xA;    socket closed; &#xD;&#xA;    nested exception is javax.naming.ServiceUnavailableException: &#xD;&#xA;    ldap-itc.sam.acme.com:636/o=acme.com; socket closed&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was **able to connect** to my organizations LDAP server by using Softerra's LDAP browser using a real user's password and plugging in the ""principal"" ( with the username swapped out for ""uid={0}"" ), which I use in my *-security.xml file:&#xD;&#xA;&#xD;&#xA;    uid={0},ou=People,o=acme.com&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was also able to connect with a JNDI styled Java program I wrote (quoted below ).  That program dumped all of the users attributes, including the password, which seems to be encrypted on the LDAP server.  Do I need to tell Spring 3.1 this or encrypt the password that is collected on the login screen?&#xD;&#xA;&#xD;&#xA;I noticed that Java program I wrote/copied/adapted specified ""ssl"" in the context.  When I commented that out, the client program also hanged for a long time and returned with the same error message as Spring 3.1.   I uncommented that out, changed ""ldap://"" to ""ldap[B]s[/B]://"" in the client program and that worked fine.&#xD;&#xA;&#xD;&#xA;I tried the same thing in my *-security.xml.   I changed ""ldap://"" to ""ldap[B]s[/B]://"" in the ldap url.   This time the webapp did not hang, but returned very quickly with a message of&#xD;&#xA;&#xD;&#xA;    ""Bad Credentials""&#xD;&#xA;&#xD;&#xA;I tested my username and password out.   They are legitimate.&#xD;&#xA;&#xD;&#xA;I also tried typing in the encrypted version of my password, but that didn't make a difference.&#xD;&#xA;&#xD;&#xA;I'm guessing something with SSL and/or password encryption is now my problem.&#xD;&#xA;&#xD;&#xA;Any ideas of things I could check out?&#xD;&#xA;&#xD;&#xA;My *-security.xml and the java LDAP demo I wrote are quoted below&#xD;&#xA;&#xD;&#xA;Thanks.&#xD;&#xA;&#xD;&#xA;**My *-security.xml file:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""  &#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""  &#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  &#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans  &#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  &#xD;&#xA;        http://www.springframework.org/schema/security  &#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">  &#xD;&#xA;       &#xD;&#xA;         &#xD;&#xA;      &#xD;&#xA;      <s:http auto-config=""true"">  &#xD;&#xA;        **<s:intercept-url pattern=""/welcome*"" access=""isAuthenticated()"" />** &#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""  &#xD;&#xA;          authentication-failure-url=""/loginfailed"" />  &#xD;&#xA;        <s:logout logout-success-url=""/logout"" />  &#xD;&#xA;      </s:http>  &#xD;&#xA;       &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>  &#xD;&#xA;      &#xD;&#xA;      <s:authentication-manager>&#xD;&#xA;        <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=noaa.gov"" >&#xD;&#xA;          <s:password-compare hash=""md5"">&#xD;&#xA;            <s:password-encoder hash=""md5""/>&#xD;&#xA;          </s:password-compare>&#xD;&#xA;        </s:ldap-authentication-provider>&#xD;&#xA;      </s:authentication-manager>&#xD;&#xA;      &#xD;&#xA;    </beans>  &#xD;&#xA;&#xD;&#xA;**Here is the JNDI style LDAP Java program that WORKS with the same credentials:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;  &#xD;&#xA;    import javax.naming.directory.*;  &#xD;&#xA;    import java.util.*;  &#xD;&#xA;    import java.sql.*;  &#xD;&#xA;      &#xD;&#xA;    public class LDAPDEMO {  &#xD;&#xA;      &#xD;&#xA;        public static void main(String args[]) {  &#xD;&#xA;      &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";  &#xD;&#xA;            String ldapurl            = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com"";  &#xD;&#xA;            String loginid            = ""John.A.Smith"";  &#xD;&#xA;            String password           = ""passowordforjohn"";  &#xD;&#xA;            DirContext ctx            = null;  &#xD;&#xA;            Hashtable env             = new Hashtable();  &#xD;&#xA;            Attributes attr           = null;  &#xD;&#xA;            Attributes resultsAttrs   = null;  &#xD;&#xA;            SearchResult result       = null;  &#xD;&#xA;            NamingEnumeration results = null;  &#xD;&#xA;            int iResults              = 0;  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);  &#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);  &#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");  &#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");  &#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");  &#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);  &#xD;&#xA;            try {  &#xD;&#xA;      &#xD;&#xA;                ctx     = new InitialDirContext(env);  &#xD;&#xA;                attr    = new BasicAttributes(true);  &#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));  &#xD;&#xA;                results = ctx.search(""ou=People"",attr);  &#xD;&#xA;      &#xD;&#xA;                while (results.hasMore()) {  &#xD;&#xA;                    result       = (SearchResult)results.next();  &#xD;&#xA;                    resultsAttrs = result.getAttributes();  &#xD;&#xA;      &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {  &#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();  &#xD;&#xA;                        System.out.println(""attribute: "" + a.getID() + "" : "" + a.get().toString());  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;                    }// end for loop  &#xD;&#xA;      &#xD;&#xA;                    iResults++;  &#xD;&#xA;                }// end while loop  &#xD;&#xA;      &#xD;&#xA;                System.out.println(""iResults == "" + iResults);  &#xD;&#xA;      &#xD;&#xA;            }// end try  &#xD;&#xA;            catch (Exception e) {  &#xD;&#xA;                e.printStackTrace();  &#xD;&#xA;            }  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        }// end function main()  &#xD;&#xA;    }// end class LDAPDEMO  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;**Update:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;I updated my *-security.xml as instructed in the first answer.&#xD;&#xA;&#xD;&#xA;**I deployed this log4j.properties file to get a lot more debugging (all?):**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    # Root Logger Setup:  Includes the level of reporting and appenders -> where&#xD;&#xA;    #                     log messages get sent                                              &#xD;&#xA;    log4j.rootLogger                            = DEBUG,ca,fa&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    #ca - Console Appender - Send messages to the console&#xD;&#xA;    log4j.appender.ca                          = org.apache.log4j.ConsoleAppender&#xD;&#xA;    log4j.appender.ca.layout                   = org.apache.log4j.PatternLayout&#xD;&#xA;    log4j.appender.ca.layout.ConversionPattern = [%-5p] - %d{yyyy-MMM-dd HH:mm:ss} -  %c{1}:%M(): %m%n&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    #fa - File Appender - Send messages to a log file&#xD;&#xA;    log4j.appender.fa                            = org.apache.log4j.RollingFileAppender&#xD;&#xA;    log4j.appender.fa.File                       = ${catalina.home}/logs/spring3mvcdemo.log&#xD;&#xA;    log4j.appender.fa.MaxFileSize                = 1000KB&#xD;&#xA;    log4j.appender.fa.MaxBackupIndex             = 10&#xD;&#xA;    log4j.appender.fa.Threshold                  = DEBUG&#xD;&#xA;    log4j.appender.fa.layout                     = org.apache.log4j.PatternLayout&#xD;&#xA;    log4j.appender.fa.layout.ConversionPattern   = [%-5p] - %d{yyyy-MMM-dd HH:mm:ss} -  %c{2}:%M(): %m%n &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;This is an excerpt of the DEBUG logging that occured once I submitted my username and password:&#xD;&#xA;&#xD;&#xA;    [DEBUG]   context.HttpSessionSecurityContextRepository:saveContext(): SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.&#xD;&#xA;     [DEBUG]   context.SecurityContextPersistenceFilter:doFilter(): SecurityContextHolder now cleared, as request processing completed&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /j_spring_security_check at position 1 of 10 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter'&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:readSecurityContextFromSession(): HttpSession returned null object for SPRING_SECURITY_CONTEXT&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:loadContext(): No SecurityContext was available from the HttpSession: org.apache.catalina.session.StandardSessionFacade@1555185. A new one will be created.&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /j_spring_security_check at position 2 of 10 in additional filter chain; firing Filter: 'LogoutFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /j_spring_security_check at position 3 of 10 in additional filter chain; firing Filter: 'UsernamePasswordAuthenticationFilter'&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;     **[DEBUG]   authentication.UsernamePasswordAuthenticationFilter:doFilter(): Request is to process authentication&#xD;&#xA;     [DEBUG]   authentication.ProviderManager:authenticate(): Authentication attempt using org.springframework.security.ldap.authentication.LdapAuthenticationProvider&#xD;&#xA;     [DEBUG]   authentication.LdapAuthenticationProvider:authenticate(): Processing authentication request for user: John.A.Smith&#xD;&#xA;     [DEBUG]   support.AbstractContextSource:createContext(): Got Ldap context on server 'ldaps://ldap-itc.sam.acme.com:636/o=acme.com'&#xD;&#xA;     [DEBUG]   authentication.UsernamePasswordAuthenticationFilter:unsuccessfulAuthentication(): Authentication request failed: org.springframework.security.authentication.BadCredentialsException: Bad credentials**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;     [DEBUG]   authentication.UsernamePasswordAuthenticationFilter:unsuccessfulAuthentication(): Updated SecurityContextHolder to contain null Authentication&#xD;&#xA;     [DEBUG]   authentication.UsernamePasswordAuthenticationFilter:unsuccessfulAuthentication(): Delegating to authentication failure handlerorg.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler@b87d31&#xD;&#xA;     [DEBUG]   authentication.SimpleUrlAuthenticationFailureHandler:onAuthenticationFailure(): Redirecting to /loginfailed&#xD;&#xA;     [DEBUG]   web.DefaultRedirectStrategy:sendRedirect(): Redirecting to '/spring3mvcdemo/loginfailed'&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:saveContext(): SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.&#xD;&#xA;     [DEBUG]   context.SecurityContextPersistenceFilter:doFilter(): SecurityContextHolder now cleared, as request processing completed&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 1 of 10 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter'&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:readSecurityContextFromSession(): HttpSession returned null object for SPRING_SECURITY_CONTEXT&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:loadContext(): No SecurityContext was available from the HttpSession: org.apache.catalina.session.StandardSessionFacade@1555185. A new one will be created.&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 2 of 10 in additional filter chain; firing Filter: 'LogoutFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 3 of 10 in additional filter chain; firing Filter: 'UsernamePasswordAuthenticationFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 4 of 10 in additional filter chain; firing Filter: 'BasicAuthenticationFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 5 of 10 in additional filter chain; firing Filter: 'RequestCacheAwareFilter'&#xD;&#xA;     [DEBUG]   savedrequest.DefaultSavedRequest:propertyEquals(): pathInfo: both null (property equals)&#xD;&#xA;     [DEBUG]   savedrequest.DefaultSavedRequest:propertyEquals(): queryString: both null (property equals)&#xD;&#xA;     [DEBUG]   savedrequest.DefaultSavedRequest:propertyEquals(): requestURI: arg1=/spring3mvcdemo/welcome; arg2=/spring3mvcdemo/loginfailed (property not equals)&#xD;&#xA;     [DEBUG]   savedrequest.HttpSessionRequestCache:getMatchingRequest(): saved request doesn't match&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 6 of 10 in additional filter chain; firing Filter: 'SecurityContextHolderAwareRequestFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 7 of 10 in additional filter chain; firing Filter: 'AnonymousAuthenticationFilter'&#xD;&#xA;     [DEBUG]   authentication.AnonymousAuthenticationFilter:doFilter(): Populated SecurityContextHolder with anonymous token: 'org.springframework.security.authentication.AnonymousAuthenticationToken@6fa90ed4: Principal: anonymousUser; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@fffc7f0c: RemoteIpAddress: 127.0.0.1; SessionId: 8CB1345178014A5558EC0E1A893679AF; Granted Authorities: ROLE_ANONYMOUS'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 8 of 10 in additional filter chain; firing Filter: 'SessionManagementFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 9 of 10 in additional filter chain; firing Filter: 'ExceptionTranslationFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 10 of 10 in additional filter chain; firing Filter: 'FilterSecurityInterceptor'&#xD;&#xA;     [DEBUG]   util.AntPathRequestMatcher:matches(): Checking match of request : '/loginfailed'; against '/welcome*'&#xD;&#xA;     [DEBUG]   intercept.FilterSecurityInterceptor:beforeInvocation(): Public object - authentication not attempted&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed reached end of additional filter chain; proceeding with original chain&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:doService(): DispatcherServlet with name 'spring3mvcdemo' processing GET request for [/spring3mvcdemo/loginfailed]&#xD;&#xA;     [DEBUG]   annotation.RequestMappingHandlerMapping:getHandlerInternal(): Looking up handler method for path /loginfailed&#xD;&#xA;     [DEBUG]   annotation.RequestMappingHandlerMapping:getHandlerInternal(): Returning handler method [public java.lang.String com.controllers.LoginController.loginerror(org.springframework.ui.ModelMap)]&#xD;&#xA;     [DEBUG]   support.DefaultListableBeanFactory:doGetBean(): Returning cached instance of singleton bean 'loginController'&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:doDispatch(): Last-Modified value for [/spring3mvcdemo/loginfailed] is: -1&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:render(): Rendering view [org.springframework.web.servlet.view.JstlView: name 'login'; URL [/jsp/login.jsp]] in DispatcherServlet with name 'spring3mvcdemo'&#xD;&#xA;     [DEBUG]   view.JstlView:exposeModelAsRequestAttributes(): Added model object 'error' of type [java.lang.String] to request in view with name 'login'&#xD;&#xA;     [DEBUG]   view.JstlView:renderMergedOutputModel(): Forwarding to resource [/jsp/login.jsp] in InternalResourceView 'login'&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:processRequest(): Successfully completed request&#xD;&#xA;     [DEBUG]   access.ExceptionTranslationFilter:doFilter(): Chain processed normally&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:saveContext(): SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.&#xD;&#xA;     [DEBUG]   context.SecurityContextPersistenceFilter:doFilter(): SecurityContextHolder now cleared, as request processing completed&#xD;&#xA;     [INFO ]   support.XmlWebApplicationContext:doClose(): Closing WebApplicationContext for namespace 'spring3mvcdemo-servlet': startup date [Mon Apr 02 14:03:53 EDT 2012]; parent: Root WebApplicationContext&#xD;&#xA;     [DEBUG]   support&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Here is a copy of my login.jsp&#xD;&#xA;    &#xD;&#xA;    <%@ taglib prefix = ""c"" uri = ""http://java.sun.com/jsp/jstl/core""%>&#xD;&#xA;    &#xD;&#xA;    <jsp:include page = ""acmeHeader.jsp""/>&#xD;&#xA;    <jsp:include page = ""acmeHeaderMenu.jsp""/>&#xD;&#xA;    &#xD;&#xA;    <% boolean displayLogOutLink = false; &#xD;&#xA;       if(displayLogOutLink){&#xD;&#xA;    %>&#xD;&#xA;        <jsp:include page = ""acmeHeaderMenuLogOutLink.jsp""/>&#xD;&#xA;    <%}else{%>&#xD;&#xA;        <!-- navigation div: close it -->&#xD;&#xA;        </div>&#xD;&#xA;    <%}%>&#xD;&#xA;    &#xD;&#xA;    <%&#xD;&#xA;    String screenTitle   = ""ACME Staff Directory"";&#xD;&#xA;    String statusMessage = """";&#xD;&#xA;    %>&#xD;&#xA;    <include page = ""acmeHeaderContent.jsp""/>                                      &#xD;&#xA;    &#xD;&#xA;    <div id = ""loginContainer"">&#xD;&#xA;    <div id = ""screenTitle""><h1>ACME Staff Directory (acme)</h1></div>&#xD;&#xA;    &#xD;&#xA;    <p>&#xD;&#xA;    ${sessionScope[""SPRING_SECURITY_LAST_EXCEPTION""].message}&#xD;&#xA;    <p>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    You are about to access the ACME Staff Directory (acme).<br>&#xD;&#xA;    &#xD;&#xA;    <hr>&#xD;&#xA;    &#xD;&#xA;    <form name = ""f"" action = ""<c:url value = 'j_spring_security_check' />"" method='POST'>&#xD;&#xA;    &#xD;&#xA;    <h2>acme Search: For ACME Staff Members Only</h2>&#xD;&#xA;    &#xD;&#xA;    <div id = ""loginForm"">&#xD;&#xA;    &#xD;&#xA;        <table border = ""0"">&#xD;&#xA;            <tr>&#xD;&#xA;                <td>Username:</td>&#xD;&#xA;                <td><input name = ""j_username"" size = ""30"" maxlength = ""40"" type = ""text""></td>&#xD;&#xA;                <td>(Email Login ID - Example: jane.a.doe)</td>&#xD;&#xA;            </tr>&#xD;&#xA;            <tr>&#xD;&#xA;                <td>Password: </td>&#xD;&#xA;                <td><input name = ""j_password"" size = ""30"" maxlength = ""40"" type = ""password""></td>&#xD;&#xA;                <td>(Email Password)</td>&#xD;&#xA;            </tr>&#xD;&#xA;         </table>&#xD;&#xA;      &#xD;&#xA;        <input name = ""buttonLogin"" value = ""Login"" type = ""submit"">&#xD;&#xA;       &#xD;&#xA;    </div>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    <hr>&#xD;&#xA;    &#xD;&#xA;    <h2>acme Search: For The General Public </h2>&#xD;&#xA;    &#xD;&#xA;    <div id = ""loginPublicForm"">&#xD;&#xA;    &#xD;&#xA;      <table>&#xD;&#xA;          <tr>&#xD;&#xA;          <td><input name = ""buttonPublicSearch"" value = ""Public acme Search""  type = ""submit""></td>&#xD;&#xA;          </tr>&#xD;&#xA;          <tr>&#xD;&#xA;          <td>Find the names and professional contact information of ACME staff members.</td>&#xD;&#xA;          </tr>&#xD;&#xA;      </table>&#xD;&#xA;    &#xD;&#xA;    </div>&#xD;&#xA;    &#xD;&#xA;    <div id = ""loginacmeVersionNumber"">&#xD;&#xA;        v########&#xD;&#xA;    </div>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    <hr>&#xD;&#xA;    &#xD;&#xA;    <img src = ""../spring3mvcdemo/images/NoticeHeader.jpg"" alt = ""Notice to Users"">&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    <hr>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    </form>&#xD;&#xA;    </div>&#xD;&#xA;    <jsp:include page=""acmeFooter.jsp""/>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is a copy of my LoginController.java&#xD;&#xA;&#xD;&#xA;    package com.controllers;&#xD;&#xA;    &#xD;&#xA;    import java.security.Principal;&#xD;&#xA;    import org.springframework.stereotype.Controller;&#xD;&#xA;    import org.springframework.ui.ModelMap;&#xD;&#xA;    import org.springframework.web.bind.annotation.RequestMapping;&#xD;&#xA;    import org.springframework.web.bind.annotation.RequestMethod;&#xD;&#xA;    &#xD;&#xA;    @Controller&#xD;&#xA;    public class LoginController {&#xD;&#xA;    &#xD;&#xA;        //@RequestMapping(value = ""/welcome"", method = RequestMethod.GET)&#xD;&#xA;        @RequestMapping(value = ""/welcome"")&#xD;&#xA;        public String printWelcome(ModelMap model, Principal principal ) {&#xD;&#xA;    &#xD;&#xA;            String name = principal.getName();&#xD;&#xA;            model.addAttribute(""username"", name);&#xD;&#xA;            model.addAttribute(""message"", ""Spring Security Custom Form example"");&#xD;&#xA;            return ""hello"";&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @RequestMapping(value = ""/login"")&#xD;&#xA;        public String login(ModelMap model) {&#xD;&#xA;    &#xD;&#xA;            return ""login"";&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @RequestMapping(value = ""/loginfailed"")&#xD;&#xA;        public String loginerror(ModelMap model) {&#xD;&#xA;    &#xD;&#xA;            model.addAttribute(""error"", ""true"");&#xD;&#xA;            return ""login"";&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @RequestMapping(value = ""/logout"")&#xD;&#xA;        public String logout(ModelMap model) {&#xD;&#xA;    &#xD;&#xA;            return ""login"";&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I looked up ""BadCredentialsException"" and got this:&#xD;&#xA;&#xD;&#xA;    Thrown if an authentication request is rejected because the credentials are invalid. For this exception to be thrown, it means the account is neither locked nor disabled. &#xD;&#xA;&#xD;&#xA;Which doesn't tell me anything more than the simple ""Bad Credentials"" msg I got on my login page.&#xD;&#xA;&#xD;&#xA;Can I get more information about the problem?  How?&#xD;&#xA;&#xD;&#xA;Will I need to put my own debugging statements in and recompile the Spring sourcecode?&#xD;&#xA;Any easy guides for that or using a debugger to step through the Spring security?&#xD;&#xA;&#xD;&#xA;Anything else I can try short of that?&#xD;&#xA;&#xD;&#xA;Thanks in advance for any clues&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 3864 characters in body
22891048;9916041;787832;5;93151bd8-ab5b-436f-aa89-fe0bed745652;2012-04-03 19:04:36.0;"Spring 3.1&#xD;&#xA;Tomcat 6.*&#xD;&#xA;&#xD;&#xA;I'm working on making a Spring 3.1 webapp, authenticating with LDAP.   When I hit submit on my login page, it just hangs and after a very, very long time returns with this error message:&#xD;&#xA;&#xD;&#xA;    Reason: ldap-itc.sam.acme.com:636/o=acme.com&#xD;&#xA;    socket closed; &#xD;&#xA;    nested exception is javax.naming.ServiceUnavailableException: &#xD;&#xA;    ldap-itc.sam.acme.com:636/o=acme.com; socket closed&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was **able to connect** to my organizations LDAP server by using Softerra's LDAP browser using a real user's password and plugging in the ""principal"" ( with the username swapped out for ""uid={0}"" ), which I use in my *-security.xml file:&#xD;&#xA;&#xD;&#xA;    uid={0},ou=People,o=acme.com&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I was also able to connect with a JNDI styled Java program I wrote (quoted below ).  That program dumped all of the users attributes, including the password, which seems to be encrypted on the LDAP server.  Do I need to tell Spring 3.1 this or encrypt the password that is collected on the login screen?&#xD;&#xA;&#xD;&#xA;I noticed that Java program I wrote/copied/adapted specified ""ssl"" in the context.  When I commented that out, the client program also hanged for a long time and returned with the same error message as Spring 3.1.   I uncommented that out, changed ""ldap://"" to ""ldap[B]s[/B]://"" in the client program and that worked fine.&#xD;&#xA;&#xD;&#xA;I tried the same thing in my *-security.xml.   I changed ""ldap://"" to ""ldap[B]s[/B]://"" in the ldap url.   This time the webapp did not hang, but returned very quickly with a message of&#xD;&#xA;&#xD;&#xA;    ""Bad Credentials""&#xD;&#xA;&#xD;&#xA;I tested my username and password out.   They are legitimate.&#xD;&#xA;&#xD;&#xA;I also tried typing in the encrypted version of my password, but that didn't make a difference.&#xD;&#xA;&#xD;&#xA;I'm guessing something with SSL and/or password encryption is now my problem.&#xD;&#xA;&#xD;&#xA;Any ideas of things I could check out?&#xD;&#xA;&#xD;&#xA;My *-security.xml and the java LDAP demo I wrote are quoted below&#xD;&#xA;&#xD;&#xA;Thanks.&#xD;&#xA;&#xD;&#xA;**My *-security.xml file:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""  &#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""  &#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  &#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans  &#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  &#xD;&#xA;        http://www.springframework.org/schema/security  &#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">  &#xD;&#xA;       &#xD;&#xA;         &#xD;&#xA;      &#xD;&#xA;      <s:http auto-config=""true"" use-expressions=""true"">  &#xD;&#xA;        **<s:intercept-url pattern=""/welcome*"" access=""isAuthenticated()"" />** &#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""  &#xD;&#xA;          authentication-failure-url=""/loginfailed"" />  &#xD;&#xA;        <s:logout logout-success-url=""/logout"" />  &#xD;&#xA;      </s:http>  &#xD;&#xA;       &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>  &#xD;&#xA;      &#xD;&#xA;      <s:authentication-manager>&#xD;&#xA;        <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=noaa.gov"" >&#xD;&#xA;          <s:password-compare hash=""md5"">&#xD;&#xA;            <s:password-encoder hash=""md5""/>&#xD;&#xA;          </s:password-compare>&#xD;&#xA;        </s:ldap-authentication-provider>&#xD;&#xA;      </s:authentication-manager>&#xD;&#xA;      &#xD;&#xA;    </beans>  &#xD;&#xA;&#xD;&#xA;**Here is the JNDI style LDAP Java program that WORKS with the same credentials:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;  &#xD;&#xA;    import javax.naming.directory.*;  &#xD;&#xA;    import java.util.*;  &#xD;&#xA;    import java.sql.*;  &#xD;&#xA;      &#xD;&#xA;    public class LDAPDEMO {  &#xD;&#xA;      &#xD;&#xA;        public static void main(String args[]) {  &#xD;&#xA;      &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";  &#xD;&#xA;            String ldapurl            = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com"";  &#xD;&#xA;            String loginid            = ""John.A.Smith"";  &#xD;&#xA;            String password           = ""passowordforjohn"";  &#xD;&#xA;            DirContext ctx            = null;  &#xD;&#xA;            Hashtable env             = new Hashtable();  &#xD;&#xA;            Attributes attr           = null;  &#xD;&#xA;            Attributes resultsAttrs   = null;  &#xD;&#xA;            SearchResult result       = null;  &#xD;&#xA;            NamingEnumeration results = null;  &#xD;&#xA;            int iResults              = 0;  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);  &#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);  &#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");  &#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");  &#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");  &#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);  &#xD;&#xA;            try {  &#xD;&#xA;      &#xD;&#xA;                ctx     = new InitialDirContext(env);  &#xD;&#xA;                attr    = new BasicAttributes(true);  &#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));  &#xD;&#xA;                results = ctx.search(""ou=People"",attr);  &#xD;&#xA;      &#xD;&#xA;                while (results.hasMore()) {  &#xD;&#xA;                    result       = (SearchResult)results.next();  &#xD;&#xA;                    resultsAttrs = result.getAttributes();  &#xD;&#xA;      &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {  &#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();  &#xD;&#xA;                        System.out.println(""attribute: "" + a.getID() + "" : "" + a.get().toString());  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;                    }// end for loop  &#xD;&#xA;      &#xD;&#xA;                    iResults++;  &#xD;&#xA;                }// end while loop  &#xD;&#xA;      &#xD;&#xA;                System.out.println(""iResults == "" + iResults);  &#xD;&#xA;      &#xD;&#xA;            }// end try  &#xD;&#xA;            catch (Exception e) {  &#xD;&#xA;                e.printStackTrace();  &#xD;&#xA;            }  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        }// end function main()  &#xD;&#xA;    }// end class LDAPDEMO  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;**Update:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;I updated my *-security.xml as instructed in the first answer.&#xD;&#xA;&#xD;&#xA;**I deployed this log4j.properties file to get a lot more debugging (all?):**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    # Root Logger Setup:  Includes the level of reporting and appenders -> where&#xD;&#xA;    #                     log messages get sent                                              &#xD;&#xA;    log4j.rootLogger                            = DEBUG,ca,fa&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    #ca - Console Appender - Send messages to the console&#xD;&#xA;    log4j.appender.ca                          = org.apache.log4j.ConsoleAppender&#xD;&#xA;    log4j.appender.ca.layout                   = org.apache.log4j.PatternLayout&#xD;&#xA;    log4j.appender.ca.layout.ConversionPattern = [%-5p] - %d{yyyy-MMM-dd HH:mm:ss} -  %c{1}:%M(): %m%n&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    #fa - File Appender - Send messages to a log file&#xD;&#xA;    log4j.appender.fa                            = org.apache.log4j.RollingFileAppender&#xD;&#xA;    log4j.appender.fa.File                       = ${catalina.home}/logs/spring3mvcdemo.log&#xD;&#xA;    log4j.appender.fa.MaxFileSize                = 1000KB&#xD;&#xA;    log4j.appender.fa.MaxBackupIndex             = 10&#xD;&#xA;    log4j.appender.fa.Threshold                  = DEBUG&#xD;&#xA;    log4j.appender.fa.layout                     = org.apache.log4j.PatternLayout&#xD;&#xA;    log4j.appender.fa.layout.ConversionPattern   = [%-5p] - %d{yyyy-MMM-dd HH:mm:ss} -  %c{2}:%M(): %m%n &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;This is an excerpt of the DEBUG logging that occured once I submitted my username and password:&#xD;&#xA;&#xD;&#xA;    [DEBUG]   context.HttpSessionSecurityContextRepository:saveContext(): SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.&#xD;&#xA;     [DEBUG]   context.SecurityContextPersistenceFilter:doFilter(): SecurityContextHolder now cleared, as request processing completed&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /j_spring_security_check at position 1 of 10 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter'&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:readSecurityContextFromSession(): HttpSession returned null object for SPRING_SECURITY_CONTEXT&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:loadContext(): No SecurityContext was available from the HttpSession: org.apache.catalina.session.StandardSessionFacade@1555185. A new one will be created.&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /j_spring_security_check at position 2 of 10 in additional filter chain; firing Filter: 'LogoutFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /j_spring_security_check at position 3 of 10 in additional filter chain; firing Filter: 'UsernamePasswordAuthenticationFilter'&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;     **[DEBUG]   authentication.UsernamePasswordAuthenticationFilter:doFilter(): Request is to process authentication&#xD;&#xA;     [DEBUG]   authentication.ProviderManager:authenticate(): Authentication attempt using org.springframework.security.ldap.authentication.LdapAuthenticationProvider&#xD;&#xA;     [DEBUG]   authentication.LdapAuthenticationProvider:authenticate(): Processing authentication request for user: John.A.Smith&#xD;&#xA;     [DEBUG]   support.AbstractContextSource:createContext(): Got Ldap context on server 'ldaps://ldap-itc.sam.acme.com:636/o=acme.com'&#xD;&#xA;     [DEBUG]   authentication.UsernamePasswordAuthenticationFilter:unsuccessfulAuthentication(): Authentication request failed: org.springframework.security.authentication.BadCredentialsException: Bad credentials**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;     [DEBUG]   authentication.UsernamePasswordAuthenticationFilter:unsuccessfulAuthentication(): Updated SecurityContextHolder to contain null Authentication&#xD;&#xA;     [DEBUG]   authentication.UsernamePasswordAuthenticationFilter:unsuccessfulAuthentication(): Delegating to authentication failure handlerorg.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler@b87d31&#xD;&#xA;     [DEBUG]   authentication.SimpleUrlAuthenticationFailureHandler:onAuthenticationFailure(): Redirecting to /loginfailed&#xD;&#xA;     [DEBUG]   web.DefaultRedirectStrategy:sendRedirect(): Redirecting to '/spring3mvcdemo/loginfailed'&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:saveContext(): SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.&#xD;&#xA;     [DEBUG]   context.SecurityContextPersistenceFilter:doFilter(): SecurityContextHolder now cleared, as request processing completed&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 1 of 10 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter'&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:readSecurityContextFromSession(): HttpSession returned null object for SPRING_SECURITY_CONTEXT&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:loadContext(): No SecurityContext was available from the HttpSession: org.apache.catalina.session.StandardSessionFacade@1555185. A new one will be created.&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 2 of 10 in additional filter chain; firing Filter: 'LogoutFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 3 of 10 in additional filter chain; firing Filter: 'UsernamePasswordAuthenticationFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 4 of 10 in additional filter chain; firing Filter: 'BasicAuthenticationFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 5 of 10 in additional filter chain; firing Filter: 'RequestCacheAwareFilter'&#xD;&#xA;     [DEBUG]   savedrequest.DefaultSavedRequest:propertyEquals(): pathInfo: both null (property equals)&#xD;&#xA;     [DEBUG]   savedrequest.DefaultSavedRequest:propertyEquals(): queryString: both null (property equals)&#xD;&#xA;     [DEBUG]   savedrequest.DefaultSavedRequest:propertyEquals(): requestURI: arg1=/spring3mvcdemo/welcome; arg2=/spring3mvcdemo/loginfailed (property not equals)&#xD;&#xA;     [DEBUG]   savedrequest.HttpSessionRequestCache:getMatchingRequest(): saved request doesn't match&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 6 of 10 in additional filter chain; firing Filter: 'SecurityContextHolderAwareRequestFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 7 of 10 in additional filter chain; firing Filter: 'AnonymousAuthenticationFilter'&#xD;&#xA;     [DEBUG]   authentication.AnonymousAuthenticationFilter:doFilter(): Populated SecurityContextHolder with anonymous token: 'org.springframework.security.authentication.AnonymousAuthenticationToken@6fa90ed4: Principal: anonymousUser; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@fffc7f0c: RemoteIpAddress: 127.0.0.1; SessionId: 8CB1345178014A5558EC0E1A893679AF; Granted Authorities: ROLE_ANONYMOUS'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 8 of 10 in additional filter chain; firing Filter: 'SessionManagementFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 9 of 10 in additional filter chain; firing Filter: 'ExceptionTranslationFilter'&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed at position 10 of 10 in additional filter chain; firing Filter: 'FilterSecurityInterceptor'&#xD;&#xA;     [DEBUG]   util.AntPathRequestMatcher:matches(): Checking match of request : '/loginfailed'; against '/welcome*'&#xD;&#xA;     [DEBUG]   intercept.FilterSecurityInterceptor:beforeInvocation(): Public object - authentication not attempted&#xD;&#xA;     [DEBUG]   web.FilterChainProxy:doFilter(): /loginfailed reached end of additional filter chain; proceeding with original chain&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:doService(): DispatcherServlet with name 'spring3mvcdemo' processing GET request for [/spring3mvcdemo/loginfailed]&#xD;&#xA;     [DEBUG]   annotation.RequestMappingHandlerMapping:getHandlerInternal(): Looking up handler method for path /loginfailed&#xD;&#xA;     [DEBUG]   annotation.RequestMappingHandlerMapping:getHandlerInternal(): Returning handler method [public java.lang.String com.controllers.LoginController.loginerror(org.springframework.ui.ModelMap)]&#xD;&#xA;     [DEBUG]   support.DefaultListableBeanFactory:doGetBean(): Returning cached instance of singleton bean 'loginController'&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:doDispatch(): Last-Modified value for [/spring3mvcdemo/loginfailed] is: -1&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:render(): Rendering view [org.springframework.web.servlet.view.JstlView: name 'login'; URL [/jsp/login.jsp]] in DispatcherServlet with name 'spring3mvcdemo'&#xD;&#xA;     [DEBUG]   view.JstlView:exposeModelAsRequestAttributes(): Added model object 'error' of type [java.lang.String] to request in view with name 'login'&#xD;&#xA;     [DEBUG]   view.JstlView:renderMergedOutputModel(): Forwarding to resource [/jsp/login.jsp] in InternalResourceView 'login'&#xD;&#xA;     [DEBUG]   servlet.DispatcherServlet:processRequest(): Successfully completed request&#xD;&#xA;     [DEBUG]   access.ExceptionTranslationFilter:doFilter(): Chain processed normally&#xD;&#xA;     [DEBUG]   context.HttpSessionSecurityContextRepository:saveContext(): SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.&#xD;&#xA;     [DEBUG]   context.SecurityContextPersistenceFilter:doFilter(): SecurityContextHolder now cleared, as request processing completed&#xD;&#xA;     [INFO ]   support.XmlWebApplicationContext:doClose(): Closing WebApplicationContext for namespace 'spring3mvcdemo-servlet': startup date [Mon Apr 02 14:03:53 EDT 2012]; parent: Root WebApplicationContext&#xD;&#xA;     [DEBUG]   support&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Here is a copy of my login.jsp&#xD;&#xA;    &#xD;&#xA;    <%@ taglib prefix = ""c"" uri = ""http://java.sun.com/jsp/jstl/core""%>&#xD;&#xA;    &#xD;&#xA;    <jsp:include page = ""acmeHeader.jsp""/>&#xD;&#xA;    <jsp:include page = ""acmeHeaderMenu.jsp""/>&#xD;&#xA;    &#xD;&#xA;    <% boolean displayLogOutLink = false; &#xD;&#xA;       if(displayLogOutLink){&#xD;&#xA;    %>&#xD;&#xA;        <jsp:include page = ""acmeHeaderMenuLogOutLink.jsp""/>&#xD;&#xA;    <%}else{%>&#xD;&#xA;        <!-- navigation div: close it -->&#xD;&#xA;        </div>&#xD;&#xA;    <%}%>&#xD;&#xA;    &#xD;&#xA;    <%&#xD;&#xA;    String screenTitle   = ""ACME Staff Directory"";&#xD;&#xA;    String statusMessage = """";&#xD;&#xA;    %>&#xD;&#xA;    <include page = ""acmeHeaderContent.jsp""/>                                      &#xD;&#xA;    &#xD;&#xA;    <div id = ""loginContainer"">&#xD;&#xA;    <div id = ""screenTitle""><h1>ACME Staff Directory (acme)</h1></div>&#xD;&#xA;    &#xD;&#xA;    <p>&#xD;&#xA;    ${sessionScope[""SPRING_SECURITY_LAST_EXCEPTION""].message}&#xD;&#xA;    <p>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    You are about to access the ACME Staff Directory (acme).<br>&#xD;&#xA;    &#xD;&#xA;    <hr>&#xD;&#xA;    &#xD;&#xA;    <form name = ""f"" action = ""<c:url value = 'j_spring_security_check' />"" method='POST'>&#xD;&#xA;    &#xD;&#xA;    <h2>acme Search: For ACME Staff Members Only</h2>&#xD;&#xA;    &#xD;&#xA;    <div id = ""loginForm"">&#xD;&#xA;    &#xD;&#xA;        <table border = ""0"">&#xD;&#xA;            <tr>&#xD;&#xA;                <td>Username:</td>&#xD;&#xA;                <td><input name = ""j_username"" size = ""30"" maxlength = ""40"" type = ""text""></td>&#xD;&#xA;                <td>(Email Login ID - Example: jane.a.doe)</td>&#xD;&#xA;            </tr>&#xD;&#xA;            <tr>&#xD;&#xA;                <td>Password: </td>&#xD;&#xA;                <td><input name = ""j_password"" size = ""30"" maxlength = ""40"" type = ""password""></td>&#xD;&#xA;                <td>(Email Password)</td>&#xD;&#xA;            </tr>&#xD;&#xA;         </table>&#xD;&#xA;      &#xD;&#xA;        <input name = ""buttonLogin"" value = ""Login"" type = ""submit"">&#xD;&#xA;       &#xD;&#xA;    </div>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    <hr>&#xD;&#xA;    &#xD;&#xA;    <h2>acme Search: For The General Public </h2>&#xD;&#xA;    &#xD;&#xA;    <div id = ""loginPublicForm"">&#xD;&#xA;    &#xD;&#xA;      <table>&#xD;&#xA;          <tr>&#xD;&#xA;          <td><input name = ""buttonPublicSearch"" value = ""Public acme Search""  type = ""submit""></td>&#xD;&#xA;          </tr>&#xD;&#xA;          <tr>&#xD;&#xA;          <td>Find the names and professional contact information of ACME staff members.</td>&#xD;&#xA;          </tr>&#xD;&#xA;      </table>&#xD;&#xA;    &#xD;&#xA;    </div>&#xD;&#xA;    &#xD;&#xA;    <div id = ""loginacmeVersionNumber"">&#xD;&#xA;        v########&#xD;&#xA;    </div>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    <hr>&#xD;&#xA;    &#xD;&#xA;    <img src = ""../spring3mvcdemo/images/NoticeHeader.jpg"" alt = ""Notice to Users"">&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    <hr>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    </form>&#xD;&#xA;    </div>&#xD;&#xA;    <jsp:include page=""acmeFooter.jsp""/>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is a copy of my LoginController.java&#xD;&#xA;&#xD;&#xA;    package com.controllers;&#xD;&#xA;    &#xD;&#xA;    import java.security.Principal;&#xD;&#xA;    import org.springframework.stereotype.Controller;&#xD;&#xA;    import org.springframework.ui.ModelMap;&#xD;&#xA;    import org.springframework.web.bind.annotation.RequestMapping;&#xD;&#xA;    import org.springframework.web.bind.annotation.RequestMethod;&#xD;&#xA;    &#xD;&#xA;    @Controller&#xD;&#xA;    public class LoginController {&#xD;&#xA;    &#xD;&#xA;        //@RequestMapping(value = ""/welcome"", method = RequestMethod.GET)&#xD;&#xA;        @RequestMapping(value = ""/welcome"")&#xD;&#xA;        public String printWelcome(ModelMap model, Principal principal ) {&#xD;&#xA;    &#xD;&#xA;            String name = principal.getName();&#xD;&#xA;            model.addAttribute(""username"", name);&#xD;&#xA;            model.addAttribute(""message"", ""Spring Security Custom Form example"");&#xD;&#xA;            return ""hello"";&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @RequestMapping(value = ""/login"")&#xD;&#xA;        public String login(ModelMap model) {&#xD;&#xA;    &#xD;&#xA;            return ""login"";&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @RequestMapping(value = ""/loginfailed"")&#xD;&#xA;        public String loginerror(ModelMap model) {&#xD;&#xA;    &#xD;&#xA;            model.addAttribute(""error"", ""true"");&#xD;&#xA;            return ""login"";&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @RequestMapping(value = ""/logout"")&#xD;&#xA;        public String logout(ModelMap model) {&#xD;&#xA;    &#xD;&#xA;            return ""login"";&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I looked up ""BadCredentialsException"" and got this:&#xD;&#xA;&#xD;&#xA;    Thrown if an authentication request is rejected because the credentials are invalid. For this exception to be thrown, it means the account is neither locked nor disabled. &#xD;&#xA;&#xD;&#xA;Which doesn't tell me anything more than the simple ""Bad Credentials"" msg I got on my login page.&#xD;&#xA;&#xD;&#xA;Can I get more information about the problem?  How?&#xD;&#xA;&#xD;&#xA;Will I need to put my own debugging statements in and recompile the Spring sourcecode?&#xD;&#xA;Any easy guides for that or using a debugger to step through the Spring security?&#xD;&#xA;&#xD;&#xA;Anything else I can try short of that?&#xD;&#xA;&#xD;&#xA;Thanks in advance for any clues&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 23 characters in body
22931083;9916041;787832;5;20c0aaf8-9560-4887-a27c-5eea5e971f96;2012-04-04 17:08:15.0;"Spring 3.1&#xD;&#xA;Tomcat 6.*&#xD;&#xA;&#xD;&#xA;I'm working on making a Spring 3.1 webapp, authenticating with LDAP.   &#xD;&#xA;&#xD;&#xA;I tested the LDAP credentials (username, password, ldap URL,  search pattern ) with a JNDI styled Java program I wrote (quoted below ).  That program worked, dumped all of the users attributes, including the password, which seems to be encrypted on the LDAP server. &#xD;&#xA;&#xD;&#xA;When I try to login with the same credentials in Spring 3.1 I get the error message ""Bad Credentials"". &#xD;&#xA;&#xD;&#xA;I got this message in the logs:&#xD;&#xA;&#xD;&#xA;    DEBUG [org.springframework.security.authentication.ProviderManager:authenticate] (ProviderManager.java:152) - Authentication attempt using org.springframework.security.ldap.authentication.LdapAuthenticationProvider&#xD;&#xA;    DEBUG [org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider:authenticate] (AbstractLdapAuthenticationProvider.java:51) - Processing authentication request for user: John.A.Smith&#xD;&#xA;    DEBUG [org.springframework.security.ldap.authentication.BindAuthenticator:bindWithDn] (BindAuthenticator.java:108) - Attempting to bind as uid=John.A.Smith,ou=People,o=acme.com,o=acme.com&#xD;&#xA;    DEBUG [org.springframework.security.ldap.DefaultSpringSecurityContextSource$1:setupEnvironment] (DefaultSpringSecurityContextSource.java:76) - Removing pooling flag for user uid=John.A.Smith,ou=People,o=acme.com,o=acme.com&#xD;&#xA;    DEBUG [org.springframework.security.ldap.authentication.BindAuthenticator:handleBindException] (BindAuthenticator.java:152) - Failed to bind as uid=John.A.Smith,ou=People,o=acme.gov: org.springframework.ldap.AuthenticationException: [LDAP: error code 32 - No Such Object]; nested exception is javax.naming.AuthenticationException: [LDAP: error code 32 - No Such Object]&#xD;&#xA;    DEBUG [org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter:unsuccessfulAuthentication] (AbstractAuthenticationProcessingFilter.java:340) - Authentication request failed: org.springframework.security.authentication.BadCredentialsException: Bad credentials&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In my *-security.xml I tried using tags to make a password comparison and encoding happen, but it didn't help.  I tried using md4,md5,plaintext,sha,sha-256,{ssha},{sha} to no avail.   &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;       <s:authentication-manager>&#xD;&#xA;            <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=noaa.gov"" >&#xD;&#xA;              <s:password-compare hash=""md5"">&#xD;&#xA;                <s:password-encoder hash=""md5""/>&#xD;&#xA;              </s:password-compare>&#xD;&#xA;            </s:ldap-authentication-provider>&#xD;&#xA;          </s:authentication-manager>&#xD;&#xA;&#xD;&#xA;My networking group is a big, slow, bureaucratic org.  Is there a way I can tell what encoding they use, if any, without contacting them?&#xD;&#xA;&#xD;&#xA;Any ideas of things I could check out?&#xD;&#xA;&#xD;&#xA;This is my *-security.xml as of my last attempt and the java LDAP demo I WAS able to connect with&#xD;&#xA;&#xD;&#xA;Thanks.&#xD;&#xA;&#xD;&#xA;**My *-security.xml file:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""  &#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""  &#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  &#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans  &#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  &#xD;&#xA;        http://www.springframework.org/schema/security  &#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">  &#xD;&#xA;       &#xD;&#xA;         &#xD;&#xA;      &#xD;&#xA;      <s:http auto-config=""true"" use-expressions=""true"">  &#xD;&#xA;        **<s:intercept-url pattern=""/welcome*"" access=""isAuthenticated()"" />** &#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""  &#xD;&#xA;          authentication-failure-url=""/loginfailed"" />  &#xD;&#xA;        <s:logout logout-success-url=""/logout"" />  &#xD;&#xA;      </s:http>  &#xD;&#xA;       &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>  &#xD;&#xA;      &#xD;&#xA;      <s:authentication-manager>&#xD;&#xA;        <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=noaa.gov"" />&#xD;&#xA;      </s:authentication-manager>&#xD;&#xA;      &#xD;&#xA;    </beans>  &#xD;&#xA;&#xD;&#xA;**Here is the JNDI style LDAP Java program that WORKS with the same credentials:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;  &#xD;&#xA;    import javax.naming.directory.*;  &#xD;&#xA;    import java.util.*;  &#xD;&#xA;    import java.sql.*;  &#xD;&#xA;      &#xD;&#xA;    public class LDAPDEMO {  &#xD;&#xA;      &#xD;&#xA;        public static void main(String args[]) {  &#xD;&#xA;      &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";  &#xD;&#xA;            String ldapurl            = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com"";  &#xD;&#xA;            String loginid            = ""John.A.Smith"";  &#xD;&#xA;            String password           = ""passowordforjohn"";  &#xD;&#xA;            DirContext ctx            = null;  &#xD;&#xA;            Hashtable env             = new Hashtable();  &#xD;&#xA;            Attributes attr           = null;  &#xD;&#xA;            Attributes resultsAttrs   = null;  &#xD;&#xA;            SearchResult result       = null;  &#xD;&#xA;            NamingEnumeration results = null;  &#xD;&#xA;            int iResults              = 0;  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);  &#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);  &#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");  &#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");  &#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");  &#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);  &#xD;&#xA;            try {  &#xD;&#xA;      &#xD;&#xA;                ctx     = new InitialDirContext(env);  &#xD;&#xA;                attr    = new BasicAttributes(true);  &#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));  &#xD;&#xA;                results = ctx.search(""ou=People"",attr);  &#xD;&#xA;      &#xD;&#xA;                while (results.hasMore()) {  &#xD;&#xA;                    result       = (SearchResult)results.next();  &#xD;&#xA;                    resultsAttrs = result.getAttributes();  &#xD;&#xA;      &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {  &#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();  &#xD;&#xA;                        System.out.println(""attribute: "" + a.getID() + "" : "" + a.get().toString());  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;                    }// end for loop  &#xD;&#xA;      &#xD;&#xA;                    iResults++;  &#xD;&#xA;                }// end while loop  &#xD;&#xA;      &#xD;&#xA;                System.out.println(""iResults == "" + iResults);  &#xD;&#xA;      &#xD;&#xA;            }// end try  &#xD;&#xA;            catch (Exception e) {  &#xD;&#xA;                e.printStackTrace();  &#xD;&#xA;            }  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        }// end function main()  &#xD;&#xA;    }// end class LDAPDEMO  &#xD;&#xA;&#xD;&#xA;";;Updated my original post in light of various comments and things I tried.
22933831;9916041;787832;5;5bf08d83-5c63-4df3-8d49-c3de4fd5f7a2;2012-04-04 18:21:52.0;"Spring 3.1&#xD;&#xA;Tomcat 6.*&#xD;&#xA;&#xD;&#xA;I'm working on making a Spring 3.1 webapp, authenticating with LDAP.   &#xD;&#xA;&#xD;&#xA;I tested the LDAP credentials (username, password, ldap URL,  search pattern ) with a JNDI styled Java program I wrote (quoted below ).  That program worked, dumped all of the users attributes, including the password, which seems to be encrypted on the LDAP server. &#xD;&#xA;&#xD;&#xA;When I try to login with the same credentials in Spring 3.1 I get the error message ""Bad Credentials"". &#xD;&#xA;&#xD;&#xA;I got this message in the logs:&#xD;&#xA;&#xD;&#xA;    DEBUG [org.springframework.security.authentication.ProviderManager:authenticate] (ProviderManager.java:152) - Authentication attempt using org.springframework.security.ldap.authentication.LdapAuthenticationProvider&#xD;&#xA;    DEBUG [org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider:authenticate] (AbstractLdapAuthenticationProvider.java:51) - Processing authentication request for user: John.A.Smith&#xD;&#xA;    DEBUG [org.springframework.security.ldap.authentication.BindAuthenticator:bindWithDn] (BindAuthenticator.java:108) - Attempting to bind as uid=John.A.Smith,ou=People,o=acme.com,o=acme.com&#xD;&#xA;    DEBUG [org.springframework.security.ldap.DefaultSpringSecurityContextSource$1:setupEnvironment] (DefaultSpringSecurityContextSource.java:76) - Removing pooling flag for user uid=John.A.Smith,ou=People,o=acme.com,o=acme.com&#xD;&#xA;    DEBUG [org.springframework.security.ldap.authentication.BindAuthenticator:handleBindException] (BindAuthenticator.java:152) - Failed to bind as uid=John.A.Smith,ou=People,o=acme.gov: org.springframework.ldap.AuthenticationException: [LDAP: error code 32 - No Such Object]; nested exception is javax.naming.AuthenticationException: [LDAP: error code 32 - No Such Object]&#xD;&#xA;    DEBUG [org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter:unsuccessfulAuthentication] (AbstractAuthenticationProcessingFilter.java:340) - Authentication request failed: org.springframework.security.authentication.BadCredentialsException: Bad credentials&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In my *-security.xml I tried using tags to make a password comparison and encoding happen, but it didn't help.  I tried using md4,md5,plaintext,sha,sha-256,{ssha},{sha} to no avail.   &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;       <s:authentication-manager>&#xD;&#xA;            <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=noaa.gov"" >&#xD;&#xA;              <s:password-compare hash=""md5"">&#xD;&#xA;                <s:password-encoder hash=""md5""/>&#xD;&#xA;              </s:password-compare>&#xD;&#xA;            </s:ldap-authentication-provider>&#xD;&#xA;          </s:authentication-manager>&#xD;&#xA;&#xD;&#xA;My networking group is a big, slow, bureaucratic org.  Is there a way I can tell what encoding they use, if any, without contacting them?&#xD;&#xA;&#xD;&#xA;Any ideas of things I could check out?&#xD;&#xA;&#xD;&#xA;This is my *-security.xml as of my last attempt and the java LDAP demo I WAS able to connect with&#xD;&#xA;&#xD;&#xA;Thanks.&#xD;&#xA;&#xD;&#xA;**My *-security.xml file:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""  &#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""  &#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  &#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans  &#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  &#xD;&#xA;        http://www.springframework.org/schema/security  &#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">  &#xD;&#xA;       &#xD;&#xA;         &#xD;&#xA;      &#xD;&#xA;      <s:http auto-config=""true"" use-expressions=""true"">  &#xD;&#xA;        **<s:intercept-url pattern=""/welcome*"" access=""isAuthenticated()"" />** &#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""  &#xD;&#xA;          authentication-failure-url=""/loginfailed"" />  &#xD;&#xA;        <s:logout logout-success-url=""/logout"" />  &#xD;&#xA;      </s:http>  &#xD;&#xA;       &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>  &#xD;&#xA;      &#xD;&#xA;      <s:authentication-manager>&#xD;&#xA;        <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=noaa.gov"" />&#xD;&#xA;      </s:authentication-manager>&#xD;&#xA;      &#xD;&#xA;    </beans>  &#xD;&#xA;&#xD;&#xA;**Here is the JNDI style LDAP Java program that WORKS with the same credentials:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;  &#xD;&#xA;    import javax.naming.directory.*;  &#xD;&#xA;    import java.util.*;  &#xD;&#xA;    import java.sql.*;  &#xD;&#xA;      &#xD;&#xA;    public class LDAPDEMO {  &#xD;&#xA;      &#xD;&#xA;        public static void main(String args[]) {  &#xD;&#xA;      &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";  &#xD;&#xA;            String ldapurl            = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com"";  &#xD;&#xA;            String loginid            = ""John.A.Smith"";  &#xD;&#xA;            String password           = ""passowordforjohn"";  &#xD;&#xA;            DirContext ctx            = null;  &#xD;&#xA;            Hashtable env             = new Hashtable();  &#xD;&#xA;            Attributes attr           = null;  &#xD;&#xA;            Attributes resultsAttrs   = null;  &#xD;&#xA;            SearchResult result       = null;  &#xD;&#xA;            NamingEnumeration results = null;  &#xD;&#xA;            int iResults              = 0;  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);  &#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);  &#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");  &#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");  &#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");  &#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);  &#xD;&#xA;            try {  &#xD;&#xA;      &#xD;&#xA;                ctx     = new InitialDirContext(env);  &#xD;&#xA;                attr    = new BasicAttributes(true);  &#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));  &#xD;&#xA;                results = ctx.search(""ou=People"",attr);  &#xD;&#xA;      &#xD;&#xA;                while (results.hasMore()) {  &#xD;&#xA;                    result       = (SearchResult)results.next();  &#xD;&#xA;                    resultsAttrs = result.getAttributes();  &#xD;&#xA;      &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {  &#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();  &#xD;&#xA;                        System.out.println(""attribute: "" + a.getID() + "" : "" + a.get().toString());  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;                    }// end for loop  &#xD;&#xA;      &#xD;&#xA;                    iResults++;  &#xD;&#xA;                }// end while loop  &#xD;&#xA;      &#xD;&#xA;                System.out.println(""iResults == "" + iResults);  &#xD;&#xA;      &#xD;&#xA;            }// end try  &#xD;&#xA;            catch (Exception e) {  &#xD;&#xA;                e.printStackTrace();  &#xD;&#xA;            }  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        }// end function main()  &#xD;&#xA;    }// end class LDAPDEMO  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;**UPDATE**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;In light of LUke's comments below I am trying this configuration, but my XML editor keeps telling me thatt there is a syntax error someplace.   I isolated the error to the ""property"" tag towards the bottom, but I can't see what it is.&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""&#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans&#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&#xD;&#xA;        http://www.springframework.org/schema/security&#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <s:http auto-config=""true"" use-expressions=""true"">&#xD;&#xA;        <s:intercept-url pattern=""/welcome*"" access=""isAuthenticated()"" />&#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""&#xD;&#xA;          authentication-failure-url=""/loginfailed"" />&#xD;&#xA;        <s:logout logout-success-url=""/logout"" />&#xD;&#xA;      </s:http>&#xD;&#xA;    &#xD;&#xA;      <s:ldap-server id=""contextSource"" url=""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>&#xD;&#xA;    &#xD;&#xA;      <bean id=""ldapAuthProvider"" class=""org.springframework.security.ldap.authentication.LdapAuthenticationProvider"">&#xD;&#xA;    &#xD;&#xA;        <constructor-arg>&#xD;&#xA;          <bean class=""org.springframework.security.ldap.authentication.BindAuthenticator"">&#xD;&#xA;            <constructor-arg ref=""contextSource""/>&#xD;&#xA;            <property name=""userDnPatterns"">&#xD;&#xA;              <list>&#xD;&#xA;                <value>uid={0},ou=People,o=acme.com</value>&#xD;&#xA;              </list>&#xD;&#xA;            </property>&#xD;&#xA;          </bean>&#xD;&#xA;        </constructor-arg>&#xD;&#xA;    &#xD;&#xA;        <constructor-arg>&#xD;&#xA;          <bean class=""org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator""/>&#xD;&#xA;        </constructor-arg>&#xD;&#xA;    &#xD;&#xA;       <property id= ""am"" name=""authoritiesMapper"">&#xD;&#xA;        <bean class=""class=""org.springframework.security.core.authority.mapping"">&#xD;&#xA;           <property name=""defaultAuthority"" value=""ROLE_USER"" />&#xD;&#xA;        </bean>&#xD;&#xA;      </property> &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      </bean>&#xD;&#xA;    &#xD;&#xA;      <s:authentication-manager>&#xD;&#xA;        <s:authentication-manager ref=""ldapAuthProvider"" />&#xD;&#xA;      </s:authentication-manager>&#xD;&#xA;    &#xD;&#xA;    </beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 2344 characters in body
22934649;9916041;787832;5;f5ca23db-936d-4296-9254-d0a2453bddc9;2012-04-04 18:47:28.0;"Spring 3.1&#xD;&#xA;Tomcat 6.*&#xD;&#xA;&#xD;&#xA;I'm working on making a Spring 3.1 webapp, authenticating with LDAP.   &#xD;&#xA;&#xD;&#xA;I tested the LDAP credentials (username, password, ldap URL,  search pattern ) with a JNDI styled Java program I wrote (quoted below ).  That program worked, dumped all of the users attributes, including the password, which seems to be encrypted on the LDAP server. &#xD;&#xA;&#xD;&#xA;When I try to login with the same credentials in Spring 3.1 I get the error message ""Bad Credentials"". &#xD;&#xA;&#xD;&#xA;I got this message in the logs:&#xD;&#xA;&#xD;&#xA;    DEBUG [org.springframework.security.authentication.ProviderManager:authenticate] (ProviderManager.java:152) - Authentication attempt using org.springframework.security.ldap.authentication.LdapAuthenticationProvider&#xD;&#xA;    DEBUG [org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider:authenticate] (AbstractLdapAuthenticationProvider.java:51) - Processing authentication request for user: John.A.Smith&#xD;&#xA;    DEBUG [org.springframework.security.ldap.authentication.BindAuthenticator:bindWithDn] (BindAuthenticator.java:108) - Attempting to bind as uid=John.A.Smith,ou=People,o=acme.com,o=acme.com&#xD;&#xA;    DEBUG [org.springframework.security.ldap.DefaultSpringSecurityContextSource$1:setupEnvironment] (DefaultSpringSecurityContextSource.java:76) - Removing pooling flag for user uid=John.A.Smith,ou=People,o=acme.com,o=acme.com&#xD;&#xA;    DEBUG [org.springframework.security.ldap.authentication.BindAuthenticator:handleBindException] (BindAuthenticator.java:152) - Failed to bind as uid=John.A.Smith,ou=People,o=acme.gov: org.springframework.ldap.AuthenticationException: [LDAP: error code 32 - No Such Object]; nested exception is javax.naming.AuthenticationException: [LDAP: error code 32 - No Such Object]&#xD;&#xA;    DEBUG [org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter:unsuccessfulAuthentication] (AbstractAuthenticationProcessingFilter.java:340) - Authentication request failed: org.springframework.security.authentication.BadCredentialsException: Bad credentials&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In my *-security.xml I tried using tags to make a password comparison and encoding happen, but it didn't help.  I tried using md4,md5,plaintext,sha,sha-256,{ssha},{sha} to no avail.   &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;       <s:authentication-manager>&#xD;&#xA;            <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=noaa.gov"" >&#xD;&#xA;              <s:password-compare hash=""md5"">&#xD;&#xA;                <s:password-encoder hash=""md5""/>&#xD;&#xA;              </s:password-compare>&#xD;&#xA;            </s:ldap-authentication-provider>&#xD;&#xA;          </s:authentication-manager>&#xD;&#xA;&#xD;&#xA;My networking group is a big, slow, bureaucratic org.  Is there a way I can tell what encoding they use, if any, without contacting them?&#xD;&#xA;&#xD;&#xA;Any ideas of things I could check out?&#xD;&#xA;&#xD;&#xA;This is my *-security.xml as of my last attempt and the java LDAP demo I WAS able to connect with&#xD;&#xA;&#xD;&#xA;Thanks.&#xD;&#xA;&#xD;&#xA;**My *-security.xml file:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""  &#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""  &#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  &#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans  &#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  &#xD;&#xA;        http://www.springframework.org/schema/security  &#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">  &#xD;&#xA;       &#xD;&#xA;         &#xD;&#xA;      &#xD;&#xA;      <s:http auto-config=""true"" use-expressions=""true"">  &#xD;&#xA;        **<s:intercept-url pattern=""/welcome*"" access=""isAuthenticated()"" />** &#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""  &#xD;&#xA;          authentication-failure-url=""/loginfailed"" />  &#xD;&#xA;        <s:logout logout-success-url=""/logout"" />  &#xD;&#xA;      </s:http>  &#xD;&#xA;       &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>  &#xD;&#xA;      &#xD;&#xA;      <s:authentication-manager>&#xD;&#xA;        <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=noaa.gov"" />&#xD;&#xA;      </s:authentication-manager>&#xD;&#xA;      &#xD;&#xA;    </beans>  &#xD;&#xA;&#xD;&#xA;**Here is the JNDI style LDAP Java program that WORKS with the same credentials:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;  &#xD;&#xA;    import javax.naming.directory.*;  &#xD;&#xA;    import java.util.*;  &#xD;&#xA;    import java.sql.*;  &#xD;&#xA;      &#xD;&#xA;    public class LDAPDEMO {  &#xD;&#xA;      &#xD;&#xA;        public static void main(String args[]) {  &#xD;&#xA;      &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";  &#xD;&#xA;            String ldapurl            = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com"";  &#xD;&#xA;            String loginid            = ""John.A.Smith"";  &#xD;&#xA;            String password           = ""passowordforjohn"";  &#xD;&#xA;            DirContext ctx            = null;  &#xD;&#xA;            Hashtable env             = new Hashtable();  &#xD;&#xA;            Attributes attr           = null;  &#xD;&#xA;            Attributes resultsAttrs   = null;  &#xD;&#xA;            SearchResult result       = null;  &#xD;&#xA;            NamingEnumeration results = null;  &#xD;&#xA;            int iResults              = 0;  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);  &#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);  &#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");  &#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");  &#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");  &#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);  &#xD;&#xA;            try {  &#xD;&#xA;      &#xD;&#xA;                ctx     = new InitialDirContext(env);  &#xD;&#xA;                attr    = new BasicAttributes(true);  &#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));  &#xD;&#xA;                results = ctx.search(""ou=People"",attr);  &#xD;&#xA;      &#xD;&#xA;                while (results.hasMore()) {  &#xD;&#xA;                    result       = (SearchResult)results.next();  &#xD;&#xA;                    resultsAttrs = result.getAttributes();  &#xD;&#xA;      &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {  &#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();  &#xD;&#xA;                        System.out.println(""attribute: "" + a.getID() + "" : "" + a.get().toString());  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;                    }// end for loop  &#xD;&#xA;      &#xD;&#xA;                    iResults++;  &#xD;&#xA;                }// end while loop  &#xD;&#xA;      &#xD;&#xA;                System.out.println(""iResults == "" + iResults);  &#xD;&#xA;      &#xD;&#xA;            }// end try  &#xD;&#xA;            catch (Exception e) {  &#xD;&#xA;                e.printStackTrace();  &#xD;&#xA;            }  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        }// end function main()  &#xD;&#xA;    }// end class LDAPDEMO  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;**UPDATE**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;In light of Luke's comments I am trying this new configuration of my *-security.xml, but it throws this error on the startup of the webapp.  Ideas?  I don't know the Spring 3.1 tagging enough to fix it ( I made a few guesses that didn't pan out ).&#xD;&#xA;&#xD;&#xA;The error:&#xD;&#xA;&#xD;&#xA;    ERROR [org.springframework.web.context.ContextLoader:initWebApplicationContext] (ContextLoader.java:308) - Context initialization failed&#xD;&#xA;    org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 49 in XML document from ServletContext resource [/WEB-INF/spring3mvcdemo-security.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.2.4.a: Invalid content was found starting with element 's:authentication-manager'. One of '{""http://www.springframework.org/schema/security"":authentication-provider, ""http://www.springframework.org/schema/security"":ldap-authentication-provider}' is expected.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The experimental configuration:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""&#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans&#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&#xD;&#xA;        http://www.springframework.org/schema/security&#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">&#xD;&#xA;     &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <s:http auto-config=""true"" use-expressions=""true"">&#xD;&#xA;        <s:intercept-url pattern=""/welcome*"" access=""isAuthenticated()"" />&#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""&#xD;&#xA;          authentication-failure-url=""/loginfailed"" />&#xD;&#xA;        <s:logout logout-success-url=""/logout"" />&#xD;&#xA;      </s:http>&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      <s:ldap-server id=""contextSource"" url=""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>&#xD;&#xA;    &#xD;&#xA;      <bean id=""ldapAuthProvider"" class=""org.springframework.security.ldap.authentication.LdapAuthenticationProvider"">&#xD;&#xA;    &#xD;&#xA;        <constructor-arg>&#xD;&#xA;          <bean class=""org.springframework.security.ldap.authentication.BindAuthenticator"">&#xD;&#xA;            <constructor-arg ref=""contextSource""/>&#xD;&#xA;            <property name=""userDnPatterns"">&#xD;&#xA;              <list>&#xD;&#xA;                <value>uid={0},ou=People</value>&#xD;&#xA;              </list>&#xD;&#xA;            </property>&#xD;&#xA;          </bean>&#xD;&#xA;        </constructor-arg>&#xD;&#xA;    &#xD;&#xA;        <constructor-arg>&#xD;&#xA;          <bean class=""org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator""/>&#xD;&#xA;        </constructor-arg>&#xD;&#xA;    &#xD;&#xA;        <property name=""authoritiesMapper"">&#xD;&#xA;          <bean class=""org.springframework.security.core.authority.mapping"">&#xD;&#xA;            <property name=""defaultAuthority"" value=""ROLE_USER"" />&#xD;&#xA;          </bean>&#xD;&#xA;    &#xD;&#xA;        </property>&#xD;&#xA;    &#xD;&#xA;      </bean>&#xD;&#xA;    &#xD;&#xA;      <s:authentication-manager>&#xD;&#xA;        <s:authentication-manager ref=""ldapAuthProvider"" />&#xD;&#xA;      </s:authentication-manager>&#xD;&#xA;    &#xD;&#xA;    </beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 699 characters in body
22938653;9916041;787832;5;16248c12-3bff-4ebf-ac0b-51462300ab81;2012-04-04 20:51:34.0;"Spring 3.1&#xD;&#xA;Tomcat 6.*&#xD;&#xA;&#xD;&#xA;I'm working on making a Spring 3.1 webapp, authenticating with LDAP.   &#xD;&#xA;&#xD;&#xA;I tested the LDAP credentials (username, password, ldap URL,  search pattern ) with a JNDI styled Java program I wrote (quoted below ).  That program worked, dumped all of the users attributes, including the password, which seems to be encrypted on the LDAP server. &#xD;&#xA;&#xD;&#xA;When I try to login with the same credentials in Spring 3.1 I get the error message ""Bad Credentials"". &#xD;&#xA;&#xD;&#xA;I got this message in the logs:&#xD;&#xA;&#xD;&#xA;    DEBUG [org.springframework.security.authentication.ProviderManager:authenticate] (ProviderManager.java:152) - Authentication attempt using org.springframework.security.ldap.authentication.LdapAuthenticationProvider&#xD;&#xA;    DEBUG [org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider:authenticate] (AbstractLdapAuthenticationProvider.java:51) - Processing authentication request for user: John.A.Smith&#xD;&#xA;    DEBUG [org.springframework.security.ldap.authentication.BindAuthenticator:bindWithDn] (BindAuthenticator.java:108) - Attempting to bind as uid=John.A.Smith,ou=People,o=acme.com,o=acme.com&#xD;&#xA;    DEBUG [org.springframework.security.ldap.DefaultSpringSecurityContextSource$1:setupEnvironment] (DefaultSpringSecurityContextSource.java:76) - Removing pooling flag for user uid=John.A.Smith,ou=People,o=acme.com,o=acme.com&#xD;&#xA;    DEBUG [org.springframework.security.ldap.authentication.BindAuthenticator:handleBindException] (BindAuthenticator.java:152) - Failed to bind as uid=John.A.Smith,ou=People,o=acme.gov: org.springframework.ldap.AuthenticationException: [LDAP: error code 32 - No Such Object]; nested exception is javax.naming.AuthenticationException: [LDAP: error code 32 - No Such Object]&#xD;&#xA;    DEBUG [org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter:unsuccessfulAuthentication] (AbstractAuthenticationProcessingFilter.java:340) - Authentication request failed: org.springframework.security.authentication.BadCredentialsException: Bad credentials&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In my *-security.xml I tried using tags to make a password comparison and encoding happen, but it didn't help.  I tried using md4,md5,plaintext,sha,sha-256,{ssha},{sha} to no avail.   &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;       <s:authentication-manager>&#xD;&#xA;            <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=noaa.gov"" >&#xD;&#xA;              <s:password-compare hash=""md5"">&#xD;&#xA;                <s:password-encoder hash=""md5""/>&#xD;&#xA;              </s:password-compare>&#xD;&#xA;            </s:ldap-authentication-provider>&#xD;&#xA;          </s:authentication-manager>&#xD;&#xA;&#xD;&#xA;My networking group is a big, slow, bureaucratic org.  Is there a way I can tell what encoding they use, if any, without contacting them?&#xD;&#xA;&#xD;&#xA;Any ideas of things I could check out?&#xD;&#xA;&#xD;&#xA;This is my *-security.xml as of my last attempt and the java LDAP demo I WAS able to connect with&#xD;&#xA;&#xD;&#xA;Thanks.&#xD;&#xA;&#xD;&#xA;**My *-security.xml file:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""  &#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""  &#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  &#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans  &#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  &#xD;&#xA;        http://www.springframework.org/schema/security  &#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">  &#xD;&#xA;       &#xD;&#xA;         &#xD;&#xA;      &#xD;&#xA;      <s:http auto-config=""true"" use-expressions=""true"">  &#xD;&#xA;        **<s:intercept-url pattern=""/welcome*"" access=""isAuthenticated()"" />** &#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""  &#xD;&#xA;          authentication-failure-url=""/loginfailed"" />  &#xD;&#xA;        <s:logout logout-success-url=""/logout"" />  &#xD;&#xA;      </s:http>  &#xD;&#xA;       &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>  &#xD;&#xA;      &#xD;&#xA;      <s:authentication-manager>&#xD;&#xA;        <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People,o=noaa.gov"" />&#xD;&#xA;      </s:authentication-manager>&#xD;&#xA;      &#xD;&#xA;    </beans>  &#xD;&#xA;&#xD;&#xA;**Here is the JNDI style LDAP Java program that WORKS with the same credentials:**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import javax.naming.*;  &#xD;&#xA;    import javax.naming.directory.*;  &#xD;&#xA;    import java.util.*;  &#xD;&#xA;    import java.sql.*;  &#xD;&#xA;      &#xD;&#xA;    public class LDAPDEMO {  &#xD;&#xA;      &#xD;&#xA;        public static void main(String args[]) {  &#xD;&#xA;      &#xD;&#xA;            String lcf                = ""com.sun.jndi.ldap.LdapCtxFactory"";  &#xD;&#xA;            String ldapurl            = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com"";  &#xD;&#xA;            String loginid            = ""John.A.Smith"";  &#xD;&#xA;            String password           = ""passowordforjohn"";  &#xD;&#xA;            DirContext ctx            = null;  &#xD;&#xA;            Hashtable env             = new Hashtable();  &#xD;&#xA;            Attributes attr           = null;  &#xD;&#xA;            Attributes resultsAttrs   = null;  &#xD;&#xA;            SearchResult result       = null;  &#xD;&#xA;            NamingEnumeration results = null;  &#xD;&#xA;            int iResults              = 0;  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;            env.put(Context.INITIAL_CONTEXT_FACTORY, lcf);  &#xD;&#xA;            env.put(Context.PROVIDER_URL, ldapurl);  &#xD;&#xA;            env.put(Context.SECURITY_PROTOCOL, ""ssl"");  &#xD;&#xA;            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");  &#xD;&#xA;            env.put(Context.SECURITY_PRINCIPAL, ""uid="" + loginid + "",ou=People,o=acme.com"");  &#xD;&#xA;            env.put(Context.SECURITY_CREDENTIALS, password);  &#xD;&#xA;            try {  &#xD;&#xA;      &#xD;&#xA;                ctx     = new InitialDirContext(env);  &#xD;&#xA;                attr    = new BasicAttributes(true);  &#xD;&#xA;                attr.put(new BasicAttribute(""uid"",loginid));  &#xD;&#xA;                results = ctx.search(""ou=People"",attr);  &#xD;&#xA;      &#xD;&#xA;                while (results.hasMore()) {  &#xD;&#xA;                    result       = (SearchResult)results.next();  &#xD;&#xA;                    resultsAttrs = result.getAttributes();  &#xD;&#xA;      &#xD;&#xA;                    for (NamingEnumeration enumAttributes  = resultsAttrs.getAll(); enumAttributes.hasMore();) {  &#xD;&#xA;                        Attribute a = (Attribute)enumAttributes.next();  &#xD;&#xA;                        System.out.println(""attribute: "" + a.getID() + "" : "" + a.get().toString());  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;                    }// end for loop  &#xD;&#xA;      &#xD;&#xA;                    iResults++;  &#xD;&#xA;                }// end while loop  &#xD;&#xA;      &#xD;&#xA;                System.out.println(""iResults == "" + iResults);  &#xD;&#xA;      &#xD;&#xA;            }// end try  &#xD;&#xA;            catch (Exception e) {  &#xD;&#xA;                e.printStackTrace();  &#xD;&#xA;            }  &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        }// end function main()  &#xD;&#xA;    }// end class LDAPDEMO  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;**Solution**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;This comment from Luke Taylor helped me get my configuration working:&#xD;&#xA;&#xD;&#xA;> Your configuration is wrong in that you have ""o=acme.com"" in the LDAP&#xD;&#xA;> server URL and are also using ""o=acme.com"" in the user DN pattern.&#xD;&#xA;&#xD;&#xA;I took the ""o=acme.com"" out of the DN pattern and the LDAP worked.   I had originally put the ""o=acme.com"" in both the LDAP URL and the DN pattern because I am new to Spring 3.1 and LDAP, and that is similar to how it is/was done in the Java JNDI version of the LDAP demo I wrote based on the legacy code I am replacing.&#xD;&#xA;&#xD;&#xA;Here is the final, working version of my *-security.xml&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""  &#xD;&#xA;      xmlns:s=""http://www.springframework.org/schema/security""  &#xD;&#xA;      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  &#xD;&#xA;      xsi:schemaLocation=""http://www.springframework.org/schema/beans  &#xD;&#xA;        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  &#xD;&#xA;        http://www.springframework.org/schema/security  &#xD;&#xA;        http://www.springframework.org/schema/security/spring-security-3.1.xsd"">  &#xD;&#xA;       &#xD;&#xA;         &#xD;&#xA;      &#xD;&#xA;      <s:http auto-config=""true"" use-expressions=""true"">  &#xD;&#xA;        **<s:intercept-url pattern=""/welcome*"" access=""isAuthenticated()"" />** &#xD;&#xA;        <s:form-login login-page=""/login"" default-target-url=""/welcome""  &#xD;&#xA;          authentication-failure-url=""/loginfailed"" />  &#xD;&#xA;        <s:logout logout-success-url=""/logout"" />  &#xD;&#xA;      </s:http>  &#xD;&#xA;       &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      <s:ldap-server url = ""ldap://ldap-itc.sam.acme.com:636/o=acme.com""/>  &#xD;&#xA;      &#xD;&#xA;      <s:authentication-manager>&#xD;&#xA;        <s:ldap-authentication-provider user-dn-pattern=""uid={0},ou=People"" />&#xD;&#xA;      </s:authentication-manager>&#xD;&#xA;      &#xD;&#xA;    </beans>  &#xD;&#xA;&#xD;&#xA;I'm going to explore his other comment and see if I can put the password encoding back in or if I need to.&#xD;&#xA;";;Described the accepted solution.
