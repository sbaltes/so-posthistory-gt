Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
706587;431715;22244;2;c7d4ed5d-4b1e-4123-9ba6-db20b06ea4f9;2009-01-10 20:41:51.0;"You can change the working directory with os.chdir( path ).  &#xD;&#xA;&#xD;&#xA;There are two best practices to follow:&#xD;&#xA;&#xD;&#xA; 1. Catch the exception (WindowsError, OSError) on invalid path.  If the exception is thrown, do not do anything recursive, especially if it is destructive, or it will happen to the old path and not the new one.&#xD;&#xA; 2. Return to your old directory when you're done.  This is done in an exception-safe way by wrapping your chdir call in a class:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    class Chdir:         &#xD;&#xA;      def __init__( self, newPath ):&#xD;&#xA;  &#xD;&#xA;        self.savedPath = os.getcwd()&#xD;&#xA;        os.chdir(newPath)&#xD;&#xA;    &#xD;&#xA;      def __del__( self ):&#xD;&#xA;&#xD;&#xA;        os.chdir( self.savedPath )&#xD;&#xA;&#xD;&#xA;Note that this snippet assumes that self.savedPath is still valid.  Improving the handling of this is an exercise left up to the programmer.&#xD;&#xA;&#xD;&#xA;Changing the current working directory in a subprocess does not change the current working directory in the parent process.  This is true of the Python interpreter as well.  You cannot use os.chdir() to change the CWD of the calling process.";;
706588;431715;18770;5;58659caa-d31b-4f87-9e50-c1102a54e8d9;2009-01-10 20:45:31.0;"You can change the working directory with os.chdir( path ).  &#xD;&#xA;&#xD;&#xA;There are two best practices to follow:&#xD;&#xA;&#xD;&#xA; 1. Catch the exception (WindowsError, OSError) on invalid path.  If the exception is thrown, do not do anything recursive, especially if it is destructive, or it will happen to the old path and not the new one.&#xD;&#xA; 2. Return to your old directory when you're done.  This is done in an exception-safe way by wrapping your chdir call in a class:&#xD;&#xA;&#xD;&#xA;<pre><code>class Chdir:&#xD;&#xA;    def __init__( self, newPath ):&#xD;&#xA;        self.savedPath = os.getcwd()&#xD;&#xA;        os.chdir(newPath)&#xD;&#xA;    &#xD;&#xA;    def __del__( self ):&#xD;&#xA;        os.chdir( self.savedPath )&#xD;&#xA;</code></pre>&#xD;&#xA;&#xD;&#xA;Note that this snippet assumes that self.savedPath is still valid.  Improving the handling of this is an exercise left up to the programmer.&#xD;&#xA;&#xD;&#xA;Changing the current working directory in a subprocess does not change the current working directory in the parent process.  This is true of the Python interpreter as well.  You cannot use os.chdir() to change the CWD of the calling process.";;deleted 50 characters in body
706589;431715;22244;5;7fa74489-036d-41f2-b93d-8eb3d058d24e;2009-01-10 20:46:06.0;"You can change the working directory with os.chdir( path ).  &#xD;&#xA;&#xD;&#xA;There are two best practices to follow:&#xD;&#xA;&#xD;&#xA; 1. Catch the exception (WindowsError, OSError) on invalid path.  If the exception is thrown, do not perform any recursive operations, especially destructive ones.  They will operate on the old path and not the new one.&#xD;&#xA; 2. Return to your old directory when you're done.  This is done in an exception-safe manner by wrapping your chdir call in a class:&#xD;&#xA;&#xD;&#xA;<pre>&#xD;&#xA;    class Chdir:         &#xD;&#xA;      def __init__( self, newPath ):  &#xD;&#xA;        self.savedPath = os.getcwd()&#xD;&#xA;        os.chdir(newPath)&#xD;&#xA;    &#xD;&#xA;      def __del__( self ):&#xD;&#xA;        os.chdir( self.savedPath )&#xD;&#xA;</pre>&#xD;&#xA;Note that this snippet assumes that self.savedPath is still valid.  Improving the handling of this is an exercise left up to the programmer.&#xD;&#xA;&#xD;&#xA;Changing the current working directory in a subprocess does not change the current working directory in the parent process.  This is true of the Python interpreter as well.  You cannot use os.chdir() to change the CWD of the calling process.";;improved english, formatting
41368946;431715;1930168;5;960be35d-46e2-4aa3-9fdb-7e0cee6d4837;2013-05-29 16:33:53.0;"You can change the working directory with&#xD;&#xA;&#xD;&#xA;    os.chdir(path)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;There are two best practices to follow when using this method:&#xD;&#xA;&#xD;&#xA; 1. Catch the exception (WindowsError, OSError) on invalid path.  If the exception is thrown, do not perform any recursive operations, especially destructive ones.  They will operate on the old path and not the new one.&#xD;&#xA; 2. Return to your old directory when you're done.  This is done in an exception-safe manner by wrapping your chdir call in a class:&#xD;&#xA;&#xD;&#xA;<pre>&#xD;&#xA;    class Chdir:         &#xD;&#xA;      def __init__( self, newPath ):  &#xD;&#xA;        self.savedPath = os.getcwd()&#xD;&#xA;        os.chdir(newPath)&#xD;&#xA;    &#xD;&#xA;      def __del__( self ):&#xD;&#xA;        os.chdir( self.savedPath )&#xD;&#xA;</pre>&#xD;&#xA;Note that this snippet assumes that self.savedPath is still valid.  Improving the handling of this is an exercise left up to the programmer.&#xD;&#xA;&#xD;&#xA;Changing the current working directory in a subprocess does not change the current working directory in the parent process.  This is true of the Python interpreter as well.  You cannot use os.chdir() to change the CWD of the calling process.";;Improved formatting to make the section at the top more readable for those who don't want to take the time to read the whole thing.
110980631;431715;216074;5;8587fa6f-2892-4a02-bc0c-366fb45f5a2c;2016-02-16 13:50:42.0;"You can change the working directory with&#xD;&#xA;&#xD;&#xA;    os.chdir(path)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;There are two best practices to follow when using this method:&#xD;&#xA;&#xD;&#xA; 1. Catch the exception (WindowsError, OSError) on invalid path.  If the exception is thrown, do not perform any recursive operations, especially destructive ones.  They will operate on the old path and not the new one.&#xD;&#xA; 2. Return to your old directory when you're done.  This can be done in an exception-safe manner by wrapping your chdir call in a context manager, like [Brian M. Hunt did in his answer](http://stackoverflow.com/questions/431684/how-do-i-cd-in-python/13197763#13197763).&#xD;&#xA;&#xD;&#xA;Changing the current working directory in a subprocess does not change the current working directory in the parent process.  This is true of the Python interpreter as well.  You cannot use os.chdir() to change the CWD of the calling process.";;I’m just going to be bold and fix this answer. It’s otherwise fine but that code was really harmful, so let’s just remove that to make this sane again.
115442665;431715;128421;5;050ee4eb-979b-4966-af0e-8e3816ddb1fd;2016-04-11 18:52:24.0;"You can change the working directory with&#xD;&#xA;&#xD;&#xA;    os.chdir(path)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;There are two best practices to follow when using this method:&#xD;&#xA;&#xD;&#xA; 1. Catch the exception (WindowsError, OSError) on invalid path.  If the exception is thrown, do not perform any recursive operations, especially destructive ones.  They will operate on the old path and not the new one.&#xD;&#xA; 2. Return to your old directory when you're done.  This can be done in an exception-safe manner by wrapping your chdir call in a context manager, like Brian M. Hunt did in [his answer](http://stackoverflow.com/questions/431684/how-do-i-cd-in-python/13197763#13197763).&#xD;&#xA;&#xD;&#xA;Changing the current working directory in a subprocess does not change the current working directory in the parent process.  This is true of the Python interpreter as well.  You cannot use `os.chdir()` to change the CWD of the calling process.";;edited for readability and grammar.
147502692;431715;-1;5;57ff7ca4-fba0-477b-963f-de42f54a9fbb;2017-05-23 12:26:42.0;"You can change the working directory with&#xD;&#xA;&#xD;&#xA;    os.chdir(path)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;There are two best practices to follow when using this method:&#xD;&#xA;&#xD;&#xA; 1. Catch the exception (WindowsError, OSError) on invalid path.  If the exception is thrown, do not perform any recursive operations, especially destructive ones.  They will operate on the old path and not the new one.&#xD;&#xA; 2. Return to your old directory when you're done.  This can be done in an exception-safe manner by wrapping your chdir call in a context manager, like Brian M. Hunt did in [his answer](https://stackoverflow.com/questions/431684/how-do-i-cd-in-python/13197763#13197763).&#xD;&#xA;&#xD;&#xA;Changing the current working directory in a subprocess does not change the current working directory in the parent process.  This is true of the Python interpreter as well.  You cannot use `os.chdir()` to change the CWD of the calling process.";;replaced http://stackoverflow.com/ with https://stackoverflow.com/
