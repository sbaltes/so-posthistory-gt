Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
106726431;34362501;4577296;2;81e3979a-ad1d-4690-80b4-1974c6759ca0;2015-12-18 19:17:01.0;"I am trying to user jersey api along with spring and hibernate. However defining session factory says nullpointerexception. Can anybody help me so solve.&#xD;&#xA;&#xD;&#xA;				First Dao Class:&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationDao extends Dao{&#xD;&#xA;&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Second DaoHibernate Class:&#xD;&#xA;&#xD;&#xA;				public class AuthenticationDaoHibernate extends BaseDaoHibernate implements AuthenticationDao{&#xD;&#xA;					&#xD;&#xA;					private Log log = LogFactory.getLog(AuthenticationDaoHibernate.class);&#xD;&#xA;					private DataSource dataSource;&#xD;&#xA;&#xD;&#xA;					public void setDataSource(DataSource dataSource) {&#xD;&#xA;								this.dataSource = dataSource;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					* User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						System.out.println(""Called Me>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"");&#xD;&#xA;						&#xD;&#xA;						 List<AuthenticationVo> findlist = new ArrayList<AuthenticationVo>();&#xD;&#xA;						  &#xD;&#xA;						 final String sqlQuery = ""SELECT USER_ID, ROLE_ID from STTM_USER_MASTER"";	 		     &#xD;&#xA;							 &#xD;&#xA;						 System.out.println(""sqlQuery: ""+sqlQuery);&#xD;&#xA;							  &#xD;&#xA;							   List results = (List) getHibernateTemplate().execute(new HibernateCallback() {&#xD;&#xA;								   public Object doInHibernate(Session session) throws HibernateException {&#xD;&#xA;									   SQLQuery sq = session.createSQLQuery(sqlQuery);&#xD;&#xA;									   sq.addScalar(""USER_ID"", Hibernate.STRING);&#xD;&#xA;									   sq.addScalar(""ROLE_ID"", Hibernate.STRING);		               &#xD;&#xA;									   return sq.list();&#xD;&#xA;									   &#xD;&#xA;									 }&#xD;&#xA;							   });&#xD;&#xA;						&#xD;&#xA;						&#xD;&#xA;							  try {&#xD;&#xA;									if (results.size() > 0) {&#xD;&#xA;										Iterator itr = results.iterator();&#xD;&#xA;										while (itr.hasNext()) {&#xD;&#xA;											authenticationVo = new AuthenticationVo();&#xD;&#xA;											Object[] row = (Object[]) itr.next();	&#xD;&#xA;											authenticationVo.setUser_id((String) row[0]);&#xD;&#xA;											authenticationVo.setRole_id((String) row[1]);							&#xD;&#xA;															&#xD;&#xA;											findlist.add(authenticationVo);&#xD;&#xA;&#xD;&#xA;										}&#xD;&#xA;&#xD;&#xA;									}&#xD;&#xA;								} catch (Exception e) {&#xD;&#xA;									System.out.println(""FunctonVos error:"" + e.getMessage());&#xD;&#xA;								}&#xD;&#xA;							&#xD;&#xA;								System.out.println(""Size of User List is: ""&#xD;&#xA;										+ findlist.size());&#xD;&#xA;							 &#xD;&#xA;						&#xD;&#xA;								System.out.println(""Procedure call ended."");&#xD;&#xA;							&#xD;&#xA;							   return findlist;&#xD;&#xA;						&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Third Facade: &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationFacade extends Facade{&#xD;&#xA;					 &#xD;&#xA;				public void setAuthenticationDao(AuthenticationDao authenticationDao);&#xD;&#xA;&#xD;&#xA;				/*&#xD;&#xA;				 * User Information List&#xD;&#xA;				 */&#xD;&#xA;				public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				Forth FacadeImpl:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationFacadeImpl extends BaseFacade implements AuthenticationFacade{&#xD;&#xA;					&#xD;&#xA;					private static final Log log = LogFactory.getLog(AuthenticationFacadeImpl.class);&#xD;&#xA;					&#xD;&#xA;					private AuthenticationDao authenticationDao;&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationDao(AuthenticationDao authenticationDao) {&#xD;&#xA;						this.authenticationDao = authenticationDao;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					 * User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						return authenticationDao.userInfo(authenticationVo);&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Fifth Bo Class:&#xD;&#xA;&#xD;&#xA;				public class AuthenticationVo  extends BaseObject{&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;					private static final long serialVersionUID = 1L;&#xD;&#xA;					&#xD;&#xA;					private String user_id; &#xD;&#xA;					private String role_id;&#xD;&#xA;					&#xD;&#xA;					public AuthenticationVo() {&#xD;&#xA;						super();&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo(String user_id, String role_id) {&#xD;&#xA;						super();&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getUser_id() {&#xD;&#xA;						return user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setUser_id(String user_id) {&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getRole_id() {&#xD;&#xA;						return role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setRole_id(String role_id) {&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public int hashCode() {&#xD;&#xA;						final int prime = 31;&#xD;&#xA;						int result = 1;&#xD;&#xA;						result = prime * result + ((role_id == null) ? 0 : role_id.hashCode());&#xD;&#xA;						result = prime * result + ((user_id == null) ? 0 : user_id.hashCode());&#xD;&#xA;						return result;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public boolean equals(Object obj) {&#xD;&#xA;						if (this == obj)&#xD;&#xA;							return true;&#xD;&#xA;						if (obj == null)&#xD;&#xA;							return false;&#xD;&#xA;						if (getClass() != obj.getClass())&#xD;&#xA;							return false;&#xD;&#xA;						AuthenticationVo other = (AuthenticationVo) obj;&#xD;&#xA;						if (role_id == null) {&#xD;&#xA;							if (other.role_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!role_id.equals(other.role_id))&#xD;&#xA;							return false;&#xD;&#xA;						if (user_id == null) {&#xD;&#xA;							if (other.user_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!user_id.equals(other.user_id))&#xD;&#xA;							return false;&#xD;&#xA;						return true;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public String toString() {&#xD;&#xA;						return ""AuthenticationVo [user_id="" + user_id + "", role_id="" + role_id + ""]"";&#xD;&#xA;					} &#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				Sixth Base Action class: &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				@Path(""userService"")&#xD;&#xA;				public class UserAction extends BaseAction implements ModelDriven<Object>{&#xD;&#xA;					&#xD;&#xA;					private static final long serialVersionUID = 6173596192512987718L;&#xD;&#xA;					private final Log log = LogFactory.getLog(UserAction.class);	&#xD;&#xA;					AuthenticationVo authenticationVo = new AuthenticationVo();&#xD;&#xA;					private AuthenticationFacade authenticationFacade = null;&#xD;&#xA;					private List<AuthenticationVo> listofUsers = new ArrayList<AuthenticationVo>();&#xD;&#xA;					&#xD;&#xA;					@Override&#xD;&#xA;					public Object getModel() {&#xD;&#xA;						return authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo getAuthenticationVo() {&#xD;&#xA;						return authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationVo(AuthenticationVo authenticationVo) {&#xD;&#xA;						this.authenticationVo = authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationFacade getAuthenticationFacade() {&#xD;&#xA;						return authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationFacade(AuthenticationFacade authenticationFacade) {&#xD;&#xA;						this.authenticationFacade = authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					public List<AuthenticationVo> getListofUsers() {&#xD;&#xA;						return listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setListofUsers(List<AuthenticationVo> listofUsers) {&#xD;&#xA;						this.listofUsers = listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;					@GET&#xD;&#xA;					@Produces( MediaType.APPLICATION_JSON )&#xD;&#xA;					public String customAction(){&#xD;&#xA;						&#xD;&#xA;						&#xD;&#xA;						if (log.isDebugEnabled()) {&#xD;&#xA;							log.debug(""Entering into loadusers Method of AuthenticationAction"");&#xD;&#xA;						}&#xD;&#xA;						try {&#xD;&#xA;							listofUsers = authenticationFacade.userInfo(authenticationVo);&#xD;&#xA;						} catch (Exception e) {&#xD;&#xA;							&#xD;&#xA;							e.printStackTrace();&#xD;&#xA;						}	&#xD;&#xA;						System.out.println("">>>>>>>>>>>>>>>>>>>>>"" +listofUsers);&#xD;&#xA;								&#xD;&#xA;						return ""ENtered"";&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Seventh Webxml: &#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<web-app xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""http://java.sun.com/xml/ns/javaee"" xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"" id=""WebApp_ID"" version=""3.0"">&#xD;&#xA;				  <display-name>RestWebService</display-name>&#xD;&#xA;				  <welcome-file-list>&#xD;&#xA;					<welcome-file>index.html</welcome-file>&#xD;&#xA;					<welcome-file>index.htm</welcome-file>&#xD;&#xA;					<welcome-file>index.jsp</welcome-file>&#xD;&#xA;					<welcome-file>default.html</welcome-file>&#xD;&#xA;					<welcome-file>default.htm</welcome-file>&#xD;&#xA;					<welcome-file>default.jsp</welcome-file>&#xD;&#xA;				  </welcome-file-list>&#xD;&#xA;				  &#xD;&#xA;					<listener>&#xD;&#xA;						<listener-class>&#xD;&#xA;							org.springframework.web.context.ContextLoaderListener&#xD;&#xA;						</listener-class>&#xD;&#xA;					</listener>&#xD;&#xA;					&#xD;&#xA;				 &#xD;&#xA;					<context-param>&#xD;&#xA;						<param-name>contextConfigLocation</param-name>&#xD;&#xA;						<param-value>/WEB-INF/classes/SpringBeans.xml</param-value>&#xD;&#xA;					</context-param>&#xD;&#xA;					  &#xD;&#xA;					<servlet>&#xD;&#xA;						<servlet-name>jersey-serlvet</servlet-name>&#xD;&#xA;						<servlet-class>&#xD;&#xA;									 com.sun.jersey.spi.container.servlet.ServletContainer&#xD;&#xA;								</servlet-class>&#xD;&#xA;						 <init-param>&#xD;&#xA;							<param-name>jersey.config.server.provider.packages</param-name>&#xD;&#xA;							<param-value>com.org.restservice.welcome</param-value>&#xD;&#xA;						</init-param>&#xD;&#xA;						<load-on-startup>1</load-on-startup>&#xD;&#xA;					</servlet>&#xD;&#xA;&#xD;&#xA;					<servlet-mapping>&#xD;&#xA;						<servlet-name>jersey-serlvet</servlet-name>&#xD;&#xA;						<url-pattern>/api/*</url-pattern>&#xD;&#xA;					</servlet-mapping>&#xD;&#xA;					&#xD;&#xA;				</web-app>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				Eight Springbeans:&#xD;&#xA;&#xD;&#xA;				<beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;				xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;				xsi:schemaLocation=""http://www.springframework.org/schema/beans&#xD;&#xA;				http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"">&#xD;&#xA;						&#xD;&#xA;					<!-- Database connection using jndi properties-->&#xD;&#xA;					<import resource=""config/applicationContext-jndi.xml""/>	&#xD;&#xA;					&#xD;&#xA;					<import resource=""config/applicationContext.xml""/>&#xD;&#xA;				 &#xD;&#xA;					<!-- List and Setup -->&#xD;&#xA;					<import resource=""config/applicationContext-auth.xml""/>&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;				9th Application Context: &#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;					<bean id=""sessionFactory"" class=""org.springframework.orm.hibernate3.LocalSessionFactoryBean"">&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource""/>&#xD;&#xA;						<property name=""mappingResources"">&#xD;&#xA;							<list>&#xD;&#xA;								&#xD;&#xA;							 &#xD;&#xA;							</list>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""hibernateProperties"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""hibernate.dialect"">org.hibernate.dialect.Oracle9Dialect</prop>&#xD;&#xA;								<prop key=""hibernate.hbm2ddl.auto"">validate</prop>&#xD;&#xA;								<prop key=""hibernate.query.factory_class"">org.hibernate.hql.classic.ClassicQueryTranslatorFactory</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;					&#xD;&#xA;					<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->&#xD;&#xA;					&#xD;&#xA;					 <bean id=""transactionManager"" class=""org.springframework.orm.hibernate3.HibernateTransactionManager"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory""/>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;				   &#xD;&#xA;					<!-- Transaction template for Facade -->&#xD;&#xA;					<bean id=""txProxyTemplate"" abstract=""true""&#xD;&#xA;						  class=""org.springframework.transaction.interceptor.TransactionProxyFactoryBean"">&#xD;&#xA;						<property name=""transactionManager"">&#xD;&#xA;							<ref bean=""transactionManager""/>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""transactionAttributes"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""save*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""remove*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""*"">PROPAGATION_REQUIRED,readOnly</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- DAO bean -->&#xD;&#xA;&#xD;&#xA;					<!-- Generic DAO - can be used when doing standard CRUD -->&#xD;&#xA;					<bean id=""dao"" class=""com.org.restservice.common.BaseDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource"" />&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- Generic Facade that can be used to do basic CRUD operations on any &#xD;&#xA;						objects -->&#xD;&#xA;					<bean id=""facade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean class=""com.org.restservice.common.BaseFacade"">&#xD;&#xA;								<property name=""Dao"" ref=""dao"" />&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;				10th Extended Application Context:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;					<!-- Transaction declarations for business services. -->&#xD;&#xA;&#xD;&#xA;					<bean id=""authenticationFacade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean&#xD;&#xA;								class=""com.org.restservice.bo.authentication.AuthenticationFacadeImpl"">&#xD;&#xA;								<property name=""authenticationDao"">&#xD;&#xA;									<ref bean=""authenticationDao"" />&#xD;&#xA;								</property>&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- authenticationDao: Hibernate implementation -->&#xD;&#xA;					<bean id=""authenticationDao""&#xD;&#xA;						class=""com.org.restservice.bo.authentication.AuthenticationDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;						<property name=""dataSource"">&#xD;&#xA;							<ref bean=""dataSource"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Can anybody help me plz plz. thnx in advanced..&#xD;&#xA;&#xD;&#xA;";;
106727388;34362501;4577296;5;487cce8d-567f-4fd3-889c-75841559a4b8;2015-12-18 19:36:11.0;"[This is error image from console][1] I am trying to user jersey api along with spring and hibernate. However defining session factory says nullpointerexception. Can anybody help me so solve.&#xD;&#xA;&#xD;&#xA;				First Dao Class:&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationDao extends Dao{&#xD;&#xA;&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Second DaoHibernate Class:&#xD;&#xA;&#xD;&#xA;				public class AuthenticationDaoHibernate extends BaseDaoHibernate implements AuthenticationDao{&#xD;&#xA;					&#xD;&#xA;					private Log log = LogFactory.getLog(AuthenticationDaoHibernate.class);&#xD;&#xA;					private DataSource dataSource;&#xD;&#xA;&#xD;&#xA;					public void setDataSource(DataSource dataSource) {&#xD;&#xA;								this.dataSource = dataSource;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					* User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						System.out.println(""Called Me>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"");&#xD;&#xA;						&#xD;&#xA;						 List<AuthenticationVo> findlist = new ArrayList<AuthenticationVo>();&#xD;&#xA;						  &#xD;&#xA;						 final String sqlQuery = ""SELECT USER_ID, ROLE_ID from STTM_USER_MASTER"";	 		     &#xD;&#xA;							 &#xD;&#xA;						 System.out.println(""sqlQuery: ""+sqlQuery);&#xD;&#xA;							  &#xD;&#xA;							   List results = (List) getHibernateTemplate().execute(new HibernateCallback() {&#xD;&#xA;								   public Object doInHibernate(Session session) throws HibernateException {&#xD;&#xA;									   SQLQuery sq = session.createSQLQuery(sqlQuery);&#xD;&#xA;									   sq.addScalar(""USER_ID"", Hibernate.STRING);&#xD;&#xA;									   sq.addScalar(""ROLE_ID"", Hibernate.STRING);		               &#xD;&#xA;									   return sq.list();&#xD;&#xA;									   &#xD;&#xA;									 }&#xD;&#xA;							   });&#xD;&#xA;						&#xD;&#xA;						&#xD;&#xA;							  try {&#xD;&#xA;									if (results.size() > 0) {&#xD;&#xA;										Iterator itr = results.iterator();&#xD;&#xA;										while (itr.hasNext()) {&#xD;&#xA;											authenticationVo = new AuthenticationVo();&#xD;&#xA;											Object[] row = (Object[]) itr.next();	&#xD;&#xA;											authenticationVo.setUser_id((String) row[0]);&#xD;&#xA;											authenticationVo.setRole_id((String) row[1]);							&#xD;&#xA;															&#xD;&#xA;											findlist.add(authenticationVo);&#xD;&#xA;&#xD;&#xA;										}&#xD;&#xA;&#xD;&#xA;									}&#xD;&#xA;								} catch (Exception e) {&#xD;&#xA;									System.out.println(""FunctonVos error:"" + e.getMessage());&#xD;&#xA;								}&#xD;&#xA;							&#xD;&#xA;								System.out.println(""Size of User List is: ""&#xD;&#xA;										+ findlist.size());&#xD;&#xA;							 &#xD;&#xA;						&#xD;&#xA;								System.out.println(""Procedure call ended."");&#xD;&#xA;							&#xD;&#xA;							   return findlist;&#xD;&#xA;						&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Third Facade: &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationFacade extends Facade{&#xD;&#xA;					 &#xD;&#xA;				public void setAuthenticationDao(AuthenticationDao authenticationDao);&#xD;&#xA;&#xD;&#xA;				/*&#xD;&#xA;				 * User Information List&#xD;&#xA;				 */&#xD;&#xA;				public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				Forth FacadeImpl:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationFacadeImpl extends BaseFacade implements AuthenticationFacade{&#xD;&#xA;					&#xD;&#xA;					private static final Log log = LogFactory.getLog(AuthenticationFacadeImpl.class);&#xD;&#xA;					&#xD;&#xA;					private AuthenticationDao authenticationDao;&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationDao(AuthenticationDao authenticationDao) {&#xD;&#xA;						this.authenticationDao = authenticationDao;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					 * User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						return authenticationDao.userInfo(authenticationVo);&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Fifth Bo Class:&#xD;&#xA;&#xD;&#xA;				public class AuthenticationVo  extends BaseObject{&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;					private static final long serialVersionUID = 1L;&#xD;&#xA;					&#xD;&#xA;					private String user_id; &#xD;&#xA;					private String role_id;&#xD;&#xA;					&#xD;&#xA;					public AuthenticationVo() {&#xD;&#xA;						super();&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo(String user_id, String role_id) {&#xD;&#xA;						super();&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getUser_id() {&#xD;&#xA;						return user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setUser_id(String user_id) {&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getRole_id() {&#xD;&#xA;						return role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setRole_id(String role_id) {&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public int hashCode() {&#xD;&#xA;						final int prime = 31;&#xD;&#xA;						int result = 1;&#xD;&#xA;						result = prime * result + ((role_id == null) ? 0 : role_id.hashCode());&#xD;&#xA;						result = prime * result + ((user_id == null) ? 0 : user_id.hashCode());&#xD;&#xA;						return result;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public boolean equals(Object obj) {&#xD;&#xA;						if (this == obj)&#xD;&#xA;							return true;&#xD;&#xA;						if (obj == null)&#xD;&#xA;							return false;&#xD;&#xA;						if (getClass() != obj.getClass())&#xD;&#xA;							return false;&#xD;&#xA;						AuthenticationVo other = (AuthenticationVo) obj;&#xD;&#xA;						if (role_id == null) {&#xD;&#xA;							if (other.role_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!role_id.equals(other.role_id))&#xD;&#xA;							return false;&#xD;&#xA;						if (user_id == null) {&#xD;&#xA;							if (other.user_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!user_id.equals(other.user_id))&#xD;&#xA;							return false;&#xD;&#xA;						return true;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public String toString() {&#xD;&#xA;						return ""AuthenticationVo [user_id="" + user_id + "", role_id="" + role_id + ""]"";&#xD;&#xA;					} &#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				Sixth Base Action class: &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				@Path(""userService"")&#xD;&#xA;				public class UserAction extends BaseAction implements ModelDriven<Object>{&#xD;&#xA;					&#xD;&#xA;					private static final long serialVersionUID = 6173596192512987718L;&#xD;&#xA;					private final Log log = LogFactory.getLog(UserAction.class);	&#xD;&#xA;					AuthenticationVo authenticationVo = new AuthenticationVo();&#xD;&#xA;					private AuthenticationFacade authenticationFacade = null;&#xD;&#xA;					private List<AuthenticationVo> listofUsers = new ArrayList<AuthenticationVo>();&#xD;&#xA;					&#xD;&#xA;					@Override&#xD;&#xA;					public Object getModel() {&#xD;&#xA;						return authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo getAuthenticationVo() {&#xD;&#xA;						return authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationVo(AuthenticationVo authenticationVo) {&#xD;&#xA;						this.authenticationVo = authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationFacade getAuthenticationFacade() {&#xD;&#xA;						return authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationFacade(AuthenticationFacade authenticationFacade) {&#xD;&#xA;						this.authenticationFacade = authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					public List<AuthenticationVo> getListofUsers() {&#xD;&#xA;						return listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setListofUsers(List<AuthenticationVo> listofUsers) {&#xD;&#xA;						this.listofUsers = listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;					@GET&#xD;&#xA;					@Produces( MediaType.APPLICATION_JSON )&#xD;&#xA;					public String customAction(){&#xD;&#xA;						&#xD;&#xA;						&#xD;&#xA;						if (log.isDebugEnabled()) {&#xD;&#xA;							log.debug(""Entering into loadusers Method of AuthenticationAction"");&#xD;&#xA;						}&#xD;&#xA;						try {&#xD;&#xA;							listofUsers = authenticationFacade.userInfo(authenticationVo);&#xD;&#xA;						} catch (Exception e) {&#xD;&#xA;							&#xD;&#xA;							e.printStackTrace();&#xD;&#xA;						}	&#xD;&#xA;						System.out.println("">>>>>>>>>>>>>>>>>>>>>"" +listofUsers);&#xD;&#xA;								&#xD;&#xA;						return ""ENtered"";&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Seventh Webxml: &#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<web-app xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""http://java.sun.com/xml/ns/javaee"" xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"" id=""WebApp_ID"" version=""3.0"">&#xD;&#xA;				  <display-name>RestWebService</display-name>&#xD;&#xA;				  <welcome-file-list>&#xD;&#xA;					<welcome-file>index.html</welcome-file>&#xD;&#xA;					<welcome-file>index.htm</welcome-file>&#xD;&#xA;					<welcome-file>index.jsp</welcome-file>&#xD;&#xA;					<welcome-file>default.html</welcome-file>&#xD;&#xA;					<welcome-file>default.htm</welcome-file>&#xD;&#xA;					<welcome-file>default.jsp</welcome-file>&#xD;&#xA;				  </welcome-file-list>&#xD;&#xA;				  &#xD;&#xA;					<listener>&#xD;&#xA;						<listener-class>&#xD;&#xA;							org.springframework.web.context.ContextLoaderListener&#xD;&#xA;						</listener-class>&#xD;&#xA;					</listener>&#xD;&#xA;					&#xD;&#xA;				 &#xD;&#xA;					<context-param>&#xD;&#xA;						<param-name>contextConfigLocation</param-name>&#xD;&#xA;						<param-value>/WEB-INF/classes/SpringBeans.xml</param-value>&#xD;&#xA;					</context-param>&#xD;&#xA;					  &#xD;&#xA;					<servlet>&#xD;&#xA;						<servlet-name>jersey-serlvet</servlet-name>&#xD;&#xA;						<servlet-class>&#xD;&#xA;									 com.sun.jersey.spi.container.servlet.ServletContainer&#xD;&#xA;								</servlet-class>&#xD;&#xA;						 <init-param>&#xD;&#xA;							<param-name>jersey.config.server.provider.packages</param-name>&#xD;&#xA;							<param-value>com.org.restservice.welcome</param-value>&#xD;&#xA;						</init-param>&#xD;&#xA;						<load-on-startup>1</load-on-startup>&#xD;&#xA;					</servlet>&#xD;&#xA;&#xD;&#xA;					<servlet-mapping>&#xD;&#xA;						<servlet-name>jersey-serlvet</servlet-name>&#xD;&#xA;						<url-pattern>/api/*</url-pattern>&#xD;&#xA;					</servlet-mapping>&#xD;&#xA;					&#xD;&#xA;				</web-app>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				Eight Springbeans:&#xD;&#xA;&#xD;&#xA;				<beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;				xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;				xsi:schemaLocation=""http://www.springframework.org/schema/beans&#xD;&#xA;				http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"">&#xD;&#xA;						&#xD;&#xA;					<!-- Database connection using jndi properties-->&#xD;&#xA;					<import resource=""config/applicationContext-jndi.xml""/>	&#xD;&#xA;					&#xD;&#xA;					<import resource=""config/applicationContext.xml""/>&#xD;&#xA;				 &#xD;&#xA;					<!-- List and Setup -->&#xD;&#xA;					<import resource=""config/applicationContext-auth.xml""/>&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;				9th Application Context: &#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;					<bean id=""sessionFactory"" class=""org.springframework.orm.hibernate3.LocalSessionFactoryBean"">&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource""/>&#xD;&#xA;						<property name=""mappingResources"">&#xD;&#xA;							<list>&#xD;&#xA;								&#xD;&#xA;							 &#xD;&#xA;							</list>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""hibernateProperties"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""hibernate.dialect"">org.hibernate.dialect.Oracle9Dialect</prop>&#xD;&#xA;								<prop key=""hibernate.hbm2ddl.auto"">validate</prop>&#xD;&#xA;								<prop key=""hibernate.query.factory_class"">org.hibernate.hql.classic.ClassicQueryTranslatorFactory</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;					&#xD;&#xA;					<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->&#xD;&#xA;					&#xD;&#xA;					 <bean id=""transactionManager"" class=""org.springframework.orm.hibernate3.HibernateTransactionManager"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory""/>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;				   &#xD;&#xA;					<!-- Transaction template for Facade -->&#xD;&#xA;					<bean id=""txProxyTemplate"" abstract=""true""&#xD;&#xA;						  class=""org.springframework.transaction.interceptor.TransactionProxyFactoryBean"">&#xD;&#xA;						<property name=""transactionManager"">&#xD;&#xA;							<ref bean=""transactionManager""/>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""transactionAttributes"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""save*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""remove*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""*"">PROPAGATION_REQUIRED,readOnly</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- DAO bean -->&#xD;&#xA;&#xD;&#xA;					<!-- Generic DAO - can be used when doing standard CRUD -->&#xD;&#xA;					<bean id=""dao"" class=""com.org.restservice.common.BaseDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource"" />&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- Generic Facade that can be used to do basic CRUD operations on any &#xD;&#xA;						objects -->&#xD;&#xA;					<bean id=""facade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean class=""com.org.restservice.common.BaseFacade"">&#xD;&#xA;								<property name=""Dao"" ref=""dao"" />&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;				10th Extended Application Context:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;					<!-- Transaction declarations for business services. -->&#xD;&#xA;&#xD;&#xA;					<bean id=""authenticationFacade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean&#xD;&#xA;								class=""com.org.restservice.bo.authentication.AuthenticationFacadeImpl"">&#xD;&#xA;								<property name=""authenticationDao"">&#xD;&#xA;									<ref bean=""authenticationDao"" />&#xD;&#xA;								</property>&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- authenticationDao: Hibernate implementation -->&#xD;&#xA;					<bean id=""authenticationDao""&#xD;&#xA;						class=""com.org.restservice.bo.authentication.AuthenticationDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;						<property name=""dataSource"">&#xD;&#xA;							<ref bean=""dataSource"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Can anybody help me plz plz. thnx in advanced..&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/jHS9n.jpg";;added 76 characters in body
106745432;34362501;4577296;5;1c95207a-4ec7-48d6-b027-19eda82344cf;2015-12-19 04:15:04.0;"[This is error image from console][1] I am trying to user jersey api along with spring and hibernate. However defining session factory says nullpointerexception. Can anybody help me to solve.&#xD;&#xA;&#xD;&#xA;				First Dao Class:&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationDao extends Dao{&#xD;&#xA;&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Second DaoHibernate Class:&#xD;&#xA;&#xD;&#xA;				public class AuthenticationDaoHibernate extends BaseDaoHibernate implements AuthenticationDao{&#xD;&#xA;					&#xD;&#xA;					private Log log = LogFactory.getLog(AuthenticationDaoHibernate.class);&#xD;&#xA;					private DataSource dataSource;&#xD;&#xA;&#xD;&#xA;					public void setDataSource(DataSource dataSource) {&#xD;&#xA;								this.dataSource = dataSource;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					* User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						System.out.println(""Called Me>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"");&#xD;&#xA;						&#xD;&#xA;						 List<AuthenticationVo> findlist = new ArrayList<AuthenticationVo>();&#xD;&#xA;						  &#xD;&#xA;						 final String sqlQuery = ""SELECT USER_ID, ROLE_ID from STTM_USER_MASTER"";	 		     &#xD;&#xA;							 &#xD;&#xA;						 System.out.println(""sqlQuery: ""+sqlQuery);&#xD;&#xA;							  &#xD;&#xA;							   List results = (List) getHibernateTemplate().execute(new HibernateCallback() {&#xD;&#xA;								   public Object doInHibernate(Session session) throws HibernateException {&#xD;&#xA;									   SQLQuery sq = session.createSQLQuery(sqlQuery);&#xD;&#xA;									   sq.addScalar(""USER_ID"", Hibernate.STRING);&#xD;&#xA;									   sq.addScalar(""ROLE_ID"", Hibernate.STRING);		               &#xD;&#xA;									   return sq.list();&#xD;&#xA;									   &#xD;&#xA;									 }&#xD;&#xA;							   });&#xD;&#xA;						&#xD;&#xA;						&#xD;&#xA;							  try {&#xD;&#xA;									if (results.size() > 0) {&#xD;&#xA;										Iterator itr = results.iterator();&#xD;&#xA;										while (itr.hasNext()) {&#xD;&#xA;											authenticationVo = new AuthenticationVo();&#xD;&#xA;											Object[] row = (Object[]) itr.next();	&#xD;&#xA;											authenticationVo.setUser_id((String) row[0]);&#xD;&#xA;											authenticationVo.setRole_id((String) row[1]);							&#xD;&#xA;															&#xD;&#xA;											findlist.add(authenticationVo);&#xD;&#xA;&#xD;&#xA;										}&#xD;&#xA;&#xD;&#xA;									}&#xD;&#xA;								} catch (Exception e) {&#xD;&#xA;									System.out.println(""FunctonVos error:"" + e.getMessage());&#xD;&#xA;								}&#xD;&#xA;							&#xD;&#xA;								System.out.println(""Size of User List is: ""&#xD;&#xA;										+ findlist.size());&#xD;&#xA;							 &#xD;&#xA;						&#xD;&#xA;								System.out.println(""Procedure call ended."");&#xD;&#xA;							&#xD;&#xA;							   return findlist;&#xD;&#xA;						&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Third Facade: &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationFacade extends Facade{&#xD;&#xA;					 &#xD;&#xA;				public void setAuthenticationDao(AuthenticationDao authenticationDao);&#xD;&#xA;&#xD;&#xA;				/*&#xD;&#xA;				 * User Information List&#xD;&#xA;				 */&#xD;&#xA;				public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				Forth FacadeImpl:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationFacadeImpl extends BaseFacade implements AuthenticationFacade{&#xD;&#xA;					&#xD;&#xA;					private static final Log log = LogFactory.getLog(AuthenticationFacadeImpl.class);&#xD;&#xA;					&#xD;&#xA;					private AuthenticationDao authenticationDao;&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationDao(AuthenticationDao authenticationDao) {&#xD;&#xA;						this.authenticationDao = authenticationDao;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					 * User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						return authenticationDao.userInfo(authenticationVo);&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Fifth Bo Class:&#xD;&#xA;&#xD;&#xA;				public class AuthenticationVo  extends BaseObject{&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;					private static final long serialVersionUID = 1L;&#xD;&#xA;					&#xD;&#xA;					private String user_id; &#xD;&#xA;					private String role_id;&#xD;&#xA;					&#xD;&#xA;					public AuthenticationVo() {&#xD;&#xA;						super();&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo(String user_id, String role_id) {&#xD;&#xA;						super();&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getUser_id() {&#xD;&#xA;						return user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setUser_id(String user_id) {&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getRole_id() {&#xD;&#xA;						return role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setRole_id(String role_id) {&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public int hashCode() {&#xD;&#xA;						final int prime = 31;&#xD;&#xA;						int result = 1;&#xD;&#xA;						result = prime * result + ((role_id == null) ? 0 : role_id.hashCode());&#xD;&#xA;						result = prime * result + ((user_id == null) ? 0 : user_id.hashCode());&#xD;&#xA;						return result;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public boolean equals(Object obj) {&#xD;&#xA;						if (this == obj)&#xD;&#xA;							return true;&#xD;&#xA;						if (obj == null)&#xD;&#xA;							return false;&#xD;&#xA;						if (getClass() != obj.getClass())&#xD;&#xA;							return false;&#xD;&#xA;						AuthenticationVo other = (AuthenticationVo) obj;&#xD;&#xA;						if (role_id == null) {&#xD;&#xA;							if (other.role_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!role_id.equals(other.role_id))&#xD;&#xA;							return false;&#xD;&#xA;						if (user_id == null) {&#xD;&#xA;							if (other.user_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!user_id.equals(other.user_id))&#xD;&#xA;							return false;&#xD;&#xA;						return true;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public String toString() {&#xD;&#xA;						return ""AuthenticationVo [user_id="" + user_id + "", role_id="" + role_id + ""]"";&#xD;&#xA;					} &#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				Sixth Base Action class: &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				@Path(""userService"")&#xD;&#xA;				public class UserAction extends BaseAction implements ModelDriven<Object>{&#xD;&#xA;					&#xD;&#xA;					private static final long serialVersionUID = 6173596192512987718L;&#xD;&#xA;					private final Log log = LogFactory.getLog(UserAction.class);	&#xD;&#xA;					AuthenticationVo authenticationVo = new AuthenticationVo();&#xD;&#xA;					private AuthenticationFacade authenticationFacade = null;&#xD;&#xA;					private List<AuthenticationVo> listofUsers = new ArrayList<AuthenticationVo>();&#xD;&#xA;					&#xD;&#xA;					@Override&#xD;&#xA;					public Object getModel() {&#xD;&#xA;						return authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo getAuthenticationVo() {&#xD;&#xA;						return authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationVo(AuthenticationVo authenticationVo) {&#xD;&#xA;						this.authenticationVo = authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationFacade getAuthenticationFacade() {&#xD;&#xA;						return authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationFacade(AuthenticationFacade authenticationFacade) {&#xD;&#xA;						this.authenticationFacade = authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					public List<AuthenticationVo> getListofUsers() {&#xD;&#xA;						return listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setListofUsers(List<AuthenticationVo> listofUsers) {&#xD;&#xA;						this.listofUsers = listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;					@GET&#xD;&#xA;					@Produces( MediaType.APPLICATION_JSON )&#xD;&#xA;					public String customAction(){&#xD;&#xA;						&#xD;&#xA;						&#xD;&#xA;						if (log.isDebugEnabled()) {&#xD;&#xA;							log.debug(""Entering into loadusers Method of AuthenticationAction"");&#xD;&#xA;						}&#xD;&#xA;						try {&#xD;&#xA;							listofUsers = authenticationFacade.userInfo(authenticationVo);&#xD;&#xA;						} catch (Exception e) {&#xD;&#xA;							&#xD;&#xA;							e.printStackTrace();&#xD;&#xA;						}	&#xD;&#xA;						System.out.println("">>>>>>>>>>>>>>>>>>>>>"" +listofUsers);&#xD;&#xA;								&#xD;&#xA;						return ""ENtered"";&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Seventh Webxml: &#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<web-app xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""http://java.sun.com/xml/ns/javaee"" xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"" id=""WebApp_ID"" version=""3.0"">&#xD;&#xA;				  <display-name>RestWebService</display-name>&#xD;&#xA;				  <welcome-file-list>&#xD;&#xA;					<welcome-file>index.html</welcome-file>&#xD;&#xA;					<welcome-file>index.htm</welcome-file>&#xD;&#xA;					<welcome-file>index.jsp</welcome-file>&#xD;&#xA;					<welcome-file>default.html</welcome-file>&#xD;&#xA;					<welcome-file>default.htm</welcome-file>&#xD;&#xA;					<welcome-file>default.jsp</welcome-file>&#xD;&#xA;				  </welcome-file-list>&#xD;&#xA;				  &#xD;&#xA;					<listener>&#xD;&#xA;						<listener-class>&#xD;&#xA;							org.springframework.web.context.ContextLoaderListener&#xD;&#xA;						</listener-class>&#xD;&#xA;					</listener>&#xD;&#xA;					&#xD;&#xA;				 &#xD;&#xA;					<context-param>&#xD;&#xA;						<param-name>contextConfigLocation</param-name>&#xD;&#xA;						<param-value>/WEB-INF/classes/SpringBeans.xml</param-value>&#xD;&#xA;					</context-param>&#xD;&#xA;					  &#xD;&#xA;					<servlet>&#xD;&#xA;						<servlet-name>jersey-serlvet</servlet-name>&#xD;&#xA;						<servlet-class>&#xD;&#xA;									 com.sun.jersey.spi.container.servlet.ServletContainer&#xD;&#xA;								</servlet-class>&#xD;&#xA;						 <init-param>&#xD;&#xA;							<param-name>jersey.config.server.provider.packages</param-name>&#xD;&#xA;							<param-value>com.org.restservice.welcome</param-value>&#xD;&#xA;						</init-param>&#xD;&#xA;						<load-on-startup>1</load-on-startup>&#xD;&#xA;					</servlet>&#xD;&#xA;&#xD;&#xA;					<servlet-mapping>&#xD;&#xA;						<servlet-name>jersey-serlvet</servlet-name>&#xD;&#xA;						<url-pattern>/api/*</url-pattern>&#xD;&#xA;					</servlet-mapping>&#xD;&#xA;					&#xD;&#xA;				</web-app>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				Eight Springbeans:&#xD;&#xA;&#xD;&#xA;				<beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;				xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;				xsi:schemaLocation=""http://www.springframework.org/schema/beans&#xD;&#xA;				http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"">&#xD;&#xA;						&#xD;&#xA;		&#xD;&#xA;					<import resource=""config/applicationContext-jndi.xml""/>	&#xD;&#xA;					&#xD;&#xA;					<import resource=""config/applicationContext.xml""/>&#xD;&#xA;				 					&#xD;&#xA;					<import resource=""config/applicationContext-auth.xml""/>&#xD;&#xA;					&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;				9th Application Context: &#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;					<bean id=""sessionFactory"" class=""org.springframework.orm.hibernate3.LocalSessionFactoryBean"">&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource""/>&#xD;&#xA;						<property name=""mappingResources"">&#xD;&#xA;							<list>&#xD;&#xA;								&#xD;&#xA;							 &#xD;&#xA;							</list>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""hibernateProperties"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""hibernate.dialect"">org.hibernate.dialect.Oracle9Dialect</prop>&#xD;&#xA;								<prop key=""hibernate.hbm2ddl.auto"">validate</prop>&#xD;&#xA;								<prop key=""hibernate.query.factory_class"">org.hibernate.hql.classic.ClassicQueryTranslatorFactory</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;					&#xD;&#xA;					 <bean id=""transactionManager"" class=""org.springframework.orm.hibernate3.HibernateTransactionManager"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory""/>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;				   &#xD;&#xA;					<!-- Transaction template for Facade -->&#xD;&#xA;					<bean id=""txProxyTemplate"" abstract=""true""&#xD;&#xA;						  class=""org.springframework.transaction.interceptor.TransactionProxyFactoryBean"">&#xD;&#xA;						<property name=""transactionManager"">&#xD;&#xA;							<ref bean=""transactionManager""/>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""transactionAttributes"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""save*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""remove*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""*"">PROPAGATION_REQUIRED,readOnly</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- DAO bean -->&#xD;&#xA;&#xD;&#xA;					<!-- Generic DAO - can be used when doing standard CRUD -->&#xD;&#xA;					<bean id=""dao"" class=""com.org.restservice.common.BaseDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource"" />&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- Generic Facade that can be used to do basic CRUD operations on any &#xD;&#xA;						objects -->&#xD;&#xA;					<bean id=""facade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean class=""com.org.restservice.common.BaseFacade"">&#xD;&#xA;								<property name=""Dao"" ref=""dao"" />&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;				10th Extended Application Context:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;					<bean id=""authenticationFacade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean&#xD;&#xA;								class=""com.org.restservice.bo.authentication.AuthenticationFacadeImpl"">&#xD;&#xA;								<property name=""authenticationDao"">&#xD;&#xA;									<ref bean=""authenticationDao"" />&#xD;&#xA;								</property>&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- authenticationDao: Hibernate implementation -->&#xD;&#xA;					<bean id=""authenticationDao""&#xD;&#xA;						class=""com.org.restservice.bo.authentication.AuthenticationDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;						<property name=""dataSource"">&#xD;&#xA;							<ref bean=""dataSource"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Can anybody help me plz plz. thnx in advanced..&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/jHS9n.jpg";;deleted 245 characters in body
106797701;34362501;1566990;5;533b337c-8137-4ff4-9b44-7e74ea785d45;2015-12-20 04:50:02.0;"[This is the error image from the console.][1]&#xD;&#xA;&#xD;&#xA;I am trying to use the Jersey API along with Spring and Hibernate. However, defining session factory says NullPointerException. Can anybody help me to solve this?&#xD;&#xA;&#xD;&#xA;				First Dao Class:&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationDao extends Dao{&#xD;&#xA;&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Second DaoHibernate Class:&#xD;&#xA;&#xD;&#xA;				public class AuthenticationDaoHibernate extends BaseDaoHibernate implements AuthenticationDao{&#xD;&#xA;					&#xD;&#xA;					private Log log = LogFactory.getLog(AuthenticationDaoHibernate.class);&#xD;&#xA;					private DataSource dataSource;&#xD;&#xA;&#xD;&#xA;					public void setDataSource(DataSource dataSource) {&#xD;&#xA;								this.dataSource = dataSource;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					* User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						System.out.println(""Called Me>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"");&#xD;&#xA;						&#xD;&#xA;						 List<AuthenticationVo> findlist = new ArrayList<AuthenticationVo>();&#xD;&#xA;						  &#xD;&#xA;						 final String sqlQuery = ""SELECT USER_ID, ROLE_ID from STTM_USER_MASTER"";	 		     &#xD;&#xA;							 &#xD;&#xA;						 System.out.println(""sqlQuery: ""+sqlQuery);&#xD;&#xA;							  &#xD;&#xA;							   List results = (List) getHibernateTemplate().execute(new HibernateCallback() {&#xD;&#xA;								   public Object doInHibernate(Session session) throws HibernateException {&#xD;&#xA;									   SQLQuery sq = session.createSQLQuery(sqlQuery);&#xD;&#xA;									   sq.addScalar(""USER_ID"", Hibernate.STRING);&#xD;&#xA;									   sq.addScalar(""ROLE_ID"", Hibernate.STRING);		               &#xD;&#xA;									   return sq.list();&#xD;&#xA;									   &#xD;&#xA;									 }&#xD;&#xA;							   });&#xD;&#xA;						&#xD;&#xA;						&#xD;&#xA;							  try {&#xD;&#xA;									if (results.size() > 0) {&#xD;&#xA;										Iterator itr = results.iterator();&#xD;&#xA;										while (itr.hasNext()) {&#xD;&#xA;											authenticationVo = new AuthenticationVo();&#xD;&#xA;											Object[] row = (Object[]) itr.next();	&#xD;&#xA;											authenticationVo.setUser_id((String) row[0]);&#xD;&#xA;											authenticationVo.setRole_id((String) row[1]);							&#xD;&#xA;															&#xD;&#xA;											findlist.add(authenticationVo);&#xD;&#xA;&#xD;&#xA;										}&#xD;&#xA;&#xD;&#xA;									}&#xD;&#xA;								} catch (Exception e) {&#xD;&#xA;									System.out.println(""FunctonVos error:"" + e.getMessage());&#xD;&#xA;								}&#xD;&#xA;							&#xD;&#xA;								System.out.println(""Size of User List is: ""&#xD;&#xA;										+ findlist.size());&#xD;&#xA;							 &#xD;&#xA;						&#xD;&#xA;								System.out.println(""Procedure call ended."");&#xD;&#xA;							&#xD;&#xA;							   return findlist;&#xD;&#xA;						&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Third Facade: &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationFacade extends Facade{&#xD;&#xA;					 &#xD;&#xA;				public void setAuthenticationDao(AuthenticationDao authenticationDao);&#xD;&#xA;&#xD;&#xA;				/*&#xD;&#xA;				 * User Information List&#xD;&#xA;				 */&#xD;&#xA;				public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				Forth FacadeImpl:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationFacadeImpl extends BaseFacade implements AuthenticationFacade{&#xD;&#xA;					&#xD;&#xA;					private static final Log log = LogFactory.getLog(AuthenticationFacadeImpl.class);&#xD;&#xA;					&#xD;&#xA;					private AuthenticationDao authenticationDao;&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationDao(AuthenticationDao authenticationDao) {&#xD;&#xA;						this.authenticationDao = authenticationDao;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					 * User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						return authenticationDao.userInfo(authenticationVo);&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Fifth Bo Class:&#xD;&#xA;&#xD;&#xA;				public class AuthenticationVo  extends BaseObject{&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;					private static final long serialVersionUID = 1L;&#xD;&#xA;					&#xD;&#xA;					private String user_id; &#xD;&#xA;					private String role_id;&#xD;&#xA;					&#xD;&#xA;					public AuthenticationVo() {&#xD;&#xA;						super();&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo(String user_id, String role_id) {&#xD;&#xA;						super();&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getUser_id() {&#xD;&#xA;						return user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setUser_id(String user_id) {&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getRole_id() {&#xD;&#xA;						return role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setRole_id(String role_id) {&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public int hashCode() {&#xD;&#xA;						final int prime = 31;&#xD;&#xA;						int result = 1;&#xD;&#xA;						result = prime * result + ((role_id == null) ? 0 : role_id.hashCode());&#xD;&#xA;						result = prime * result + ((user_id == null) ? 0 : user_id.hashCode());&#xD;&#xA;						return result;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public boolean equals(Object obj) {&#xD;&#xA;						if (this == obj)&#xD;&#xA;							return true;&#xD;&#xA;						if (obj == null)&#xD;&#xA;							return false;&#xD;&#xA;						if (getClass() != obj.getClass())&#xD;&#xA;							return false;&#xD;&#xA;						AuthenticationVo other = (AuthenticationVo) obj;&#xD;&#xA;						if (role_id == null) {&#xD;&#xA;							if (other.role_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!role_id.equals(other.role_id))&#xD;&#xA;							return false;&#xD;&#xA;						if (user_id == null) {&#xD;&#xA;							if (other.user_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!user_id.equals(other.user_id))&#xD;&#xA;							return false;&#xD;&#xA;						return true;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public String toString() {&#xD;&#xA;						return ""AuthenticationVo [user_id="" + user_id + "", role_id="" + role_id + ""]"";&#xD;&#xA;					} &#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				Sixth Base Action class: &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				@Path(""userService"")&#xD;&#xA;				public class UserAction extends BaseAction implements ModelDriven<Object>{&#xD;&#xA;					&#xD;&#xA;					private static final long serialVersionUID = 6173596192512987718L;&#xD;&#xA;					private final Log log = LogFactory.getLog(UserAction.class);	&#xD;&#xA;					AuthenticationVo authenticationVo = new AuthenticationVo();&#xD;&#xA;					private AuthenticationFacade authenticationFacade = null;&#xD;&#xA;					private List<AuthenticationVo> listofUsers = new ArrayList<AuthenticationVo>();&#xD;&#xA;					&#xD;&#xA;					@Override&#xD;&#xA;					public Object getModel() {&#xD;&#xA;						return authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo getAuthenticationVo() {&#xD;&#xA;						return authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationVo(AuthenticationVo authenticationVo) {&#xD;&#xA;						this.authenticationVo = authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationFacade getAuthenticationFacade() {&#xD;&#xA;						return authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationFacade(AuthenticationFacade authenticationFacade) {&#xD;&#xA;						this.authenticationFacade = authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					public List<AuthenticationVo> getListofUsers() {&#xD;&#xA;						return listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setListofUsers(List<AuthenticationVo> listofUsers) {&#xD;&#xA;						this.listofUsers = listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;					@GET&#xD;&#xA;					@Produces( MediaType.APPLICATION_JSON )&#xD;&#xA;					public String customAction(){&#xD;&#xA;						&#xD;&#xA;						&#xD;&#xA;						if (log.isDebugEnabled()) {&#xD;&#xA;							log.debug(""Entering into loadusers Method of AuthenticationAction"");&#xD;&#xA;						}&#xD;&#xA;						try {&#xD;&#xA;							listofUsers = authenticationFacade.userInfo(authenticationVo);&#xD;&#xA;						} catch (Exception e) {&#xD;&#xA;							&#xD;&#xA;							e.printStackTrace();&#xD;&#xA;						}	&#xD;&#xA;						System.out.println("">>>>>>>>>>>>>>>>>>>>>"" +listofUsers);&#xD;&#xA;								&#xD;&#xA;						return ""ENtered"";&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				Seventh Webxml: &#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<web-app xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""http://java.sun.com/xml/ns/javaee"" xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"" id=""WebApp_ID"" version=""3.0"">&#xD;&#xA;				  <display-name>RestWebService</display-name>&#xD;&#xA;				  <welcome-file-list>&#xD;&#xA;					<welcome-file>index.html</welcome-file>&#xD;&#xA;					<welcome-file>index.htm</welcome-file>&#xD;&#xA;					<welcome-file>index.jsp</welcome-file>&#xD;&#xA;					<welcome-file>default.html</welcome-file>&#xD;&#xA;					<welcome-file>default.htm</welcome-file>&#xD;&#xA;					<welcome-file>default.jsp</welcome-file>&#xD;&#xA;				  </welcome-file-list>&#xD;&#xA;				  &#xD;&#xA;					<listener>&#xD;&#xA;						<listener-class>&#xD;&#xA;							org.springframework.web.context.ContextLoaderListener&#xD;&#xA;						</listener-class>&#xD;&#xA;					</listener>&#xD;&#xA;					&#xD;&#xA;				 &#xD;&#xA;					<context-param>&#xD;&#xA;						<param-name>contextConfigLocation</param-name>&#xD;&#xA;						<param-value>/WEB-INF/classes/SpringBeans.xml</param-value>&#xD;&#xA;					</context-param>&#xD;&#xA;					  &#xD;&#xA;					<servlet>&#xD;&#xA;						<servlet-name>jersey-serlvet</servlet-name>&#xD;&#xA;						<servlet-class>&#xD;&#xA;									 com.sun.jersey.spi.container.servlet.ServletContainer&#xD;&#xA;								</servlet-class>&#xD;&#xA;						 <init-param>&#xD;&#xA;							<param-name>jersey.config.server.provider.packages</param-name>&#xD;&#xA;							<param-value>com.org.restservice.welcome</param-value>&#xD;&#xA;						</init-param>&#xD;&#xA;						<load-on-startup>1</load-on-startup>&#xD;&#xA;					</servlet>&#xD;&#xA;&#xD;&#xA;					<servlet-mapping>&#xD;&#xA;						<servlet-name>jersey-serlvet</servlet-name>&#xD;&#xA;						<url-pattern>/api/*</url-pattern>&#xD;&#xA;					</servlet-mapping>&#xD;&#xA;					&#xD;&#xA;				</web-app>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				Eight Springbeans:&#xD;&#xA;&#xD;&#xA;				<beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;				xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;				xsi:schemaLocation=""http://www.springframework.org/schema/beans&#xD;&#xA;				http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"">&#xD;&#xA;						&#xD;&#xA;		&#xD;&#xA;					<import resource=""config/applicationContext-jndi.xml""/>	&#xD;&#xA;					&#xD;&#xA;					<import resource=""config/applicationContext.xml""/>&#xD;&#xA;				 					&#xD;&#xA;					<import resource=""config/applicationContext-auth.xml""/>&#xD;&#xA;					&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;				9th Application Context: &#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;					<bean id=""sessionFactory"" class=""org.springframework.orm.hibernate3.LocalSessionFactoryBean"">&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource""/>&#xD;&#xA;						<property name=""mappingResources"">&#xD;&#xA;							<list>&#xD;&#xA;								&#xD;&#xA;							 &#xD;&#xA;							</list>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""hibernateProperties"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""hibernate.dialect"">org.hibernate.dialect.Oracle9Dialect</prop>&#xD;&#xA;								<prop key=""hibernate.hbm2ddl.auto"">validate</prop>&#xD;&#xA;								<prop key=""hibernate.query.factory_class"">org.hibernate.hql.classic.ClassicQueryTranslatorFactory</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;					&#xD;&#xA;					 <bean id=""transactionManager"" class=""org.springframework.orm.hibernate3.HibernateTransactionManager"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory""/>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;				   &#xD;&#xA;					<!-- Transaction template for Facade -->&#xD;&#xA;					<bean id=""txProxyTemplate"" abstract=""true""&#xD;&#xA;						  class=""org.springframework.transaction.interceptor.TransactionProxyFactoryBean"">&#xD;&#xA;						<property name=""transactionManager"">&#xD;&#xA;							<ref bean=""transactionManager""/>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""transactionAttributes"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""save*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""remove*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""*"">PROPAGATION_REQUIRED,readOnly</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- DAO bean -->&#xD;&#xA;&#xD;&#xA;					<!-- Generic DAO - can be used when doing standard CRUD -->&#xD;&#xA;					<bean id=""dao"" class=""com.org.restservice.common.BaseDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource"" />&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- Generic Facade that can be used to do basic CRUD operations on any &#xD;&#xA;						objects -->&#xD;&#xA;					<bean id=""facade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean class=""com.org.restservice.common.BaseFacade"">&#xD;&#xA;								<property name=""Dao"" ref=""dao"" />&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;				10th Extended Application Context:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;					<bean id=""authenticationFacade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean&#xD;&#xA;								class=""com.org.restservice.bo.authentication.AuthenticationFacadeImpl"">&#xD;&#xA;								<property name=""authenticationDao"">&#xD;&#xA;									<ref bean=""authenticationDao"" />&#xD;&#xA;								</property>&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- authenticationDao: Hibernate implementation -->&#xD;&#xA;					<bean id=""authenticationDao""&#xD;&#xA;						class=""com.org.restservice.bo.authentication.AuthenticationDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;						<property name=""dataSource"">&#xD;&#xA;							<ref bean=""dataSource"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/jHS9n.jpg";;Grammar
106816986;34362501;4577296;5;069ad885-fd72-4502-bbba-5150e803fce7;2015-12-20 15:41:01.0;"[This is the error image from the console.][1]&#xD;&#xA;&#xD;&#xA;I am trying to use the Jersey API along with Spring and Hibernate. However, defining session factory says NullPointerException. Can anybody help me to solve this?&#xD;&#xA;&#xD;&#xA;				---------------------Dao Class:[enter image description here][2]&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.Dao;&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationDao extends Dao{&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					 * User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------DaoHibernate Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.ArrayList;&#xD;&#xA;				import java.util.Iterator;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import javax.sql.DataSource;&#xD;&#xA;&#xD;&#xA;				import org.apache.commons.logging.Log;&#xD;&#xA;				import org.apache.commons.logging.LogFactory;&#xD;&#xA;				import org.hibernate.Hibernate;&#xD;&#xA;				import org.hibernate.HibernateException;&#xD;&#xA;				import org.hibernate.SQLQuery;&#xD;&#xA;				import org.hibernate.Session;&#xD;&#xA;				import org.hibernate.type.StringType;&#xD;&#xA;				import org.springframework.orm.hibernate3.HibernateCallback;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.BaseDaoHibernate;&#xD;&#xA;				import com.org.restservice.common.Constant;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationDaoHibernate extends BaseDaoHibernate implements AuthenticationDao{&#xD;&#xA;					&#xD;&#xA;					private Log log = LogFactory.getLog(AuthenticationDaoHibernate.class);&#xD;&#xA;					private DataSource dataSource;&#xD;&#xA;&#xD;&#xA;					public void setDataSource(DataSource dataSource) {&#xD;&#xA;								this.dataSource = dataSource;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					* User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						System.out.println(""Called Me>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"");&#xD;&#xA;						&#xD;&#xA;						 List<AuthenticationVo> findlist = new ArrayList<AuthenticationVo>();&#xD;&#xA;						  &#xD;&#xA;						 final String sqlQuery = ""SELECT USER_ID, ROLE_ID from STTM_USER_MASTER"";	 		     &#xD;&#xA;							 &#xD;&#xA;						 System.out.println(""sqlQuery: ""+sqlQuery);&#xD;&#xA;							  &#xD;&#xA;							   List results = (List) getHibernateTemplate().execute(new HibernateCallback() {&#xD;&#xA;								   public Object doInHibernate(Session session) throws HibernateException {&#xD;&#xA;									   SQLQuery sq = session.createSQLQuery(sqlQuery);&#xD;&#xA;									   sq.addScalar(""USER_ID"", StringType.INSTANCE);&#xD;&#xA;									   sq.addScalar(""ROLE_ID"", StringType.INSTANCE);		               &#xD;&#xA;									   return sq.list();&#xD;&#xA;									   &#xD;&#xA;									 }&#xD;&#xA;							   });&#xD;&#xA;						&#xD;&#xA;						&#xD;&#xA;							  try {&#xD;&#xA;									if (results.size() > 0) {&#xD;&#xA;										Iterator itr = results.iterator();&#xD;&#xA;										while (itr.hasNext()) {&#xD;&#xA;											authenticationVo = new AuthenticationVo();&#xD;&#xA;											Object[] row = (Object[]) itr.next();	&#xD;&#xA;											authenticationVo.setUser_id((String) row[0]);&#xD;&#xA;											authenticationVo.setRole_id((String) row[1]);							&#xD;&#xA;															&#xD;&#xA;											findlist.add(authenticationVo);&#xD;&#xA;&#xD;&#xA;										}&#xD;&#xA;&#xD;&#xA;									}&#xD;&#xA;								} catch (Exception e) {&#xD;&#xA;									System.out.println(""FunctonVos error:"" + e.getMessage());&#xD;&#xA;								}&#xD;&#xA;							&#xD;&#xA;								System.out.println(""Size of User List is: ""&#xD;&#xA;										+ findlist.size());&#xD;&#xA;							 &#xD;&#xA;						&#xD;&#xA;								System.out.println(""Procedure call ended."");&#xD;&#xA;							&#xD;&#xA;							   return findlist;&#xD;&#xA;						&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				---------------------Facade Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.Facade;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationFacade extends Facade{&#xD;&#xA;					 &#xD;&#xA;				public void setAuthenticationDao(AuthenticationDao authenticationDao);&#xD;&#xA;&#xD;&#xA;				/*&#xD;&#xA;				 * User Information List&#xD;&#xA;				 */&#xD;&#xA;				public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------FacadeImpl Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import org.apache.commons.logging.Log;&#xD;&#xA;				import org.apache.commons.logging.LogFactory;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.BaseFacade;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationFacadeImpl extends BaseFacade implements AuthenticationFacade{&#xD;&#xA;					&#xD;&#xA;					private static final Log log = LogFactory.getLog(AuthenticationFacadeImpl.class);&#xD;&#xA;					&#xD;&#xA;					private AuthenticationDao authenticationDao;&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationDao(AuthenticationDao authenticationDao) {&#xD;&#xA;						this.authenticationDao = authenticationDao;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					 * User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						return authenticationDao.userInfo(authenticationVo);&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Business Object Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.BaseObject;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationVo  extends BaseObject{&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;					private static final long serialVersionUID = 1L;&#xD;&#xA;					&#xD;&#xA;					private String user_id; &#xD;&#xA;					private String role_id;&#xD;&#xA;					&#xD;&#xA;					public AuthenticationVo(String user_id, String role_id) {&#xD;&#xA;						super();&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo() {&#xD;&#xA;						super();&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getUser_id() {&#xD;&#xA;						return user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setUser_id(String user_id) {&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getRole_id() {&#xD;&#xA;						return role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setRole_id(String role_id) {&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public int hashCode() {&#xD;&#xA;						final int prime = 31;&#xD;&#xA;						int result = 1;&#xD;&#xA;						result = prime * result + ((role_id == null) ? 0 : role_id.hashCode());&#xD;&#xA;						result = prime * result + ((user_id == null) ? 0 : user_id.hashCode());&#xD;&#xA;						return result;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public boolean equals(Object obj) {&#xD;&#xA;						if (this == obj)&#xD;&#xA;							return true;&#xD;&#xA;						if (obj == null)&#xD;&#xA;							return false;&#xD;&#xA;						if (getClass() != obj.getClass())&#xD;&#xA;							return false;&#xD;&#xA;						AuthenticationVo other = (AuthenticationVo) obj;&#xD;&#xA;						if (role_id == null) {&#xD;&#xA;							if (other.role_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!role_id.equals(other.role_id))&#xD;&#xA;							return false;&#xD;&#xA;						if (user_id == null) {&#xD;&#xA;							if (other.user_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!user_id.equals(other.user_id))&#xD;&#xA;							return false;&#xD;&#xA;						return true;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public String toString() {&#xD;&#xA;						return ""AuthenticationVo [user_id="" + user_id + "", role_id="" + role_id + ""]"";&#xD;&#xA;					} &#xD;&#xA;						&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				---------------------Action Class Declaration:&#xD;&#xA;				&#xD;&#xA;				package com.org.restservice.portal.user;&#xD;&#xA;&#xD;&#xA;				import java.util.ArrayList;&#xD;&#xA;				import java.util.List;&#xD;&#xA;				import javax.ws.rs.GET;&#xD;&#xA;				import javax.ws.rs.Path;&#xD;&#xA;				import javax.ws.rs.Produces;&#xD;&#xA;				import org.apache.commons.logging.Log;&#xD;&#xA;				import org.apache.commons.logging.LogFactory;&#xD;&#xA;				import com.org.restservice.bo.user.AuthenticationFacade;&#xD;&#xA;				import com.org.restservice.bo.user.AuthenticationVo;&#xD;&#xA;&#xD;&#xA;				@Path(""userService"")&#xD;&#xA;				public class UserAction{&#xD;&#xA;					&#xD;&#xA;					private final Log log = LogFactory.getLog(UserAction.class);	&#xD;&#xA;					AuthenticationVo authenticationVo = new AuthenticationVo();&#xD;&#xA;					private AuthenticationFacade authenticationFacade = null;&#xD;&#xA;					private List<AuthenticationVo> listofUsers = new ArrayList<AuthenticationVo>();&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo getAuthenticationVo() {&#xD;&#xA;						return authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationVo(AuthenticationVo authenticationVo) {&#xD;&#xA;						this.authenticationVo = authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationFacade getAuthenticationFacade() {&#xD;&#xA;						return authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationFacade(AuthenticationFacade authenticationFacade) {&#xD;&#xA;						this.authenticationFacade = authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					public List<AuthenticationVo> getListofUsers() {&#xD;&#xA;						return listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setListofUsers(List<AuthenticationVo> listofUsers) {&#xD;&#xA;						this.listofUsers = listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;					@GET&#xD;&#xA;					@Produces( ""application/json"" )&#xD;&#xA;					public List<AuthenticationVo> customAction(){&#xD;&#xA;								&#xD;&#xA;						if (log.isDebugEnabled()) {&#xD;&#xA;							log.debug(""Entering into loadusers Method of AuthenticationAction: "" +authenticationFacade);&#xD;&#xA;						}&#xD;&#xA;						try {&#xD;&#xA;							listofUsers = authenticationFacade.userInfo(authenticationVo);&#xD;&#xA;						} catch (Exception e) {&#xD;&#xA;							&#xD;&#xA;							e.printStackTrace();&#xD;&#xA;						}	&#xD;&#xA;						System.out.println("">>>>>>>>>>>>>>>>>>>>>"" +listofUsers.size());&#xD;&#xA;						&#xD;&#xA;						/*authenticationVo.setUser_id(""1234"");&#xD;&#xA;						authenticationVo.setRole_id(""134352"");&#xD;&#xA;						listofUsers.add(authenticationVo);*/&#xD;&#xA;								&#xD;&#xA;						return listofUsers;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Spring Beans Declaration:&#xD;&#xA;&#xD;&#xA;				<!-- <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;				xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;				xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd""> -->&#xD;&#xA;&#xD;&#xA;				<beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;					xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:context=""http://www.springframework.org/schema/context""&#xD;&#xA;					xmlns:tx=""http://www.springframework.org/schema/tx""&#xD;&#xA;					xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#xD;&#xA;					http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&#xD;&#xA;					http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"">&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;					<!-- Database Configuration -->&#xD;&#xA;					<!-- Database connection using jdbc properties-->&#xD;&#xA;					<!-- <import resource=""config/DataSource.xml""/> -->&#xD;&#xA;					&#xD;&#xA;					<!-- Database connection using jndi properties-->&#xD;&#xA;					<import resource=""config/applicationContext-jndi.xml""/>	&#xD;&#xA;					&#xD;&#xA;					<import resource=""config/applicationContext.xml""/>&#xD;&#xA;				 &#xD;&#xA;					<!-- List and Setup -->&#xD;&#xA;					<import resource=""config/applicationContext-auth.xml""/>&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Application Context Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;					<bean id=""sessionFactory"" class=""org.springframework.orm.hibernate4.LocalSessionFactoryBean"">&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource""/>&#xD;&#xA;						<property name=""mappingResources"">&#xD;&#xA;							<list>&#xD;&#xA;								&#xD;&#xA;							 &#xD;&#xA;							</list>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""hibernateProperties"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""hibernate.dialect"">org.hibernate.dialect.Oracle10gDialect</prop>&#xD;&#xA;								<prop key=""hibernate.hbm2ddl.auto"">validate</prop>&#xD;&#xA;								<prop key=""hibernate.query.factory_class"">org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;					&#xD;&#xA;					<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->&#xD;&#xA;					&#xD;&#xA;					 <bean id=""transactionManager"" class=""org.springframework.orm.hibernate4.HibernateTransactionManager"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory""/>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;				   &#xD;&#xA;					<!-- Transaction template for Facade -->&#xD;&#xA;					<bean id=""txProxyTemplate"" abstract=""true""&#xD;&#xA;						  class=""org.springframework.transaction.interceptor.TransactionProxyFactoryBean"">&#xD;&#xA;						<property name=""transactionManager"">&#xD;&#xA;							<ref bean=""transactionManager""/>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""transactionAttributes"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""save*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""remove*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""*"">PROPAGATION_REQUIRED,readOnly</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;					<!-- DAO bean -->&#xD;&#xA;&#xD;&#xA;					<!-- Generic DAO - can be used when doing standard CRUD -->&#xD;&#xA;					<bean id=""dao"" class=""com.org.restservice.common.BaseDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource"" />&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- Generic Facade that can be used to do basic CRUD operations on any &#xD;&#xA;						objects -->&#xD;&#xA;					<bean id=""facade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean class=""com.org.restservice.common.BaseFacade"">&#xD;&#xA;								<property name=""Dao"" ref=""dao"" />&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				--------------------- Context Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;					<!-- Transaction declarations for business services. -->&#xD;&#xA;&#xD;&#xA;					<bean id=""authenticationFacade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean&#xD;&#xA;								class=""com.org.restservice.bo.user.AuthenticationFacadeImpl"">&#xD;&#xA;								<property name=""authenticationDao"">&#xD;&#xA;									<ref bean=""authenticationDao"" />&#xD;&#xA;								</property>&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- authenticationDao: Hibernate implementation -->&#xD;&#xA;					<bean id=""authenticationDao""&#xD;&#xA;						class=""com.org.restservice.bo.user.AuthenticationDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;						<property name=""dataSource"">&#xD;&#xA;							<ref bean=""dataSource"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Jndi Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;					<!-- author: Sarkar Zahir Ahamed <ahamed.sarkar@dbbl.com.bd> -->&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;					<!-- ========================= PERSISTENCE DEFINITIONS ========================= -->&#xD;&#xA;					<!-- JNDI DataSource for J2EE environments -->&#xD;&#xA;					<bean id=""dataSource"" class=""org.springframework.jndi.JndiObjectFactoryBean"">&#xD;&#xA;						<property name=""jndiName"">&#xD;&#xA;							<value>java:/comp/env/jndi/orcl</value>                       &#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Web XML Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<web-app xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""http://java.sun.com/xml/ns/javaee"" xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"" id=""WebApp_ID"" version=""3.0"">&#xD;&#xA;				  <display-name>RestWebService</display-name>&#xD;&#xA;				 &#xD;&#xA;				 <!-- Spring Listener -->&#xD;&#xA;					<listener>&#xD;&#xA;						<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>&#xD;&#xA;					</listener>&#xD;&#xA;&#xD;&#xA;					<!-- Jersey Servlet -->&#xD;&#xA;					<servlet>&#xD;&#xA;						<servlet-name>jersey-servlet</servlet-name>&#xD;&#xA;						<servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>&#xD;&#xA;						<!-- Register resources and providers -->&#xD;&#xA;						<init-param>&#xD;&#xA;							<param-name>jersey.config.server.provider.packages</param-name>&#xD;&#xA;							<param-value>com.org.restservice</param-value>&#xD;&#xA;						</init-param>&#xD;&#xA;						<load-on-startup>1</load-on-startup>&#xD;&#xA;					</servlet>&#xD;&#xA;&#xD;&#xA;					<servlet-mapping>&#xD;&#xA;						<servlet-name>jersey-servlet</servlet-name>&#xD;&#xA;						<url-pattern>/api/*</url-pattern>&#xD;&#xA;					</servlet-mapping>&#xD;&#xA;&#xD;&#xA;					<!-- loading Spring Context for registering beans with ApplicationContext -->&#xD;&#xA;					<context-param>&#xD;&#xA;						<param-name>contextConfigLocation</param-name>&#xD;&#xA;						<param-value>WEB-INF/classes/SpringBeans.xml</param-value>&#xD;&#xA;					</context-param>&#xD;&#xA;&#xD;&#xA;					<!-- welcome file -->&#xD;&#xA;					<welcome-file-list>&#xD;&#xA;						<welcome-file>index.jsp</welcome-file>&#xD;&#xA;					</welcome-file-list>&#xD;&#xA;					&#xD;&#xA;				</web-app>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/jHS9n.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/R9rtC.jpg";;Added Libraries and Full Configuration
106817254;34362501;4577296;5;a0450089-5e5c-435f-87bf-75ebb9db7657;2015-12-20 15:48:10.0;"[Images of All Jars][1] &#xD;&#xA;&#xD;&#xA;[This is the error image from the console.][2]&#xD;&#xA;&#xD;&#xA;I am trying to use the Jersey API along with Spring and Hibernate. However, defining session factory says NullPointerException. Can anybody help me to solve this?&#xD;&#xA;&#xD;&#xA;				---------------------Dao Class:[enter image description here][2]&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.Dao;&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationDao extends Dao{&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					 * User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------DaoHibernate Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.ArrayList;&#xD;&#xA;				import java.util.Iterator;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import javax.sql.DataSource;&#xD;&#xA;&#xD;&#xA;				import org.apache.commons.logging.Log;&#xD;&#xA;				import org.apache.commons.logging.LogFactory;&#xD;&#xA;				import org.hibernate.Hibernate;&#xD;&#xA;				import org.hibernate.HibernateException;&#xD;&#xA;				import org.hibernate.SQLQuery;&#xD;&#xA;				import org.hibernate.Session;&#xD;&#xA;				import org.hibernate.type.StringType;&#xD;&#xA;				import org.springframework.orm.hibernate3.HibernateCallback;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.BaseDaoHibernate;&#xD;&#xA;				import com.org.restservice.common.Constant;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationDaoHibernate extends BaseDaoHibernate implements AuthenticationDao{&#xD;&#xA;					&#xD;&#xA;					private Log log = LogFactory.getLog(AuthenticationDaoHibernate.class);&#xD;&#xA;					private DataSource dataSource;&#xD;&#xA;&#xD;&#xA;					public void setDataSource(DataSource dataSource) {&#xD;&#xA;								this.dataSource = dataSource;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					* User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						System.out.println(""Called Me>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"");&#xD;&#xA;						&#xD;&#xA;						 List<AuthenticationVo> findlist = new ArrayList<AuthenticationVo>();&#xD;&#xA;						  &#xD;&#xA;						 final String sqlQuery = ""SELECT USER_ID, ROLE_ID from STTM_USER_MASTER"";	 		     &#xD;&#xA;							 &#xD;&#xA;						 System.out.println(""sqlQuery: ""+sqlQuery);&#xD;&#xA;							  &#xD;&#xA;							   List results = (List) getHibernateTemplate().execute(new HibernateCallback() {&#xD;&#xA;								   public Object doInHibernate(Session session) throws HibernateException {&#xD;&#xA;									   SQLQuery sq = session.createSQLQuery(sqlQuery);&#xD;&#xA;									   sq.addScalar(""USER_ID"", StringType.INSTANCE);&#xD;&#xA;									   sq.addScalar(""ROLE_ID"", StringType.INSTANCE);		               &#xD;&#xA;									   return sq.list();&#xD;&#xA;									   &#xD;&#xA;									 }&#xD;&#xA;							   });&#xD;&#xA;						&#xD;&#xA;						&#xD;&#xA;							  try {&#xD;&#xA;									if (results.size() > 0) {&#xD;&#xA;										Iterator itr = results.iterator();&#xD;&#xA;										while (itr.hasNext()) {&#xD;&#xA;											authenticationVo = new AuthenticationVo();&#xD;&#xA;											Object[] row = (Object[]) itr.next();	&#xD;&#xA;											authenticationVo.setUser_id((String) row[0]);&#xD;&#xA;											authenticationVo.setRole_id((String) row[1]);							&#xD;&#xA;															&#xD;&#xA;											findlist.add(authenticationVo);&#xD;&#xA;&#xD;&#xA;										}&#xD;&#xA;&#xD;&#xA;									}&#xD;&#xA;								} catch (Exception e) {&#xD;&#xA;									System.out.println(""FunctonVos error:"" + e.getMessage());&#xD;&#xA;								}&#xD;&#xA;							&#xD;&#xA;								System.out.println(""Size of User List is: ""&#xD;&#xA;										+ findlist.size());&#xD;&#xA;							 &#xD;&#xA;						&#xD;&#xA;								System.out.println(""Procedure call ended."");&#xD;&#xA;							&#xD;&#xA;							   return findlist;&#xD;&#xA;						&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				---------------------Facade Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.Facade;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationFacade extends Facade{&#xD;&#xA;					 &#xD;&#xA;				public void setAuthenticationDao(AuthenticationDao authenticationDao);&#xD;&#xA;&#xD;&#xA;				/*&#xD;&#xA;				 * User Information List&#xD;&#xA;				 */&#xD;&#xA;				public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------FacadeImpl Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import org.apache.commons.logging.Log;&#xD;&#xA;				import org.apache.commons.logging.LogFactory;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.BaseFacade;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationFacadeImpl extends BaseFacade implements AuthenticationFacade{&#xD;&#xA;					&#xD;&#xA;					private static final Log log = LogFactory.getLog(AuthenticationFacadeImpl.class);&#xD;&#xA;					&#xD;&#xA;					private AuthenticationDao authenticationDao;&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationDao(AuthenticationDao authenticationDao) {&#xD;&#xA;						this.authenticationDao = authenticationDao;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					 * User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						return authenticationDao.userInfo(authenticationVo);&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Business Object Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.BaseObject;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationVo  extends BaseObject{&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;					private static final long serialVersionUID = 1L;&#xD;&#xA;					&#xD;&#xA;					private String user_id; &#xD;&#xA;					private String role_id;&#xD;&#xA;					&#xD;&#xA;					public AuthenticationVo(String user_id, String role_id) {&#xD;&#xA;						super();&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo() {&#xD;&#xA;						super();&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getUser_id() {&#xD;&#xA;						return user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setUser_id(String user_id) {&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getRole_id() {&#xD;&#xA;						return role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setRole_id(String role_id) {&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public int hashCode() {&#xD;&#xA;						final int prime = 31;&#xD;&#xA;						int result = 1;&#xD;&#xA;						result = prime * result + ((role_id == null) ? 0 : role_id.hashCode());&#xD;&#xA;						result = prime * result + ((user_id == null) ? 0 : user_id.hashCode());&#xD;&#xA;						return result;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public boolean equals(Object obj) {&#xD;&#xA;						if (this == obj)&#xD;&#xA;							return true;&#xD;&#xA;						if (obj == null)&#xD;&#xA;							return false;&#xD;&#xA;						if (getClass() != obj.getClass())&#xD;&#xA;							return false;&#xD;&#xA;						AuthenticationVo other = (AuthenticationVo) obj;&#xD;&#xA;						if (role_id == null) {&#xD;&#xA;							if (other.role_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!role_id.equals(other.role_id))&#xD;&#xA;							return false;&#xD;&#xA;						if (user_id == null) {&#xD;&#xA;							if (other.user_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!user_id.equals(other.user_id))&#xD;&#xA;							return false;&#xD;&#xA;						return true;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public String toString() {&#xD;&#xA;						return ""AuthenticationVo [user_id="" + user_id + "", role_id="" + role_id + ""]"";&#xD;&#xA;					} &#xD;&#xA;						&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				---------------------Action Class Declaration:&#xD;&#xA;				&#xD;&#xA;				package com.org.restservice.portal.user;&#xD;&#xA;&#xD;&#xA;				import java.util.ArrayList;&#xD;&#xA;				import java.util.List;&#xD;&#xA;				import javax.ws.rs.GET;&#xD;&#xA;				import javax.ws.rs.Path;&#xD;&#xA;				import javax.ws.rs.Produces;&#xD;&#xA;				import org.apache.commons.logging.Log;&#xD;&#xA;				import org.apache.commons.logging.LogFactory;&#xD;&#xA;				import com.org.restservice.bo.user.AuthenticationFacade;&#xD;&#xA;				import com.org.restservice.bo.user.AuthenticationVo;&#xD;&#xA;&#xD;&#xA;				@Path(""userService"")&#xD;&#xA;				public class UserAction{&#xD;&#xA;					&#xD;&#xA;					private final Log log = LogFactory.getLog(UserAction.class);	&#xD;&#xA;					AuthenticationVo authenticationVo = new AuthenticationVo();&#xD;&#xA;					private AuthenticationFacade authenticationFacade = null;&#xD;&#xA;					private List<AuthenticationVo> listofUsers = new ArrayList<AuthenticationVo>();&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo getAuthenticationVo() {&#xD;&#xA;						return authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationVo(AuthenticationVo authenticationVo) {&#xD;&#xA;						this.authenticationVo = authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationFacade getAuthenticationFacade() {&#xD;&#xA;						return authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationFacade(AuthenticationFacade authenticationFacade) {&#xD;&#xA;						this.authenticationFacade = authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					public List<AuthenticationVo> getListofUsers() {&#xD;&#xA;						return listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setListofUsers(List<AuthenticationVo> listofUsers) {&#xD;&#xA;						this.listofUsers = listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;					@GET&#xD;&#xA;					@Produces( ""application/json"" )&#xD;&#xA;					public List<AuthenticationVo> customAction(){&#xD;&#xA;								&#xD;&#xA;						if (log.isDebugEnabled()) {&#xD;&#xA;							log.debug(""Entering into loadusers Method of AuthenticationAction: "" +authenticationFacade);&#xD;&#xA;						}&#xD;&#xA;						try {&#xD;&#xA;							listofUsers = authenticationFacade.userInfo(authenticationVo);&#xD;&#xA;						} catch (Exception e) {&#xD;&#xA;							&#xD;&#xA;							e.printStackTrace();&#xD;&#xA;						}	&#xD;&#xA;						System.out.println("">>>>>>>>>>>>>>>>>>>>>"" +listofUsers.size());&#xD;&#xA;						&#xD;&#xA;						/*authenticationVo.setUser_id(""1234"");&#xD;&#xA;						authenticationVo.setRole_id(""134352"");&#xD;&#xA;						listofUsers.add(authenticationVo);*/&#xD;&#xA;								&#xD;&#xA;						return listofUsers;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Spring Beans Declaration:&#xD;&#xA;&#xD;&#xA;				<!-- <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;				xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;				xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd""> -->&#xD;&#xA;&#xD;&#xA;				<beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;					xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:context=""http://www.springframework.org/schema/context""&#xD;&#xA;					xmlns:tx=""http://www.springframework.org/schema/tx""&#xD;&#xA;					xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#xD;&#xA;					http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&#xD;&#xA;					http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"">&#xD;&#xA;&#xD;&#xA;					<!-- Database connection using jndi properties-->&#xD;&#xA;					<import resource=""config/applicationContext-jndi.xml""/>	&#xD;&#xA;					&#xD;&#xA;					<import resource=""config/applicationContext.xml""/>&#xD;&#xA;				 &#xD;&#xA;					<!-- List and Setup -->&#xD;&#xA;					<import resource=""config/applicationContext-auth.xml""/>&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Application Context Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;					<bean id=""sessionFactory"" class=""org.springframework.orm.hibernate4.LocalSessionFactoryBean"">&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource""/>&#xD;&#xA;						<property name=""mappingResources"">&#xD;&#xA;							<list>&#xD;&#xA;								&#xD;&#xA;							 &#xD;&#xA;							</list>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""hibernateProperties"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""hibernate.dialect"">org.hibernate.dialect.Oracle10gDialect</prop>&#xD;&#xA;								<prop key=""hibernate.hbm2ddl.auto"">validate</prop>&#xD;&#xA;								<prop key=""hibernate.query.factory_class"">org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;					&#xD;&#xA;					<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->&#xD;&#xA;					&#xD;&#xA;					 <bean id=""transactionManager"" class=""org.springframework.orm.hibernate4.HibernateTransactionManager"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory""/>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;				   &#xD;&#xA;					<!-- Transaction template for Facade -->&#xD;&#xA;					<bean id=""txProxyTemplate"" abstract=""true""&#xD;&#xA;						  class=""org.springframework.transaction.interceptor.TransactionProxyFactoryBean"">&#xD;&#xA;						<property name=""transactionManager"">&#xD;&#xA;							<ref bean=""transactionManager""/>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""transactionAttributes"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""save*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""remove*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""*"">PROPAGATION_REQUIRED,readOnly</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;					<!-- DAO bean -->&#xD;&#xA;&#xD;&#xA;					<!-- Generic DAO - can be used when doing standard CRUD -->&#xD;&#xA;					<bean id=""dao"" class=""com.org.restservice.common.BaseDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource"" />&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- Generic Facade that can be used to do basic CRUD operations on any &#xD;&#xA;						objects -->&#xD;&#xA;					<bean id=""facade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean class=""com.org.restservice.common.BaseFacade"">&#xD;&#xA;								<property name=""Dao"" ref=""dao"" />&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				--------------------- Context Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;					<!-- Transaction declarations for business services. -->&#xD;&#xA;&#xD;&#xA;					<bean id=""authenticationFacade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean&#xD;&#xA;								class=""com.org.restservice.bo.user.AuthenticationFacadeImpl"">&#xD;&#xA;								<property name=""authenticationDao"">&#xD;&#xA;									<ref bean=""authenticationDao"" />&#xD;&#xA;								</property>&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- authenticationDao: Hibernate implementation -->&#xD;&#xA;					<bean id=""authenticationDao""&#xD;&#xA;						class=""com.org.restservice.bo.user.AuthenticationDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;						<property name=""dataSource"">&#xD;&#xA;							<ref bean=""dataSource"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Jndi Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;					<!-- author: Sarkar Zahir Ahamed <ahamed.sarkar@dbbl.com.bd> -->&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;					<!-- ========================= PERSISTENCE DEFINITIONS ========================= -->&#xD;&#xA;					<!-- JNDI DataSource for J2EE environments -->&#xD;&#xA;					<bean id=""dataSource"" class=""org.springframework.jndi.JndiObjectFactoryBean"">&#xD;&#xA;						<property name=""jndiName"">&#xD;&#xA;							<value>java:/comp/env/jndi/orcl</value>                       &#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Web XML Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<web-app xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""http://java.sun.com/xml/ns/javaee"" xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"" id=""WebApp_ID"" version=""3.0"">&#xD;&#xA;				  <display-name>RestWebService</display-name>&#xD;&#xA;				 &#xD;&#xA;				 <!-- Spring Listener -->&#xD;&#xA;					<listener>&#xD;&#xA;						<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>&#xD;&#xA;					</listener>&#xD;&#xA;&#xD;&#xA;					<!-- Jersey Servlet -->&#xD;&#xA;					<servlet>&#xD;&#xA;						<servlet-name>jersey-servlet</servlet-name>&#xD;&#xA;						<servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>&#xD;&#xA;						<!-- Register resources and providers -->&#xD;&#xA;						<init-param>&#xD;&#xA;							<param-name>jersey.config.server.provider.packages</param-name>&#xD;&#xA;							<param-value>com.org.restservice</param-value>&#xD;&#xA;						</init-param>&#xD;&#xA;						<load-on-startup>1</load-on-startup>&#xD;&#xA;					</servlet>&#xD;&#xA;&#xD;&#xA;					<servlet-mapping>&#xD;&#xA;						<servlet-name>jersey-servlet</servlet-name>&#xD;&#xA;						<url-pattern>/api/*</url-pattern>&#xD;&#xA;					</servlet-mapping>&#xD;&#xA;&#xD;&#xA;					<!-- loading Spring Context for registering beans with ApplicationContext -->&#xD;&#xA;					<context-param>&#xD;&#xA;						<param-name>contextConfigLocation</param-name>&#xD;&#xA;						<param-value>WEB-INF/classes/SpringBeans.xml</param-value>&#xD;&#xA;					</context-param>&#xD;&#xA;&#xD;&#xA;					<!-- welcome file -->&#xD;&#xA;					<welcome-file-list>&#xD;&#xA;						<welcome-file>index.jsp</welcome-file>&#xD;&#xA;					</welcome-file-list>&#xD;&#xA;					&#xD;&#xA;				</web-app>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/pwXeu.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/jHS9n.jpg";;added 19 characters in body
106817609;34362501;4577296;5;d34295ba-2582-487c-bc86-447b2ba282ef;2015-12-20 15:57:32.0;"[Images of All Jars][1] &#xD;&#xA;&#xD;&#xA;[This is the error image from the console.][2]&#xD;&#xA;&#xD;&#xA;I am trying to use the Jersey API along with Spring and Hibernate. However, defining session factory says NullPointerException. Can anybody help me to solve this? Added Full configuration with spring, hibernate and Jersey&#xD;&#xA;&#xD;&#xA;				---------------------Dao Class:[enter image description here][2]&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.Dao;&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationDao extends Dao{&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					 * User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------DaoHibernate Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.ArrayList;&#xD;&#xA;				import java.util.Iterator;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import javax.sql.DataSource;&#xD;&#xA;&#xD;&#xA;				import org.apache.commons.logging.Log;&#xD;&#xA;				import org.apache.commons.logging.LogFactory;&#xD;&#xA;				import org.hibernate.Hibernate;&#xD;&#xA;				import org.hibernate.HibernateException;&#xD;&#xA;				import org.hibernate.SQLQuery;&#xD;&#xA;				import org.hibernate.Session;&#xD;&#xA;				import org.hibernate.type.StringType;&#xD;&#xA;				import org.springframework.orm.hibernate3.HibernateCallback;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.BaseDaoHibernate;&#xD;&#xA;				import com.org.restservice.common.Constant;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationDaoHibernate extends BaseDaoHibernate implements AuthenticationDao{&#xD;&#xA;					&#xD;&#xA;					private Log log = LogFactory.getLog(AuthenticationDaoHibernate.class);&#xD;&#xA;					private DataSource dataSource;&#xD;&#xA;&#xD;&#xA;					public void setDataSource(DataSource dataSource) {&#xD;&#xA;								this.dataSource = dataSource;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					* User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						System.out.println(""Called Me>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"");&#xD;&#xA;						&#xD;&#xA;						 List<AuthenticationVo> findlist = new ArrayList<AuthenticationVo>();&#xD;&#xA;						  &#xD;&#xA;						 final String sqlQuery = ""SELECT USER_ID, ROLE_ID from STTM_USER_MASTER"";	 		     &#xD;&#xA;							 &#xD;&#xA;						 System.out.println(""sqlQuery: ""+sqlQuery);&#xD;&#xA;							  &#xD;&#xA;							   List results = (List) getHibernateTemplate().execute(new HibernateCallback() {&#xD;&#xA;								   public Object doInHibernate(Session session) throws HibernateException {&#xD;&#xA;									   SQLQuery sq = session.createSQLQuery(sqlQuery);&#xD;&#xA;									   sq.addScalar(""USER_ID"", StringType.INSTANCE);&#xD;&#xA;									   sq.addScalar(""ROLE_ID"", StringType.INSTANCE);		               &#xD;&#xA;									   return sq.list();&#xD;&#xA;									   &#xD;&#xA;									 }&#xD;&#xA;							   });&#xD;&#xA;						&#xD;&#xA;						&#xD;&#xA;							  try {&#xD;&#xA;									if (results.size() > 0) {&#xD;&#xA;										Iterator itr = results.iterator();&#xD;&#xA;										while (itr.hasNext()) {&#xD;&#xA;											authenticationVo = new AuthenticationVo();&#xD;&#xA;											Object[] row = (Object[]) itr.next();	&#xD;&#xA;											authenticationVo.setUser_id((String) row[0]);&#xD;&#xA;											authenticationVo.setRole_id((String) row[1]);							&#xD;&#xA;															&#xD;&#xA;											findlist.add(authenticationVo);&#xD;&#xA;&#xD;&#xA;										}&#xD;&#xA;&#xD;&#xA;									}&#xD;&#xA;								} catch (Exception e) {&#xD;&#xA;									System.out.println(""FunctonVos error:"" + e.getMessage());&#xD;&#xA;								}&#xD;&#xA;							&#xD;&#xA;								System.out.println(""Size of User List is: ""&#xD;&#xA;										+ findlist.size());&#xD;&#xA;							 &#xD;&#xA;						&#xD;&#xA;								System.out.println(""Procedure call ended."");&#xD;&#xA;							&#xD;&#xA;							   return findlist;&#xD;&#xA;						&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				---------------------Facade Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.Facade;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationFacade extends Facade{&#xD;&#xA;					 &#xD;&#xA;				public void setAuthenticationDao(AuthenticationDao authenticationDao);&#xD;&#xA;&#xD;&#xA;				/*&#xD;&#xA;				 * User Information List&#xD;&#xA;				 */&#xD;&#xA;				public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------FacadeImpl Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import org.apache.commons.logging.Log;&#xD;&#xA;				import org.apache.commons.logging.LogFactory;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.BaseFacade;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationFacadeImpl extends BaseFacade implements AuthenticationFacade{&#xD;&#xA;					&#xD;&#xA;					private static final Log log = LogFactory.getLog(AuthenticationFacadeImpl.class);&#xD;&#xA;					&#xD;&#xA;					private AuthenticationDao authenticationDao;&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationDao(AuthenticationDao authenticationDao) {&#xD;&#xA;						this.authenticationDao = authenticationDao;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					 * User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						return authenticationDao.userInfo(authenticationVo);&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Business Object Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.BaseObject;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationVo  extends BaseObject{&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;					private static final long serialVersionUID = 1L;&#xD;&#xA;					&#xD;&#xA;					private String user_id; &#xD;&#xA;					private String role_id;&#xD;&#xA;					&#xD;&#xA;					public AuthenticationVo(String user_id, String role_id) {&#xD;&#xA;						super();&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo() {&#xD;&#xA;						super();&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getUser_id() {&#xD;&#xA;						return user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setUser_id(String user_id) {&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getRole_id() {&#xD;&#xA;						return role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setRole_id(String role_id) {&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public int hashCode() {&#xD;&#xA;						final int prime = 31;&#xD;&#xA;						int result = 1;&#xD;&#xA;						result = prime * result + ((role_id == null) ? 0 : role_id.hashCode());&#xD;&#xA;						result = prime * result + ((user_id == null) ? 0 : user_id.hashCode());&#xD;&#xA;						return result;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public boolean equals(Object obj) {&#xD;&#xA;						if (this == obj)&#xD;&#xA;							return true;&#xD;&#xA;						if (obj == null)&#xD;&#xA;							return false;&#xD;&#xA;						if (getClass() != obj.getClass())&#xD;&#xA;							return false;&#xD;&#xA;						AuthenticationVo other = (AuthenticationVo) obj;&#xD;&#xA;						if (role_id == null) {&#xD;&#xA;							if (other.role_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!role_id.equals(other.role_id))&#xD;&#xA;							return false;&#xD;&#xA;						if (user_id == null) {&#xD;&#xA;							if (other.user_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!user_id.equals(other.user_id))&#xD;&#xA;							return false;&#xD;&#xA;						return true;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public String toString() {&#xD;&#xA;						return ""AuthenticationVo [user_id="" + user_id + "", role_id="" + role_id + ""]"";&#xD;&#xA;					} &#xD;&#xA;						&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				---------------------Action Class Declaration:&#xD;&#xA;				&#xD;&#xA;				package com.org.restservice.portal.user;&#xD;&#xA;&#xD;&#xA;				import java.util.ArrayList;&#xD;&#xA;				import java.util.List;&#xD;&#xA;				import javax.ws.rs.GET;&#xD;&#xA;				import javax.ws.rs.Path;&#xD;&#xA;				import javax.ws.rs.Produces;&#xD;&#xA;				import org.apache.commons.logging.Log;&#xD;&#xA;				import org.apache.commons.logging.LogFactory;&#xD;&#xA;				import com.org.restservice.bo.user.AuthenticationFacade;&#xD;&#xA;				import com.org.restservice.bo.user.AuthenticationVo;&#xD;&#xA;&#xD;&#xA;				@Path(""userService"")&#xD;&#xA;				public class UserAction{&#xD;&#xA;					&#xD;&#xA;					private final Log log = LogFactory.getLog(UserAction.class);	&#xD;&#xA;					AuthenticationVo authenticationVo = new AuthenticationVo();&#xD;&#xA;					private AuthenticationFacade authenticationFacade = null;&#xD;&#xA;					private List<AuthenticationVo> listofUsers = new ArrayList<AuthenticationVo>();&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo getAuthenticationVo() {&#xD;&#xA;						return authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationVo(AuthenticationVo authenticationVo) {&#xD;&#xA;						this.authenticationVo = authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationFacade getAuthenticationFacade() {&#xD;&#xA;						return authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationFacade(AuthenticationFacade authenticationFacade) {&#xD;&#xA;						this.authenticationFacade = authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					public List<AuthenticationVo> getListofUsers() {&#xD;&#xA;						return listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setListofUsers(List<AuthenticationVo> listofUsers) {&#xD;&#xA;						this.listofUsers = listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;					@GET&#xD;&#xA;					@Produces( ""application/json"" )&#xD;&#xA;					public List<AuthenticationVo> customAction(){&#xD;&#xA;								&#xD;&#xA;						if (log.isDebugEnabled()) {&#xD;&#xA;							log.debug(""Entering into loadusers Method of AuthenticationAction: "" +authenticationFacade);&#xD;&#xA;						}&#xD;&#xA;						try {&#xD;&#xA;							listofUsers = authenticationFacade.userInfo(authenticationVo);&#xD;&#xA;						} catch (Exception e) {&#xD;&#xA;							&#xD;&#xA;							e.printStackTrace();&#xD;&#xA;						}	&#xD;&#xA;						System.out.println("">>>>>>>>>>>>>>>>>>>>>"" +listofUsers.size());&#xD;&#xA;						&#xD;&#xA;						/*authenticationVo.setUser_id(""1234"");&#xD;&#xA;						authenticationVo.setRole_id(""134352"");&#xD;&#xA;						listofUsers.add(authenticationVo);*/&#xD;&#xA;								&#xD;&#xA;						return listofUsers;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Spring Beans Declaration:&#xD;&#xA;&#xD;&#xA;				<!-- <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;				xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;				xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd""> -->&#xD;&#xA;&#xD;&#xA;				<beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;					xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:context=""http://www.springframework.org/schema/context""&#xD;&#xA;					xmlns:tx=""http://www.springframework.org/schema/tx""&#xD;&#xA;					xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#xD;&#xA;					http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&#xD;&#xA;					http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"">&#xD;&#xA;&#xD;&#xA;					<!-- Database connection using jndi properties-->&#xD;&#xA;					<import resource=""config/applicationContext-jndi.xml""/>	&#xD;&#xA;					&#xD;&#xA;					<import resource=""config/applicationContext.xml""/>&#xD;&#xA;				 &#xD;&#xA;					<!-- List and Setup -->&#xD;&#xA;					<import resource=""config/applicationContext-auth.xml""/>&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Application Context Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;					<bean id=""sessionFactory"" class=""org.springframework.orm.hibernate4.LocalSessionFactoryBean"">&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource""/>&#xD;&#xA;						<property name=""mappingResources"">&#xD;&#xA;							<list>&#xD;&#xA;								&#xD;&#xA;							 &#xD;&#xA;							</list>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""hibernateProperties"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""hibernate.dialect"">org.hibernate.dialect.Oracle10gDialect</prop>&#xD;&#xA;								<prop key=""hibernate.hbm2ddl.auto"">validate</prop>&#xD;&#xA;								<prop key=""hibernate.query.factory_class"">org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;					&#xD;&#xA;					<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->&#xD;&#xA;					&#xD;&#xA;					 <bean id=""transactionManager"" class=""org.springframework.orm.hibernate4.HibernateTransactionManager"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory""/>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;				   &#xD;&#xA;					<!-- Transaction template for Facade -->&#xD;&#xA;					<bean id=""txProxyTemplate"" abstract=""true""&#xD;&#xA;						  class=""org.springframework.transaction.interceptor.TransactionProxyFactoryBean"">&#xD;&#xA;						<property name=""transactionManager"">&#xD;&#xA;							<ref bean=""transactionManager""/>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""transactionAttributes"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""save*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""remove*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""*"">PROPAGATION_REQUIRED,readOnly</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;					<!-- DAO bean -->&#xD;&#xA;&#xD;&#xA;					<!-- Generic DAO - can be used when doing standard CRUD -->&#xD;&#xA;					<bean id=""dao"" class=""com.org.restservice.common.BaseDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource"" />&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- Generic Facade that can be used to do basic CRUD operations on any &#xD;&#xA;						objects -->&#xD;&#xA;					<bean id=""facade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean class=""com.org.restservice.common.BaseFacade"">&#xD;&#xA;								<property name=""Dao"" ref=""dao"" />&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				--------------------- Context Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;					<!-- Transaction declarations for business services. -->&#xD;&#xA;&#xD;&#xA;					<bean id=""authenticationFacade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean&#xD;&#xA;								class=""com.org.restservice.bo.user.AuthenticationFacadeImpl"">&#xD;&#xA;								<property name=""authenticationDao"">&#xD;&#xA;									<ref bean=""authenticationDao"" />&#xD;&#xA;								</property>&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- authenticationDao: Hibernate implementation -->&#xD;&#xA;					<bean id=""authenticationDao""&#xD;&#xA;						class=""com.org.restservice.bo.user.AuthenticationDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;						<property name=""dataSource"">&#xD;&#xA;							<ref bean=""dataSource"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Jndi Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;					<!-- author: Sarkar Zahir Ahamed <ahamed.sarkar@dbbl.com.bd> -->&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;					<!-- ========================= PERSISTENCE DEFINITIONS ========================= -->&#xD;&#xA;					<!-- JNDI DataSource for J2EE environments -->&#xD;&#xA;					<bean id=""dataSource"" class=""org.springframework.jndi.JndiObjectFactoryBean"">&#xD;&#xA;						<property name=""jndiName"">&#xD;&#xA;							<value>java:/comp/env/jndi/orcl</value>                       &#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Web XML Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<web-app xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""http://java.sun.com/xml/ns/javaee"" xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"" id=""WebApp_ID"" version=""3.0"">&#xD;&#xA;				  <display-name>RestWebService</display-name>&#xD;&#xA;				 &#xD;&#xA;				 <!-- Spring Listener -->&#xD;&#xA;					<listener>&#xD;&#xA;						<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>&#xD;&#xA;					</listener>&#xD;&#xA;&#xD;&#xA;					<!-- Jersey Servlet -->&#xD;&#xA;					<servlet>&#xD;&#xA;						<servlet-name>jersey-servlet</servlet-name>&#xD;&#xA;						<servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>&#xD;&#xA;						<!-- Register resources and providers -->&#xD;&#xA;						<init-param>&#xD;&#xA;							<param-name>jersey.config.server.provider.packages</param-name>&#xD;&#xA;							<param-value>com.org.restservice</param-value>&#xD;&#xA;						</init-param>&#xD;&#xA;						<load-on-startup>1</load-on-startup>&#xD;&#xA;					</servlet>&#xD;&#xA;&#xD;&#xA;					<servlet-mapping>&#xD;&#xA;						<servlet-name>jersey-servlet</servlet-name>&#xD;&#xA;						<url-pattern>/api/*</url-pattern>&#xD;&#xA;					</servlet-mapping>&#xD;&#xA;&#xD;&#xA;					<!-- loading Spring Context for registering beans with ApplicationContext -->&#xD;&#xA;					<context-param>&#xD;&#xA;						<param-name>contextConfigLocation</param-name>&#xD;&#xA;						<param-value>WEB-INF/classes/SpringBeans.xml</param-value>&#xD;&#xA;					</context-param>&#xD;&#xA;&#xD;&#xA;					<!-- welcome file -->&#xD;&#xA;					<welcome-file-list>&#xD;&#xA;						<welcome-file>index.jsp</welcome-file>&#xD;&#xA;					</welcome-file-list>&#xD;&#xA;					&#xD;&#xA;				</web-app>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/pwXeu.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/X8UVL.jpg";;edited body
106817968;34362501;4577296;5;71fe8618-e5ad-4d21-9bd1-fdb4fe73c592;2015-12-20 16:06:29.0;"[Images of All Jars][1] &#xD;&#xA;&#xD;&#xA;[This is the error image from the console.][2]&#xD;&#xA;&#xD;&#xA;I am trying to use the Jersey API along with Spring and Hibernate. However, defining session factory says NullPointerException. Can anybody help me to solve this? Added Full configuration with spring, hibernate and Jersey. Images of error and jar on top.&#xD;&#xA;&#xD;&#xA;				---------------------Dao Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.Dao;&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationDao extends Dao{&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					 * User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------DaoHibernate Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.ArrayList;&#xD;&#xA;				import java.util.Iterator;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import javax.sql.DataSource;&#xD;&#xA;&#xD;&#xA;				import org.apache.commons.logging.Log;&#xD;&#xA;				import org.apache.commons.logging.LogFactory;&#xD;&#xA;				import org.hibernate.Hibernate;&#xD;&#xA;				import org.hibernate.HibernateException;&#xD;&#xA;				import org.hibernate.SQLQuery;&#xD;&#xA;				import org.hibernate.Session;&#xD;&#xA;				import org.hibernate.type.StringType;&#xD;&#xA;				import org.springframework.orm.hibernate3.HibernateCallback;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.BaseDaoHibernate;&#xD;&#xA;				import com.org.restservice.common.Constant;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationDaoHibernate extends BaseDaoHibernate implements AuthenticationDao{&#xD;&#xA;					&#xD;&#xA;					private Log log = LogFactory.getLog(AuthenticationDaoHibernate.class);&#xD;&#xA;					private DataSource dataSource;&#xD;&#xA;&#xD;&#xA;					public void setDataSource(DataSource dataSource) {&#xD;&#xA;								this.dataSource = dataSource;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					* User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						System.out.println(""Called Me>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"");&#xD;&#xA;						&#xD;&#xA;						 List<AuthenticationVo> findlist = new ArrayList<AuthenticationVo>();&#xD;&#xA;						  &#xD;&#xA;						 final String sqlQuery = ""SELECT USER_ID, ROLE_ID from STTM_USER_MASTER"";	 		     &#xD;&#xA;							 &#xD;&#xA;						 System.out.println(""sqlQuery: ""+sqlQuery);&#xD;&#xA;							  &#xD;&#xA;							   List results = (List) getHibernateTemplate().execute(new HibernateCallback() {&#xD;&#xA;								   public Object doInHibernate(Session session) throws HibernateException {&#xD;&#xA;									   SQLQuery sq = session.createSQLQuery(sqlQuery);&#xD;&#xA;									   sq.addScalar(""USER_ID"", StringType.INSTANCE);&#xD;&#xA;									   sq.addScalar(""ROLE_ID"", StringType.INSTANCE);		               &#xD;&#xA;									   return sq.list();&#xD;&#xA;									   &#xD;&#xA;									 }&#xD;&#xA;							   });&#xD;&#xA;						&#xD;&#xA;						&#xD;&#xA;							  try {&#xD;&#xA;									if (results.size() > 0) {&#xD;&#xA;										Iterator itr = results.iterator();&#xD;&#xA;										while (itr.hasNext()) {&#xD;&#xA;											authenticationVo = new AuthenticationVo();&#xD;&#xA;											Object[] row = (Object[]) itr.next();	&#xD;&#xA;											authenticationVo.setUser_id((String) row[0]);&#xD;&#xA;											authenticationVo.setRole_id((String) row[1]);							&#xD;&#xA;															&#xD;&#xA;											findlist.add(authenticationVo);&#xD;&#xA;&#xD;&#xA;										}&#xD;&#xA;&#xD;&#xA;									}&#xD;&#xA;								} catch (Exception e) {&#xD;&#xA;									System.out.println(""FunctonVos error:"" + e.getMessage());&#xD;&#xA;								}&#xD;&#xA;							&#xD;&#xA;								System.out.println(""Size of User List is: ""&#xD;&#xA;										+ findlist.size());&#xD;&#xA;							 &#xD;&#xA;						&#xD;&#xA;								System.out.println(""Procedure call ended."");&#xD;&#xA;							&#xD;&#xA;							   return findlist;&#xD;&#xA;						&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				---------------------Facade Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.Facade;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public interface AuthenticationFacade extends Facade{&#xD;&#xA;					 &#xD;&#xA;				public void setAuthenticationDao(AuthenticationDao authenticationDao);&#xD;&#xA;&#xD;&#xA;				/*&#xD;&#xA;				 * User Information List&#xD;&#xA;				 */&#xD;&#xA;				public List userInfo(AuthenticationVo authenticationVo) throws Exception;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------FacadeImpl Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;				import java.util.List;&#xD;&#xA;&#xD;&#xA;				import org.apache.commons.logging.Log;&#xD;&#xA;				import org.apache.commons.logging.LogFactory;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.BaseFacade;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationFacadeImpl extends BaseFacade implements AuthenticationFacade{&#xD;&#xA;					&#xD;&#xA;					private static final Log log = LogFactory.getLog(AuthenticationFacadeImpl.class);&#xD;&#xA;					&#xD;&#xA;					private AuthenticationDao authenticationDao;&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationDao(AuthenticationDao authenticationDao) {&#xD;&#xA;						this.authenticationDao = authenticationDao;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					/*&#xD;&#xA;					 * User Information List&#xD;&#xA;					 */&#xD;&#xA;					public List userInfo(AuthenticationVo authenticationVo) throws Exception{&#xD;&#xA;						&#xD;&#xA;						return authenticationDao.userInfo(authenticationVo);&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Business Object Class:&#xD;&#xA;&#xD;&#xA;				package com.org.restservice.bo.user;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				import com.org.restservice.common.BaseObject;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				public class AuthenticationVo  extends BaseObject{&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;					private static final long serialVersionUID = 1L;&#xD;&#xA;					&#xD;&#xA;					private String user_id; &#xD;&#xA;					private String role_id;&#xD;&#xA;					&#xD;&#xA;					public AuthenticationVo(String user_id, String role_id) {&#xD;&#xA;						super();&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo() {&#xD;&#xA;						super();&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getUser_id() {&#xD;&#xA;						return user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setUser_id(String user_id) {&#xD;&#xA;						this.user_id = user_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public String getRole_id() {&#xD;&#xA;						return role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setRole_id(String role_id) {&#xD;&#xA;						this.role_id = role_id;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public int hashCode() {&#xD;&#xA;						final int prime = 31;&#xD;&#xA;						int result = 1;&#xD;&#xA;						result = prime * result + ((role_id == null) ? 0 : role_id.hashCode());&#xD;&#xA;						result = prime * result + ((user_id == null) ? 0 : user_id.hashCode());&#xD;&#xA;						return result;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public boolean equals(Object obj) {&#xD;&#xA;						if (this == obj)&#xD;&#xA;							return true;&#xD;&#xA;						if (obj == null)&#xD;&#xA;							return false;&#xD;&#xA;						if (getClass() != obj.getClass())&#xD;&#xA;							return false;&#xD;&#xA;						AuthenticationVo other = (AuthenticationVo) obj;&#xD;&#xA;						if (role_id == null) {&#xD;&#xA;							if (other.role_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!role_id.equals(other.role_id))&#xD;&#xA;							return false;&#xD;&#xA;						if (user_id == null) {&#xD;&#xA;							if (other.user_id != null)&#xD;&#xA;								return false;&#xD;&#xA;						} else if (!user_id.equals(other.user_id))&#xD;&#xA;							return false;&#xD;&#xA;						return true;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					@Override&#xD;&#xA;					public String toString() {&#xD;&#xA;						return ""AuthenticationVo [user_id="" + user_id + "", role_id="" + role_id + ""]"";&#xD;&#xA;					} &#xD;&#xA;						&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;				---------------------Action Class Declaration:&#xD;&#xA;				&#xD;&#xA;				package com.org.restservice.portal.user;&#xD;&#xA;&#xD;&#xA;				import java.util.ArrayList;&#xD;&#xA;				import java.util.List;&#xD;&#xA;				import javax.ws.rs.GET;&#xD;&#xA;				import javax.ws.rs.Path;&#xD;&#xA;				import javax.ws.rs.Produces;&#xD;&#xA;				import org.apache.commons.logging.Log;&#xD;&#xA;				import org.apache.commons.logging.LogFactory;&#xD;&#xA;				import com.org.restservice.bo.user.AuthenticationFacade;&#xD;&#xA;				import com.org.restservice.bo.user.AuthenticationVo;&#xD;&#xA;&#xD;&#xA;				@Path(""userService"")&#xD;&#xA;				public class UserAction{&#xD;&#xA;					&#xD;&#xA;					private final Log log = LogFactory.getLog(UserAction.class);	&#xD;&#xA;					AuthenticationVo authenticationVo = new AuthenticationVo();&#xD;&#xA;					private AuthenticationFacade authenticationFacade = null;&#xD;&#xA;					private List<AuthenticationVo> listofUsers = new ArrayList<AuthenticationVo>();&#xD;&#xA;					&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;					public AuthenticationVo getAuthenticationVo() {&#xD;&#xA;						return authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationVo(AuthenticationVo authenticationVo) {&#xD;&#xA;						this.authenticationVo = authenticationVo;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public AuthenticationFacade getAuthenticationFacade() {&#xD;&#xA;						return authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setAuthenticationFacade(AuthenticationFacade authenticationFacade) {&#xD;&#xA;						this.authenticationFacade = authenticationFacade;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;					public List<AuthenticationVo> getListofUsers() {&#xD;&#xA;						return listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					public void setListofUsers(List<AuthenticationVo> listofUsers) {&#xD;&#xA;						this.listofUsers = listofUsers;&#xD;&#xA;					}&#xD;&#xA;&#xD;&#xA;					&#xD;&#xA;					@GET&#xD;&#xA;					@Produces( ""application/json"" )&#xD;&#xA;					public List<AuthenticationVo> customAction(){&#xD;&#xA;								&#xD;&#xA;						if (log.isDebugEnabled()) {&#xD;&#xA;							log.debug(""Entering into loadusers Method of AuthenticationAction: "" +authenticationFacade);&#xD;&#xA;						}&#xD;&#xA;						try {&#xD;&#xA;							listofUsers = authenticationFacade.userInfo(authenticationVo);&#xD;&#xA;						} catch (Exception e) {&#xD;&#xA;							&#xD;&#xA;							e.printStackTrace();&#xD;&#xA;						}	&#xD;&#xA;						System.out.println("">>>>>>>>>>>>>>>>>>>>>"" +listofUsers.size());&#xD;&#xA;						&#xD;&#xA;						/*authenticationVo.setUser_id(""1234"");&#xD;&#xA;						authenticationVo.setRole_id(""134352"");&#xD;&#xA;						listofUsers.add(authenticationVo);*/&#xD;&#xA;								&#xD;&#xA;						return listofUsers;&#xD;&#xA;					}&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Spring Beans Declaration:&#xD;&#xA;&#xD;&#xA;				<!-- <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;				xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;				xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd""> -->&#xD;&#xA;&#xD;&#xA;				<beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;					xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:context=""http://www.springframework.org/schema/context""&#xD;&#xA;					xmlns:tx=""http://www.springframework.org/schema/tx""&#xD;&#xA;					xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#xD;&#xA;					http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&#xD;&#xA;					http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"">&#xD;&#xA;&#xD;&#xA;					<!-- Database connection using jndi properties-->&#xD;&#xA;					<import resource=""config/applicationContext-jndi.xml""/>	&#xD;&#xA;					&#xD;&#xA;					<import resource=""config/applicationContext.xml""/>&#xD;&#xA;				 &#xD;&#xA;					<!-- List and Setup -->&#xD;&#xA;					<import resource=""config/applicationContext-auth.xml""/>&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Application Context Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;					<bean id=""sessionFactory"" class=""org.springframework.orm.hibernate4.LocalSessionFactoryBean"">&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource""/>&#xD;&#xA;						<property name=""mappingResources"">&#xD;&#xA;							<list>&#xD;&#xA;								&#xD;&#xA;							 &#xD;&#xA;							</list>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""hibernateProperties"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""hibernate.dialect"">org.hibernate.dialect.Oracle10gDialect</prop>&#xD;&#xA;								<prop key=""hibernate.hbm2ddl.auto"">validate</prop>&#xD;&#xA;								<prop key=""hibernate.query.factory_class"">org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;					&#xD;&#xA;					<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->&#xD;&#xA;					&#xD;&#xA;					 <bean id=""transactionManager"" class=""org.springframework.orm.hibernate4.HibernateTransactionManager"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory""/>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;				   &#xD;&#xA;					<!-- Transaction template for Facade -->&#xD;&#xA;					<bean id=""txProxyTemplate"" abstract=""true""&#xD;&#xA;						  class=""org.springframework.transaction.interceptor.TransactionProxyFactoryBean"">&#xD;&#xA;						<property name=""transactionManager"">&#xD;&#xA;							<ref bean=""transactionManager""/>&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""transactionAttributes"">&#xD;&#xA;							<props>&#xD;&#xA;								<prop key=""save*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""remove*"">PROPAGATION_REQUIRED</prop>&#xD;&#xA;								<prop key=""*"">PROPAGATION_REQUIRED,readOnly</prop>&#xD;&#xA;							</props>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;					&#xD;&#xA;&#xD;&#xA;					<!-- DAO bean -->&#xD;&#xA;&#xD;&#xA;					<!-- Generic DAO - can be used when doing standard CRUD -->&#xD;&#xA;					<bean id=""dao"" class=""com.org.restservice.common.BaseDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;						<property name=""dataSource"" ref=""dataSource"" />&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- Generic Facade that can be used to do basic CRUD operations on any &#xD;&#xA;						objects -->&#xD;&#xA;					<bean id=""facade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean class=""com.org.restservice.common.BaseFacade"">&#xD;&#xA;								<property name=""Dao"" ref=""dao"" />&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				--------------------- Context Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;					<!-- Transaction declarations for business services. -->&#xD;&#xA;&#xD;&#xA;					<bean id=""authenticationFacade"" parent=""txProxyTemplate"">&#xD;&#xA;						<property name=""target"">&#xD;&#xA;							<bean&#xD;&#xA;								class=""com.org.restservice.bo.user.AuthenticationFacadeImpl"">&#xD;&#xA;								<property name=""authenticationDao"">&#xD;&#xA;									<ref bean=""authenticationDao"" />&#xD;&#xA;								</property>&#xD;&#xA;							</bean>&#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;					<!-- authenticationDao: Hibernate implementation -->&#xD;&#xA;					<bean id=""authenticationDao""&#xD;&#xA;						class=""com.org.restservice.bo.user.AuthenticationDaoHibernate"">&#xD;&#xA;						<property name=""sessionFactory"">&#xD;&#xA;							<ref bean=""sessionFactory"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;						<property name=""dataSource"">&#xD;&#xA;							<ref bean=""dataSource"" />&#xD;&#xA;						</property>&#xD;&#xA;&#xD;&#xA;					</bean>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Jndi Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""&#xD;&#xA;						""http://www.springframework.org/dtd/spring-beans.dtd"">&#xD;&#xA;&#xD;&#xA;					<!-- author: Sarkar Zahir Ahamed <ahamed.sarkar@dbbl.com.bd> -->&#xD;&#xA;&#xD;&#xA;				<beans>&#xD;&#xA;&#xD;&#xA;					<!-- ========================= PERSISTENCE DEFINITIONS ========================= -->&#xD;&#xA;					<!-- JNDI DataSource for J2EE environments -->&#xD;&#xA;					<bean id=""dataSource"" class=""org.springframework.jndi.JndiObjectFactoryBean"">&#xD;&#xA;						<property name=""jndiName"">&#xD;&#xA;							<value>java:/comp/env/jndi/orcl</value>                       &#xD;&#xA;						</property>&#xD;&#xA;					</bean>&#xD;&#xA;				</beans>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;				---------------------Web XML Declaration:&#xD;&#xA;&#xD;&#xA;				<?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;				<web-app xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""http://java.sun.com/xml/ns/javaee"" xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"" id=""WebApp_ID"" version=""3.0"">&#xD;&#xA;				  <display-name>RestWebService</display-name>&#xD;&#xA;				 &#xD;&#xA;				 <!-- Spring Listener -->&#xD;&#xA;					<listener>&#xD;&#xA;						<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>&#xD;&#xA;					</listener>&#xD;&#xA;&#xD;&#xA;					<!-- Jersey Servlet -->&#xD;&#xA;					<servlet>&#xD;&#xA;						<servlet-name>jersey-servlet</servlet-name>&#xD;&#xA;						<servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>&#xD;&#xA;						<!-- Register resources and providers -->&#xD;&#xA;						<init-param>&#xD;&#xA;							<param-name>jersey.config.server.provider.packages</param-name>&#xD;&#xA;							<param-value>com.org.restservice</param-value>&#xD;&#xA;						</init-param>&#xD;&#xA;						<load-on-startup>1</load-on-startup>&#xD;&#xA;					</servlet>&#xD;&#xA;&#xD;&#xA;					<servlet-mapping>&#xD;&#xA;						<servlet-name>jersey-servlet</servlet-name>&#xD;&#xA;						<url-pattern>/api/*</url-pattern>&#xD;&#xA;					</servlet-mapping>&#xD;&#xA;&#xD;&#xA;					<!-- loading Spring Context for registering beans with ApplicationContext -->&#xD;&#xA;					<context-param>&#xD;&#xA;						<param-name>contextConfigLocation</param-name>&#xD;&#xA;						<param-value>WEB-INF/classes/SpringBeans.xml</param-value>&#xD;&#xA;					</context-param>&#xD;&#xA;&#xD;&#xA;					<!-- welcome file -->&#xD;&#xA;					<welcome-file-list>&#xD;&#xA;						<welcome-file>index.jsp</welcome-file>&#xD;&#xA;					</welcome-file-list>&#xD;&#xA;					&#xD;&#xA;				</web-app>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/pwXeu.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/X8UVL.jpg";;deleted 33 characters in body
